name: mucgpt-stack

services:
  postgres:
    image: postgres:17.4-alpine3.21@sha256:7062a2109c4b51f3c792c7ea01e83ed12ef9a980886e3b3d380a7d2e5f6ce3f5
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
      - POSTGRES_HOST_AUTH_METHOD=trust
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    healthcheck: &healthcheck
      test: ["CMD-SHELL", "pg_isready -d postgres -U admin"]
      interval: 30s
      timeout: 60s
      retries: 3
      start_period: 60s
    security_opt: &security_settings
      - no-new-privileges:true
    networks:
      - keycloak

    # see https://event-driven.io/en/automatically_connect_pgadmin_to_database/
  pg-admin:
    image: dpage/pgadmin4:9.0.0@sha256:1b2f1ecb93ed2c20530703f77acdfa0da8c2470a4e17044504057cea2d6b4fac
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=admin
      - PGADMIN_CONFIG_SERVER_MODE=False
      - PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=False
      - PGADMIN_LISTEN_PORT=5050
    ports:
      - "5050:5050"
    depends_on:
      - postgres
    healthcheck:
      <<: *healthcheck
      test: ["CMD", "wget", "-O", "-", "http://localhost:5050/misc/ping"]
    security_opt: *security_settings
    volumes:
      - './pgadmin/servers.json:/pgadmin4/servers.json'
      - './pgadmin/pgpass:/pgadmin4/pgpass'
    user: root # see https://github.com/pgadmin-org/pgadmin4/issues/6257
    entrypoint: /bin/sh -c "chmod 600 /pgadmin4/pgpass; /entrypoint.sh;" # see https://www.postgresql.org/docs/current/libpq-pgpass.html#LIBPQ-PGPASS (last paragraph)
    networks:
      - keycloak

  keycloak:
    container_name: keycloak
    image: keycloak/keycloak:26.2.5@sha256:4883630ef9db14031cde3e60700c9a9a8eaf1b5c24db1589d6a2d43de38ba2a9
    command:
      - start-dev
    environment:
      - KC_BOOTSTRAP_ADMIN_USERNAME=admin
      - KC_BOOTSTRAP_ADMIN_PASSWORD=admin
      - KC_HEALTH_ENABLED=true
      - KC_HTTP_PORT=8100
      - KC_HTTP_RELATIVE_PATH=/auth
    ports:
      - "8100:8100"
    volumes:
      - ./keycloak/plugins:/opt/keycloak/providers/
    networks:
      - keycloak
    healthcheck:
      <<: *healthcheck
      test:
        [
          "CMD-SHELL",
          "exec 3<>/dev/tcp/127.0.0.1/9000;echo -e 'GET /health/ready HTTP/1.1\r\nhost: http://localhost\r\nConnection: close\r\n\r\n' >&3;if [ $? -eq 0 ]; then exit 0;else exit 1;fi;",
        ]
    security_opt: *security_settings

  init-keycloak:
    image: klg71/keycloakmigration:0.2.81@sha256:2c73c904a644b75637a01434f357caee9c029f37bd8960793c68233d5afa468a
    depends_on:
      - keycloak
    environment:
      ADMIN_USER: admin
      ADMIN_PASSWORD: admin
      BASEURL: http://keycloak:8100/auth
      WAIT_FOR_KEYCLOAK: "true"
      FAIL_ON_UNDEFINED_VARIABLES: "true"
      KEYCLOAK_CHANGELOG: /migration/keycloak-changelog.yml
    volumes:
      - "./keycloak/migration:/migration"
    networks:
      - keycloak
    security_opt: *security_settings
  refarch-gateway:
    image: ghcr.io/it-at-m/refarch/refarch-gateway:1.5.0@sha256:9ebe76275d7aa7863f66e600ed91aa10c538faa183e06c0a6b3ef87fceb88315
    depends_on:
      init-keycloak:
        condition: service_completed_successfully
      keycloak:
        condition: service_started
    ports:
      - "8083:8080"
    environment:
      - ALLOWED_ORIGINS_PUBLIC=http://localhost:*
      - ALLOWED_ORIGINS_CLIENTS=http://localhost:*
      - SPRING_CLOUD_GATEWAY_ROUTES_0_ID=sso
      - SPRING_CLOUD_GATEWAY_ROUTES_0_URI=http://keycloak:8100/
      - SPRING_CLOUD_GATEWAY_ROUTES_0_PREDICATES_0=Path=/api/sso/userinfo
      - SPRING_CLOUD_GATEWAY_ROUTES_0_FILTERS_0=RewritePath=/api/sso/userinfo, /auth/realms/local_realm/protocol/openid-connect/userinfo
      - SPRING_CLOUD_GATEWAY_ROUTES_1_ID=backend
      - SPRING_CLOUD_GATEWAY_ROUTES_1_URI=http://core-service:8000/
      - SPRING_CLOUD_GATEWAY_ROUTES_1_PREDICATES_0=Path=/api/backend/**
      - SPRING_CLOUD_GATEWAY_ROUTES_1_FILTERS_0=RewritePath=/api/backend/(?<urlsegments>.*), /api/$\{urlsegments}
      - SPRING_CLOUD_GATEWAY_ROUTES_2_ID=assistant
      - SPRING_CLOUD_GATEWAY_ROUTES_2_URI=http://assistant-service:8084/
      - SPRING_CLOUD_GATEWAY_ROUTES_2_PREDICATES_0=Path=/api/bot/**
      - SPRING_CLOUD_GATEWAY_ROUTES_3_ID=frontend
      - SPRING_CLOUD_GATEWAY_ROUTES_3_URI=http://frontend:8080/
      - SPRING_CLOUD_GATEWAY_ROUTES_3_PREDICATES_0=Path=/**
      - SPRING_PROFILES_ACTIVE=hazelcast-local
      - SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUERURI=http://keycloak:8100/auth/realms/local_realm
      - SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_SSO_ISSUERURI=$${spring.security.oauth2.resourceserver.jwt.issuer-uri}
      - SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_SSO_PROVIDER=sso
      - SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_SSO_CLIENTID=mucgpt
      - SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_SSO_CLIENTSECRET=client_secret
      - SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_SSO_SCOPE=profile,openid,LHM,LHM_Extended
    networks:
      - keycloak
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      <<: *healthcheck
      test: ["CMD-SHELL", "curl http://localhost:8080/actuator/health/liveness"]
    security_opt: *security_settings

  core-service:
    build:
      context: ../mucgpt-core-service
      dockerfile: Dockerfile
      args:
        - HTTPS_PROXY=${HTTPS_PROXY}
    env_file:
      - ./.env
    ports:
      - "39146:8000"
    networks:
      - keycloak
    environment:
      - MUCGPT_CORE_FRONTEND__LABELS__ENV_NAME=MUCGPT-LOKAL
      - MUCGPT_CORE_FRONTEND__ALTERNATIVE_LOGO=false
      - MUCGPT_CORE_FRONTEND__ENABLE_SIMPLY=true
      - MUCGPT_CORE_BACKEND__ENABLE_AUTH=true
      - MUCGPT_CORE_BACKEND__UNAUTHORIZED_USER_REDIRECT_URL=""
      - MUCGPT_CORE_BACKEND__SSO_CONFIG__SSO_USERINFO_URL=http://keycloak:8100/auth/realms/local_realm/protocol/openid-connect/userinfo
      - MUCGPT_CORE_BACKEND__SSO_CONFIG__ROLE=lhm-ab-mucgpt-user
    healthcheck:
      <<: *healthcheck
      test: ["CMD-SHELL", "curl http://localhost:39146/api/backend/health"]
  assistant-migrations:
    build:
      context: ../mucgpt-assistant-service-migrations
      dockerfile: Dockerfile
      args:
        - HTTPS_PROXY=${HTTPS_PROXY}
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - MUCGPT_ASSISTANT_DB_HOST=postgres
      - MUCGPT_ASSISTANT_DB_PORT=5432
      - MUCGPT_ASSISTANT_DB_NAME=postgres
      - MUCGPT_ASSISTANT_DB_USER=admin
      - MUCGPT_ASSISTANT_DB_PASSWORD=admin
    networks:
      - keycloak
    restart: "no"  # Run once and exit

  assistant-service:
    build:
      context: ../mucgpt-assistant-service
      dockerfile: Dockerfile
      args:
        - HTTPS_PROXY=${HTTPS_PROXY}
    depends_on:
      assistant-migrations:
        condition: service_completed_successfully
    environment:
      - MUCGPT_ASSISTANT_SSO_USERINFO_URL=http://keycloak:8100/auth/realms/local_realm/protocol/openid-connect/userinfo
      - MUCGPT_ASSISTANT_SSO_ROLE=lhm-ab-mucgpt-user
      - MUCGPT_ASSISTANT_DB_HOST=postgres
      - MUCGPT_ASSISTANT_DB_PORT=5432
      - MUCGPT_ASSISTANT_DB_NAME=postgres
      - MUCGPT_ASSISTANT_DB_USER=admin
      - MUCGPT_ASSISTANT_DB_PASSWORD=admin

    ports:
      - "39147:8084"
    networks:
      - keycloak
    healthcheck:
      <<: *healthcheck
      test: ["CMD-SHELL", "curl http://localhost:39147/api/backend/health"]

  frontend:
    build:
      context: ../mucgpt-frontend
      dockerfile: Dockerfile
      args:
        - HTTPS_PROXY=${HTTPS_PROXY}
    ports:
      - "8081:8080"
    networks:
      - keycloak

networks:
  keycloak:
