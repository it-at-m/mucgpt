from typing import List, Literal, Optional

from pydantic import BaseModel, Field


class ChatTurn(BaseModel):
    """A single turn in a chat, containing a user message and an optional bot response."""

    user: str = Field(..., description="The user's message.")
    bot: Optional[str] = Field(None, description="The bot's response.")


class ChatRequest(BaseModel):
    """Request model for the chat endpoint."""

    history: List[ChatTurn] = Field([], description="The chat history.")
    temperature: Optional[float] = Field(
        0.7, description="The temperature for the model."
    )
    max_output_tokens: Optional[int] = Field(
        4096, description="The maximum number of output tokens."
    )
    system_message: Optional[str] = Field(
        None, description="The system message for the model."
    )
    model: Optional[str] = Field(
        "gpt-4o-mini", description="The model to use for the chat."
    )


class ChatResult(BaseModel):
    """Result model for the chat endpoint."""

    content: str = Field(..., description="The content of the chat response.")


class CountResult(BaseModel):
    """Result model for a count operation."""

    count: int = Field(..., description="The result of the count operation.")


class CountTokenRequest(BaseModel):
    """Request model for counting tokens."""

    text: str = Field(..., description="The text to count tokens for.")
    model: str = Field(..., description="The model to use for token counting.")


class SummarizeResult(BaseModel):
    """Result model for the summarize endpoint."""

    answer: List[str] = Field(
        ..., description="The summarized text as a list of strings."
    )


class SumRequest(BaseModel):
    """Request model for the summarize endpoint."""

    text: str = Field("", description="The text to summarize.")
    detaillevel: Optional[str] = Field(
        "short",
        description="The desired level of detail for the summary (e.g., 'short', 'medium', 'long').",
    )
    language: Optional[str] = Field(
        "Deutsch", description="The language of the summary."
    )
    model: str = Field("gpt-4o-mini", description="The model to use for summarization.")


# follow openai chat completion API model structure
class ChatCompletionMessage(BaseModel):
    role: Literal["system", "user", "assistant"] = Field(
        ..., description="Message role: system, user, or assistant"
    )
    content: str = Field(..., description="The message content")


class ChatCompletionRequest(BaseModel):
    model: str = Field("gpt-4o-mini", description="The model to use")
    messages: List[ChatCompletionMessage] = Field(
        ..., description="Sequence of messages in the conversation"
    )
    temperature: Optional[float] = Field(0.7, description="Sampling temperature")
    max_tokens: Optional[int] = Field(4096, description="Maximum tokens to generate")
    stream: Optional[bool] = Field(
        False, description="Whether to stream partial responses back"
    )
    enabled_tools: Optional[List[str]] = Field(
        None, description="List of enabled tool IDs for this completion request"
    )


class ChatCompletionChoice(BaseModel):
    index: int
    message: ChatCompletionMessage
    finish_reason: Optional[str] = Field(
        None, description="Why the model stopped generating"
    )


class Usage(BaseModel):
    prompt_tokens: int = Field(
        ..., description="Number of tokens in the prompt/messages"
    )
    completion_tokens: int = Field(
        ..., description="Number of tokens generated by the model"
    )
    total_tokens: int = Field(..., description="Total tokens consumed")


class ChatCompletionResponse(BaseModel):
    id: str = Field(..., description="Unique ID for this completion")
    object: str = Field("chat.completion", description="Type of object returned")
    created: int = Field(..., description="Unix timestamp for creation")
    choices: List[ChatCompletionChoice] = Field(
        ..., description="List of completion choices"
    )
    usage: Usage = Field(..., description="Token usage information")


class ChatCompletionDelta(BaseModel):
    """Incremental content update for streaming responses"""

    role: Optional[Literal["system", "user", "assistant"]] = Field(
        None,
        description="Role indicated when provided (assistant only after initial chunk)",
    )
    content: Optional[str] = Field(None, description="New content for this chunk")
    tool_calls: Optional[List[dict]] = Field(None, description="Tool call information")


class ChatCompletionChunkChoice(BaseModel):
    """A single choice in a streaming chunk"""

    delta: ChatCompletionDelta = Field(..., description="Partial message update")
    index: int = Field(..., description="Choice index, always 0 for single-stream")
    finish_reason: Optional[str] = Field(
        None, description="Why the stream stopped for this choice"
    )


class ChatCompletionChunk(BaseModel):
    """Streaming chunk of chat completion, in ndjson format"""

    id: str = Field(..., description="Same ID as the full completion request")
    object: Literal["chat.completion.chunk"] = Field(
        "chat.completion.chunk", description="Type of object returned"
    )
    created: int = Field(..., description="Unix timestamp for chunk creation")
    choices: List[ChatCompletionChunkChoice] = Field(
        ..., description="List of partial choices for this chunk"
    )


class ToolInfo(BaseModel):
    """Detailed information about a tool."""

    name: str = Field(..., description="Tool name or id.")
    description: str = Field(..., description="Description of the tool.")
    # Optionally, add more fields like parameters if needed


class ToolListResponse(BaseModel):
    """Response model for listing available tools with details."""

    tools: List[ToolInfo] = Field(
        ..., description="List of available tools with details."
    )


class CreateBotRequest(BaseModel):
    """Request model for creating a bot."""

    input: str = Field(..., description="The input to create the bot.")
    model: str = Field("gpt-4o-mini", description="The model to use for bot creation.")
    max_tokens: int = Field(
        4096, description="The maximum number of output tokens for the bot."
    )


class CreateBotResult(BaseModel):
    """Result model for creating a bot."""

    system_prompt: str = Field(..., description="The system prompt for the bot.")
    description: str = Field(..., description="The description of the bot.")
    title: str = Field(..., description="The title of the bot.")
