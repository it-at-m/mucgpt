name: mucgpt-stack

services:
  postgres:
    image: postgres:17.4-alpine3.21@sha256:7062a2109c4b51f3c792c7ea01e83ed12ef9a980886e3b3d380a7d2e5f6ce3f5
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
      - POSTGRES_HOST_AUTH_METHOD=trust
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    healthcheck: &healthcheck
      test: ["CMD-SHELL", "pg_isready -d postgres -U admin"]
      interval: 30s
      timeout: 60s
      retries: 3
      start_period: 60s
    security_opt: &security_settings
      - no-new-privileges:true
    networks:
      - keycloak

  # see https://event-driven.io/en/automatically_connect_pgadmin_to_database/
  pg-admin:
    image: dpage/pgadmin4:9.8.0@sha256:d115bcd737940a6cfb61a54439d50de8b850e0782e2363102c9fa761f4022f49
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=admin
      - PGADMIN_CONFIG_SERVER_MODE=False
      - PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=False
      - PGADMIN_LISTEN_PORT=5050
    ports:
      - "5050:5050"
    depends_on:
      - postgres
    healthcheck:
      <<: *healthcheck
      test: ["CMD", "wget", "-O", "-", "http://localhost:5050/misc/ping"]
    security_opt: *security_settings
    volumes:
      - "./pgadmin/servers.json:/pgadmin4/servers.json"
      - "./pgadmin/pgpass:/pgadmin4/pgpass"
    user: root # see https://github.com/pgadmin-org/pgadmin4/issues/6257
    entrypoint: /bin/sh -c "chmod 600 /pgadmin4/pgpass; /entrypoint.sh;" # see https://www.postgresql.org/docs/current/libpq-pgpass.html#LIBPQ-PGPASS (last paragraph)
    networks:
      - keycloak

  keycloak:
    container_name: keycloak
    image: keycloak/keycloak:26.3.4@sha256:2b32a51a31e8d780d9fa9a69a59ead69975263c61b5dd13559090e22aa26f100
    command:
      - start-dev
    environment:
      - KC_BOOTSTRAP_ADMIN_USERNAME=admin
      - KC_BOOTSTRAP_ADMIN_PASSWORD=admin
      - KC_HEALTH_ENABLED=true
      - KC_HTTP_PORT=8100
      - KC_HTTP_RELATIVE_PATH=/auth
    ports:
      - "8100:8100"
    volumes:
      - ./keycloak/plugins:/opt/keycloak/providers/
    networks:
      - keycloak
    healthcheck:
      <<: *healthcheck
      test:
        [
          "CMD-SHELL",
          "exec 3<>/dev/tcp/127.0.0.1/9000;echo -e 'GET /health/ready HTTP/1.1\r\nhost: http://localhost\r\nConnection: close\r\n\r\n' >&3;if [ $? -eq 0 ]; then exit 0;else exit 1;fi;",
        ]
    security_opt: *security_settings

  init-keycloak:
    image: klg71/keycloakmigration:0.2.106@sha256:1bb087068881988c548eeaf0b837d88f0ab95c5e01f3718ad3db394d184c43db
    depends_on:
      - keycloak
    environment:
      ADMIN_USER: admin
      ADMIN_PASSWORD: admin
      BASEURL: http://keycloak:8100/auth
      WAIT_FOR_KEYCLOAK: "true"
      FAIL_ON_UNDEFINED_VARIABLES: "true"
      KEYCLOAK_CHANGELOG: /migration/keycloak-changelog.yml
    volumes:
      - "./keycloak/migration:/migration"
    networks:
      - keycloak
    security_opt: *security_settings
  refarch-gateway:
    image: ghcr.io/it-at-m/refarch/refarch-gateway:1.6.0@sha256:df27f73a72c42f15e7d37267b2b726e70cc917bcf8b03f0b275787715477acae
    depends_on:
      init-keycloak:
        condition: service_completed_successfully
      keycloak:
        condition: service_started
    ports:
      - "8083:8080"
    env_file:
      - ./.env
    environment:
      - ALLOWED_ORIGINS_PUBLIC=http://localhost:*
      - ALLOWED_ORIGINS_CLIENTS=http://localhost:*
      - SPRING_CLOUD_GATEWAY_ROUTES_0_ID=sso
      - SPRING_CLOUD_GATEWAY_ROUTES_0_URI=http://keycloak:8100/
      - SPRING_CLOUD_GATEWAY_ROUTES_0_PREDICATES_0=Path=/api/sso/userinfo
      - SPRING_CLOUD_GATEWAY_ROUTES_0_FILTERS_0=RewritePath=/api/sso/userinfo, /auth/realms/${MUCGPT_SSO_REALM}/protocol/openid-connect/userinfo
      - SPRING_CLOUD_GATEWAY_ROUTES_1_ID=backend
      - SPRING_CLOUD_GATEWAY_ROUTES_1_URI=http://core-service:8000/
      - SPRING_CLOUD_GATEWAY_ROUTES_1_PREDICATES_0=Path=/api/backend/**
      - SPRING_CLOUD_GATEWAY_ROUTES_1_FILTERS_0=RewritePath=/api/backend/(?<urlsegments>.*), /api/$\{urlsegments}
      - SPRING_CLOUD_GATEWAY_ROUTES_2_ID=assistant
      - SPRING_CLOUD_GATEWAY_ROUTES_2_URI=http://assistant-service:8084/
      - SPRING_CLOUD_GATEWAY_ROUTES_2_PREDICATES_0=Path=/api/assistant/**, /api/user/**
      - SPRING_CLOUD_GATEWAY_ROUTES_3_ID=frontend
      - SPRING_CLOUD_GATEWAY_ROUTES_3_URI=http://frontend:8080/
      - SPRING_CLOUD_GATEWAY_ROUTES_3_PREDICATES_0=Path=/**
      - SPRING_PROFILES_ACTIVE=hazelcast-local
      - SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUERURI=http://keycloak:8100/auth/realms/${MUCGPT_SSO_REALM}
      - SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_SSO_ISSUERURI=$${spring.security.oauth2.resourceserver.jwt.issuer-uri}
      - SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_SSO_PROVIDER=sso
      - SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_SSO_CLIENTID=${MUCGPT_SSO_CLIENTID}
      - SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_SSO_CLIENTSECRET=${MUCGPT_SSO_CLIENT_SECRET}
      - SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_SSO_SCOPE=${MUCGPT_SSO_SCOPE}
    networks:
      - keycloak
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      <<: *healthcheck
      test: ["CMD-SHELL", "curl http://localhost:8080/actuator/health/liveness"]
    security_opt: *security_settings

  core-service:
    build:
      context: ../mucgpt-core-service
      dockerfile: Dockerfile
      args:
        - HTTPS_PROXY=${HTTPS_PROXY}
    env_file:
      - ./.env
    ports:
      - "39146:8000"
    networks:
      - keycloak
    healthcheck:
      <<: *healthcheck
      test: ["CMD-SHELL", "curl http://localhost:39146/api/backend/health"]
    environment:
      - SSL_CERT_FILE=${SSL_CERT_FILE:-}
    volumes:
      - ${CA_BUNDLE_PATH:-./ca-bundle.crt}:${SSL_MOUNT_PATH:-/etc/pki/ca-trust/extracted/pem/ca-bundle.crt}:ro,Z

  assistant-migrations:
    build:
      context: ../mucgpt-assistant-service-migrations
      dockerfile: Dockerfile
      args:
        - HTTPS_PROXY=${HTTPS_PROXY}
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - ./.env
    networks:
      - keycloak
    restart: "no" # Run once and exit

  assistant-service:
    build:
      context: ../mucgpt-assistant-service
      dockerfile: Dockerfile
      args:
        - HTTPS_PROXY=${HTTPS_PROXY}
    depends_on:
      assistant-migrations:
        condition: service_completed_successfully
    env_file:
      - ./.env
    ports:
      - "39147:8084"
    networks:
      - keycloak
    healthcheck:
      <<: *healthcheck
      test: ["CMD-SHELL", "curl http://localhost:39147/api/backend/health"]

  frontend:
    build:
      context: ../mucgpt-frontend
      dockerfile: Dockerfile
      args:
        - HTTPS_PROXY=${HTTPS_PROXY}
    ports:
      - "8081:8080"
    networks:
      - keycloak

networks:
  keycloak:
