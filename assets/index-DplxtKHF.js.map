{"version":3,"mappings":"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","names":["i18n","initReactI18next","logo","alternative_logo","logo_black","DEFAULTLANG","LanguageContext","React","LanguageContextProvider","props","language","setLanguage","useState","jsx","TermsOfUseDialog","defaultOpen","onAccept","t","useTranslation","jsxs","Dialog","DialogTrigger","Button","DialogSurface","styles","DialogBody","DialogTitle","DialogContent","Link","DialogActions","_","Checkmark24Filled","CHAT_NAME_PROMPT","chatApi","options","url","sumApi","file","formData","response","handleResponse","handleRedirect","reload","redirectUrl","parsedResponse","configApi","brainstormApi","simplyApi","countTokensAPI","createBotApi","createChatName","query","answer","temperature","system_message","max_output_tokens","model","useStyles","makeStyles","LanguageSelector","onSelectionChange","defaultlang","Dropdown","Option","LLMSelector","defaultLLM","item","index","cheetsheet","SettingsDrawer","onLanguageSelectionChanged","version","commit","fontscale","setFontscale","isLight","setTheme","onLLMSelectionChanged","llmOptions","currentLLM","isOpen","setIsOpen","fontscaleID","useId","feedback_headerID","onClickRightButton","useCallback","min_temp","max_temp","onFontscaleChange","data","closeDrawer","OverlayDrawer","Tooltip","Dismiss24Regular","FontIncrease20Regular","Slider","Label","DarkTheme20Regular","Mail24Regular","Tag","ChevronDown24Regular","tokens","STORAGE_KEYS","customBrandRamp","adjustTheme","scaling","theme","createLightTheme","createDarkTheme","DEFAULTLLM","LLMContext","LLMContextProvider","LLM","setLLM","LightContext","createContext","DEFAULT_APP_CONFIG","BOT_STORE","LEGACY_BOT_STORE","SUMMARIZE_STORE","SIMPLY_STORE","BRAINSTORM_STORE","CHAT_STORE","CREATE_BOT_EXAMPLE_1","CREATE_BOT_EXAMPLE_2","CREATE_BOT_EXAMPLE_3","migrate_old_bots","db","StorageService","newStore","BotStorageService","oldbots","oldbot","newBot","migrateChats","_oldVersion","_newVersion","transaction","_event","storeName","oldchats","chat","newChat","config","active_chat_id","openDB","oldVersion","newVersion","request","messages","configuration","id","uuid","name","favorite","db_object","error","alternative_id","stored","result","results","a","b","popedMessage","updated","message","last","newName","fav","chat_id","filter_predicate","bot_id","bot_config","config_with_id","chatname","storageService","i","formatDate","date","Layout","useParams","styles2","navigate","useNavigate","termsofuseread","language_pref","setConfig","llm_pref","font_scaling_pref","ligth_theme_pref","useContext","setLight","fontscaling","setFontscaling","simply","setSimply","models","setModels","title","setTitle","onThemeChange","light","botStorageService","useEffect","bot","onAcceptTermsOfUse","e","selection","lang","llm","found_llm","FluentProvider","NavLink","isActive","Outlet","AnswerIcon","BrainCircuit24Regular","Mermaid","text","darkTheme","diagram","setDiagram","setID","mermaid","svg","value","svgImage","el","download","svgElement","base64doc","ArrowDownload24Regular","CodeBlockRenderer","children","className","node","rest","match","copied","setCopied","icon","setIcon","oncopy","diagrams","type","mermaidProps","SyntaxHighlighter","duotoneLight","dark","IconButton","QuickPromptContext","QuickPromptProvider","quickPrompts","setQuickPrompts","QuickPromptList","setQuestion","Stack","Divider","quickPrompt","Fragment","Answer","onRegenerateResponseClicked","formatted","setFormatted","ref","setRef","CheckmarkSquare24Regular","Copy24Regular","ContentView24Regular","ArrowSync24Regular","Markdown","remarkGfm","rehypeRaw","question","AnswerLoading","animatedStyles","useSpring","animated","AnswerError","onRetry","ErrorCircle24Regular","PrimaryButton","QuestionInput","onSend","disabled","placeholder","clearOnSend","tokens_used","token_limit_tracking","description","setDescription","actual","countWords","sendQuestion","onEnterPress","ev","str","onQuestionChange","_ev","newValue","Textarea","Send28Filled","Example","system","onClick","ariaLabel","ExampleList","examples","onExampleClicked","x","ClearChatButton","ChatAdd24Regular","Sidebar","actions","content","ChatsettingsDrawer","setTemperature","setMaxTokens","systemPrompt","setSystemPrompt","temperature_headerID","temperatureID","max_tokens_headerID","max_tokensID","min_max_tokens","max_max_tokens","onTemperatureChange","onMaxtokensChange","onSytemPromptChange","onClearSystemPrompt","sidebar_action","sidebar_content","InfoLabel","Field","History","allChats","currentActiveChatId","onDeleteChat","onChatNameChange","onFavChange","onSelect","getCategory","lastEdited","today","lastEditedDate","diffTime","diffDays","categorizedChats","acc","category","sortedChats","categoryA","categoryB","chats","Menu","MenuTrigger","Options24Regular","MenuPopover","MenuList","MenuItem","useDebounce","inputValue","delay","debouncedValue","setDebouncedValue","handler","ChatLayout","sidebar","answers","input","showExamples","header","header_as_markdown","messages_description","size","sidebarWidth","ChatTurnComponent","usermsg","botmsg","usermsglabel","botmsglabel","ChatMessageIcon","PersonChat24Regular","RollBackMessage","onRollback","DeleteArrowBackRegular","UserChatMessage","onRollbackMessage","AnswerList","regularBotMsg","isLoading","makeApiRequest","chatMessageStreamEnd","lastQuestionRef","answersComponent","setAnswersComponent","CHAT_EXAMPLES","Chat","useRef","setIsLoading","setError","setAnswers","setMaxOutputTokens","active_chat","setActiveChat","debouncedSystemPrompt","systemPromptTokens","setSystemPromptTokens","totalTokens","setTotalTokens","setAllChats","makeTokenCountRequest","onMaxTokensChanged","fetchHistory","existingData","askResponse","user_tokens","streamed_tokens","latestResponse","chunk","readNDJSONStream","info","clearChat","onRegeneratResponseClicked","answ","prev","curr","example","onTemperatureChanged","temp","maxTokens","onSystemPromptChanged","answerList","examplesComponent","inputComponent","sidebar_actions","SumInput","dragging","setDragging","setFile","removeDocuments","handleDrop","files","handleDragOver","sendQuestionDisabled","Delete24Regular","SummarizeSidebar","onDetaillevelChanged","detaillevel_pref","onDetaillevelChangedInternal","RadioGroup","Radio","setupStore","handleDeleteChat","handleRollback","SumAnswer","top_n","getSelected","setSelected","sanitizedAnswerHtmlWithoutColors","DOMPurify","SumAnswerList","STORAGE_KEY_LEVEL_OF_DETAIL","EXAMPLES","Summarize","detaillevel","setDetaillevel","questionText","completeAnswer","Mindmap","markdown","transformer","Transformer","svgEl","isSourceView","setIsSourceView","freeplaneXML","setFreeplaneXML","useLayoutEffect","createMM","toggleSourceView","rescale","Markmap","svgBlob","img","link","parseXML","parsed","doc","mapElem","child","parseNodes","to_be_parsed","parent","mm","root","ScaleFill24Regular","Brainstorm","Faq","onClose","Accordion","AccordionItem","AccordionHeader","AccordionPanel","vorgeschlageneAntworten","zurückziehen","history","Version","AddBotButton","BotAdd24Regular","CreateBotDialog","showDialogInput","setShowDialogInput","loading","setLoading","setInput","showDialogOutput","setShowDialogOutput","onInputChanged","onDescriptionChanged","onTitleChanged","onRefinedPromptChanged","onPromptButtonClicked","created_id","onBackButtonClicked","onCancelButtonClicked","createBot","manuelBotCreation","ArrowRight24Regular","EditArrowBack24Regular","bots","setBots","communityBots","setCommunityBots","community_assistants","onAddBot","Simply","BotsettingsDrawer","onBotChange","onDeleteBot","before_content","onEditChange","isEditable","setEditable","publish","setPublish","isOwner","setIsOwner","onTitleChange","onDescriptionChange","toggleReadOnly","updatedTitle","updatedBot","actions_component","Save24Regular","Edit24Regular","ChatSettings24Regular","BotChat","sidebarSize","setSidebarWidth","botChatStorage","botConfig","setBotConfig","existingChat","onBotChanged","initializeIcons","router","createHashRouter","Bot","__vitePreload","enableMocking","ReactDOM","RouterProvider"],"ignoreList":[],"sources":["../../src/i18n.ts","../../src/assets/mucgpt_logo.png","../../src/assets/mugg_tschibidi.png","../../src/assets/mucgpt_black.png","../../src/components/LanguageSelector/LanguageContextProvider.tsx","../../src/components/TermsOfUseDialog/TermsOfUseDialog.tsx","../../src/api/api.ts","../../src/components/LanguageSelector/LanguageSelector.tsx","../../src/components/LLMSelector/LLMSelector.tsx","../../src/assets/mucgpt_cheatsheet.pdf","../../src/components/SettingsDrawer/SettingsDrawer.tsx","../../src/pages/layout/LayoutHelper.tsx","../../src/components/LLMSelector/LLMContextProvider.tsx","../../src/pages/layout/LightContext.tsx","../../src/constants.ts","../../src/service/migration.ts","../../src/service/storage.ts","../../src/service/botstorage.ts","../../src/pages/layout/Layout.tsx","../../src/components/Answer/AnswerIcon.tsx","../../src/components/CodeBlockRenderer/Mermaid.tsx","../../src/components/CodeBlockRenderer/CodeBlockRenderer.tsx","../../src/components/QuickPrompt/QuickPromptProvider.tsx","../../src/components/QuickPrompt/QuickPromptList.tsx","../../src/components/Answer/Answer.tsx","../../src/components/Answer/AnswerLoading.tsx","../../src/components/Answer/AnswerError.tsx","../../src/components/QuestionInput/QuestionInput.tsx","../../src/components/Example/Example.tsx","../../src/components/Example/ExampleList.tsx","../../src/components/ClearChatButton/ClearChatButton.tsx","../../src/components/Sidebar/Sidebar.tsx","../../src/components/ChatsettingsDrawer/ChatsettingsDrawer.tsx","../../src/components/History/History.tsx","../../src/hooks/debouncehook.ts","../../src/components/ChatLayout/ChatLayout.tsx","../../src/components/ChatTurnComponent/ChatTurnComponent.tsx","../../src/components/UserChatMessage/ChatMessageIcon.tsx","../../src/components/UserChatMessage/RollbackMessage.tsx","../../src/components/UserChatMessage/UserChatMessage.tsx","../../src/components/AnswerList/AnswerList.tsx","../../src/pages/chat/Chat.tsx","../../src/components/SumInput/SumInput.tsx","../../src/components/SummarizeSidebar/SummarizeSidebar.tsx","../../src/pages/page_helpers.ts","../../src/components/SumAnswer/SumAnswer.tsx","../../src/components/AnswerList/SumAnswerList.tsx","../../src/pages/summarize/Summarize.tsx","../../src/components/Mindmap/Mindmap.tsx","../../src/pages/brainstorm/Brainstorm.tsx","../../src/pages/faq/Faq.tsx","../../src/assets/vorgeschlagene_antworten.png","../../src/assets/zurückziehen.png","../../src/assets/History.png","../../src/assets/simply.png","../../src/pages/version/Version.tsx","../../src/components/AddBotButton/AddBotButton.tsx","../../src/components/CreateBotDialog/CreateBotDialog.tsx","../../src/pages/menu/Menu.tsx","../../src/pages/simplyfied-language/Simply.tsx","../../src/components/BotsettingsDrawer/BotsettingsDrawer.tsx","../../src/pages/bot/Bot.tsx","../../src/index.tsx"],"sourcesContent":["import i18n from \"i18next\";\r\nimport { initReactI18next } from \"react-i18next\";\r\n\r\ni18n\r\n    // pass the i18n instance to react-i18next.\r\n    .use(initReactI18next)\r\n    // init i18next\r\n    // for all options read: https://www.i18next.com/overview/configuration-options\r\n    .init({\r\n        debug: true,\r\n        fallbackLng: \"Deutsch\",\r\n        interpolation: {\r\n            escapeValue: false // not needed for react as it escapes by default\r\n        },\r\n        resources: {\r\n            Deutsch: {\r\n                translation: {\r\n                    header: {\r\n                        sum: \"Zusammenfassen\",\r\n                        chat: \"Chat\",\r\n                        brainstorm: \"Brainstorming\",\r\n                        simply: \"Einfache Sprache\",\r\n                        nutzungsbedingungen: \"Nutzungsbedingungen\",\r\n                        create_bot: \"Assistent erstellen\"\r\n                    },\r\n                    menu: {\r\n                        own_bots: \"Eigene Assistenten\",\r\n                        community_bots: \"Community Assistenten\",\r\n                        no_bots: \"Keine Assistenten gefunden\",\r\n                        soon: \"In Entwicklung...\"\r\n                    },\r\n                    chat: {\r\n                        header: \"Stelle eine Frage oder probiere ein Beispiel\",\r\n                        prompt: \"Stelle eine Frage\",\r\n                        answer_loading: \"Erstelle Antwort\",\r\n                        quickprompts: {\r\n                            shorter_tooltip: \"Schreibe eine kürzere Antwort\",\r\n                            longer_tooltip: \"Schreibe eine längere Antwort\",\r\n                            formal_tooltip: \"Schreibe eine förmlichere Antwort\",\r\n                            informal_tooltip: \"Schreibe eine informellere Antwort\",\r\n                            shorter: \"➖ Kürzer\",\r\n                            longer: \"➕ Länger\",\r\n                            formal: \"👔 Förmlicher\",\r\n                            informal: \"👕 Informeller\",\r\n                            shorter_prompt:\r\n                                \"Formuliere deine letzte Nachricht zu einem neuen kürzeren Text, der den ursprünglichen Inhalt in einer kürzeren und prägnanteren Form wiedergibt. Dieser Text sollte die wichtigsten Informationen enthalten und das Verständnis des Lesers verbessern.\",\r\n                            longer_prompt:\r\n                                \"Formuliere deine letzte Nachricht zu einem neuen längeren Text, der den ursprünglichen Inhalt erweitert und mit mehr Details und Hintergrundinformationen versehen ist. Dieser Text sollte das Verständnis des Lesers vertiefen und eine umfassendere Perspektive auf das Thema bieten.\",\r\n                            formal_prompt:\r\n                                \"Formuliere deine letzte Nachricht zu einem neuen formellen Text, der den ursprünglichen Inhalt in einer akademischen Schreibweise präsentiert. Dieser Text sollte eine klare Struktur aufweisen, präzise und sachliche Ausdrucksweise verwenden und dem Leser ein professionelles Leseerlebnis bieten.\",\r\n                            informal_prompt:\r\n                                \"Formuliere deine letzte Nachricht zu einem neuen informelleren Text, der den ursprünglichen Inhalt in einer lockeren Schreibweise wiedergibt. Dieser Text soll dem Leser ein ungezwungenes Leseerlebnis bieten, indem er leicht verständliche Sprache und gegebenenfalls auch humorvolle Elemente verwendet.\"\r\n                        }\r\n                    },\r\n                    sum: {\r\n                        header: \"Lasse Text zusammenfassen oder probiere ein Beispiel\",\r\n                        prompt: \"Diesen Text zusammenfassen oder ein PDF per Drag und Drop hochladen\",\r\n                        rolelabel: \"Zusammenfassen für\",\r\n                        lengthlabel: \"in\",\r\n                        answer_loading: \"Fasse zusammen\",\r\n                        levelofdetail: \"Umfang\",\r\n                        short: \"Kurz\",\r\n                        medium: \"Mittel\",\r\n                        long: \"Lang\"\r\n                    },\r\n                    version: {\r\n                        header: \"Was gibt's Neues?\",\r\n                        added: \"Neu\",\r\n                        fixed: \"Fehler behoben\",\r\n                        changed: \"Änderungen\"\r\n                    },\r\n                    brainstorm: {\r\n                        header: \"Finde Ideen zu einem Thema oder probiere ein Beispiel\",\r\n                        prompt: \"Ideen zu diesem Thema finden\",\r\n                        answer_loading: \"Denke nach\"\r\n                    },\r\n                    simply: {\r\n                        header: \"Gib den zu übersetzenden Text ein oder probiere ein Beispiel\",\r\n                        prompt: \"Text zum Übersetzen eingeben\",\r\n                        answer_loading_plain: \"Übersetze in einfache Sprache\",\r\n                        plain: \"Einfach\",\r\n                        outputType: \"Ausgabesprache\",\r\n                        plain_description:\r\n                            \"Einfache Sprache ist eine vereinfachte Form der Standardsprache, die auf Komplexität verzichtet, um eine breitere Zielgruppe zu erreichen.\"\r\n                    },\r\n                    common: {\r\n                        clear_chat: \"Neuer Chat\",\r\n                        settings: \"Einstellungen\",\r\n                        close: \"Schließen\",\r\n                        messages: \"Nachrichten\",\r\n                        examples: \"Beispiele\"\r\n                    },\r\n                    create_bot: {\r\n                        title: \"Titel\",\r\n                        description: \"Beschreibung\",\r\n                        prompt: \"System-Prompt\",\r\n                        create: \"Erstellen\"\r\n                    },\r\n                    components: {\r\n                        roles: {\r\n                            student: \"Student*innen\",\r\n                            secondgrader: \"Grundschüler*innen\",\r\n                            retired: \"Rentner*innen\"\r\n                        },\r\n                        sumlength: {\r\n                            sentences: \"Zwei Sätze\",\r\n                            bullets: \"Fünf Stichpunkte\",\r\n                            quarter: \"1/4 der Länge\"\r\n                        },\r\n                        answererror: {\r\n                            retry: \"Wiederholen\"\r\n                        },\r\n                        answer: {\r\n                            regenerate: \"Antwort regenerieren\",\r\n                            copy: \"Antwort kopieren\",\r\n                            unformat: \"Unformatierte Antwort\"\r\n                        },\r\n                        mermaid: {\r\n                            download: \"Diagramm herunterladen\",\r\n                            render: \"Zeichne Diagramm...\",\r\n                            error: \"Das Diagramm kann leider nicht dargestellt werden, da es Fehler enthält.\"\r\n                        },\r\n                        mindmap: {\r\n                            download: \"Herunterladen\",\r\n                            reset: \"Ansicht zurücksetzen\",\r\n                            source: \"Datenansicht\",\r\n                            mindmap: \"Mindmap-Ansicht\"\r\n                        },\r\n                        sumanswer: {\r\n                            header: \"Einzigartige Aspekte/Entitäten:\",\r\n                            alternative: \"Zusammenfassung\",\r\n                            copy: \"Zusammenfassung kopieren\"\r\n                        },\r\n                        settingsdrawer: {\r\n                            settings_button: \"Einstellungen und Feedback\",\r\n                            feedback_button: \"Feedback/Fehler melden\",\r\n                            settings_button_close: \"Einstellungen und Feedback schließen\",\r\n                            settings: \"Einstellungen\",\r\n                            feedback: \"Feedback\",\r\n                            about: \"Über\",\r\n                            help: \"Hilfe\",\r\n                            snow: \"Schnee\",\r\n                            snow_checkbox: \"Aktiviert\",\r\n                            language: \"Sprache\",\r\n                            fontsize: \"Schriftgröße\",\r\n                            change_font: \"Schriftgröße anpassen\",\r\n                            theme: \"Design\",\r\n                            change_theme: \"Design wechseln\",\r\n                            theme_light: \"Hell\",\r\n                            theme_dark: \"Dunkel\",\r\n                            llm: \"Sprachmodell\"\r\n                        },\r\n                        questioninput: {\r\n                            tokensused: \"Token verbraucht\",\r\n                            limit: \". Ältere Eingaben werden bei der Generierung nicht berücksichtigt!\",\r\n                            errorhint: \"MUCGPT kann Fehler machen. Überprüfe wichtige Informationen.\"\r\n                        },\r\n                        suminput: {\r\n                            tokensused: \"Token verbraucht\",\r\n                            limit: \". Ältere Eingaben werden bei der Generierung nicht berücksichtigt!\",\r\n                            removedocument: \"Dokument löschen\"\r\n                        },\r\n                        chattsettingsdrawer: {\r\n                            temperature: \"Temperatur\",\r\n                            min_temperature: \"konservativ\",\r\n                            max_temperatur: \"kreativ\",\r\n                            temperature_article: \"Die\",\r\n                            temperature_info: `beeinflusst die \"Kreativität\" des Sprachmodells. Ein höherer Wert führt zu unvorhersehbareren Antworten (Wörter, die unwahrscheinlich gegenüber dem aktuellen Kontext sind, werden generiert), während ein niedrigerer Wert eher konservative und genauere Antworten erzeugt.`,\r\n                            max_lenght: \"Maximale Antwortlänge\",\r\n                            max_lenght_info: \"Wie viele Token dürfen maximal bei einer Antwort generiert werden.\",\r\n                            system_prompt_clear: \"System-Prompt löschen\",\r\n                            system_prompt: \"System-Prompt\",\r\n                            system_prompt_info:\r\n                                \"sind vordefinierte Abfragen oder Anweisungen, die dazu dienen, die Antworten von MUCGPT gezielter und kontrollierter zu gestalten. Dabei nimmt die KI oft eine bestimmte Rolle ein, antwortet in einem bestimmten Format oder beachtet andere Einschränkungen.\"\r\n                        },\r\n                        botsettingsdrawer: {\r\n                            delete: \"Assistent löschen\",\r\n                            edit: \"Assistent bearbeiten\",\r\n                            finish_edit: \"Bearbeitung abschließen\",\r\n                            show_configutations: \"Konfigurationen anzeigen\",\r\n                            close_configutations: \"Konfigurationen schließen\"\r\n                        },\r\n                        answericon: {\r\n                            label: \"MUCGPT Nachricht\"\r\n                        },\r\n                        usericon: {\r\n                            label: \"Deine Nachricht\"\r\n                        },\r\n                        example: {\r\n                            label: \"Beispiel\"\r\n                        },\r\n                        deleteMessage: {\r\n                            label: \"Nachricht zurückziehen\"\r\n                        },\r\n                        quickprompt: {\r\n                            name: \"Vorgeschlagene Antworten\"\r\n                        },\r\n                        history: {\r\n                            button: \"Gespeicherte Chats\",\r\n                            today: \"Heute\",\r\n                            yesterday: \"Gestern\",\r\n                            sevendays: \"Letzte 7 Tage\",\r\n                            older: \"Älter\",\r\n                            history: \"Historie\",\r\n                            newchat: \"Gib dem Chat einen neuen Namen:\",\r\n                            options: \"Chat-Optionen\",\r\n                            close: \"Schließen\",\r\n                            lastEdited: \"Zuletzt geändert:\",\r\n                            rename: \"Chat umbenennen\",\r\n                            delete: \"Chat löschen\",\r\n                            favourites: \"Favoriten\",\r\n                            save: \"Zu Favoriten hinzufügen\",\r\n                            unsave: \"Aus Favoriten entfernen\",\r\n                            error: \"Wechsle nicht den Tab, bevor die Antwort fertig generiert wurde!\",\r\n                            saved_in_browser: \"Im Browser gespeicherte Chats\"\r\n                        },\r\n                        add_bot_button: {\r\n                            add_bot: \"Erstelle deinen eigenen Assistenten\"\r\n                        },\r\n                        create_bot_dialog: {\r\n                            what_function: \"Was soll dein Assistent können?\",\r\n                            generating_prompt: \"Generiere Prompt...\",\r\n                            dismiss: \"Abbrechen\",\r\n                            create: \"Erstellen\",\r\n                            prompt_title_desc: \"Vorgeschlagener System-Prompt, Titel und Beschreibung:\",\r\n                            back: \"Zurück\",\r\n                            save: \"Speichern\",\r\n                            describe: \"Beschreibe die Funktion...\",\r\n                            skip: \"Überspringen\"\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            Englisch: {\r\n                translation: {\r\n                    header: {\r\n                        sum: \"Summarize\",\r\n                        chat: \"Chat\",\r\n                        brainstorm: \"Brainstorming\",\r\n                        simply: \"Simplyfied Language\",\r\n                        nutzungsbedingungen: \"Terms of use\",\r\n                        create_bot: \"Create assistant\"\r\n                    },\r\n                    menu: {\r\n                        own_bots: \"Own Assistants\",\r\n                        community_bots: \"Community Assistants\",\r\n                        no_bots: \"No Assistants found\",\r\n                        soon: \"In Development...\"\r\n                    },\r\n                    chat: {\r\n                        header: \"Ask a question or try an example\",\r\n                        prompt: \"Ask a question\",\r\n                        answer_loading: \"Generating answer\",\r\n                        quickprompts: {\r\n                            shorter_tooltip: \"Shorten your answer\",\r\n                            longer_tooltip: \"Write a longer response\",\r\n                            formal_tooltip: \"Write your answer more formal\",\r\n                            informal_tooltip: \"Write your answer more informal\",\r\n                            shorter: \"➖ less detail\",\r\n                            longer: \"➕  more detail\",\r\n                            formal: \"👕 more formal\",\r\n                            informal: \"more informal\",\r\n                            shorter_prompt:\r\n                                \"Rewrite your last message into a new, shorter text that conveys the original content in a more concise and impactful way. This text should include the most important information and improve the reader's understanding.\",\r\n                            longer_prompt:\r\n                                \"Rewrite your last message into a new, longer text that expands upon the original content with more details and background information. This text should deepen the reader's understanding and provide a more comprehensive perspective on the topic.\",\r\n                            formal_prompt:\r\n                                \"Rewrite your last message into a new formal text that presents the original content in an academic writing style. This text should have a clear structure, use precise and factual language, and provide the reader with a professional reading experience.\",\r\n                            informal_prompt:\r\n                                \"Rewrite your last message into a new, more informal text that conveys the original content in a casual writing style. This text should provide the reader with a relaxed reading experience by using easily understandable language and, if appropriate, incorporating humorous elements.\"\r\n                        }\r\n                    },\r\n                    sum: {\r\n                        header: \"Summarize text or try an example\",\r\n                        prompt: \"Summarize this text or upload a PDF by using drag and drop\",\r\n                        rolelabel: \"Summarize for\",\r\n                        lengthlabel: \"in\",\r\n                        answer_loading: \"Summarize\",\r\n                        levelofdetail: \"Scope\",\r\n                        short: \"Short\",\r\n                        medium: \"Medium\",\r\n                        long: \"Long\"\r\n                    },\r\n                    version: {\r\n                        header: \"Whats new?\",\r\n                        added: \"Added\",\r\n                        fixed: \"Fixed\",\r\n                        changed: \"Changed\"\r\n                    },\r\n                    brainstorm: {\r\n                        header: \"Find ideas for a topic or try an example\",\r\n                        prompt: \"Find ideas for this topics\",\r\n                        answer_loading: \"Thinking\"\r\n                    },\r\n                    simply: {\r\n                        header: \"Enter the text to be translated or try an example\",\r\n                        prompt: \"Enter text to translate\",\r\n                        answer_loading_plain: \"Translating to plain language\",\r\n                        plain: \"Plain\",\r\n                        outputType: \"Output Language\",\r\n                        plain_description: \"Plain language is a simplified form of standard language that avoids complexity to reach a broader audience.\"\r\n                    },\r\n                    common: {\r\n                        clear_chat: \"New chat\",\r\n                        settings: \"Settings\",\r\n                        close: \"Close\",\r\n                        messages: \"Messages\",\r\n                        examples: \"Examples\"\r\n                    },\r\n                    create_bot: {\r\n                        title: \"Title\",\r\n                        description: \"Description\",\r\n                        prompt: \"System prompt\",\r\n                        create: \"Create\"\r\n                    },\r\n                    components: {\r\n                        roles: {\r\n                            student: \"University Students\",\r\n                            secondgrader: \"Second-Graders\",\r\n                            retired: \"Pensioners\"\r\n                        },\r\n                        sumlength: {\r\n                            sentences: \"Two sentences\",\r\n                            bullets: \"Five bullet points\",\r\n                            quarter: \"1/4 of the length\"\r\n                        },\r\n                        answererror: {\r\n                            retry: \"Retry\"\r\n                        },\r\n                        answer: {\r\n                            regenerate: \"Regenerate response\",\r\n                            copy: \"Copy response\",\r\n                            unformat: \"Unformatted response\"\r\n                        },\r\n                        mindmap: {\r\n                            download: \"Download\",\r\n                            reset: \"Reset view\",\r\n                            source: \"Source view\",\r\n                            mindmap: \"Mindmap view\"\r\n                        },\r\n                        mermaid: {\r\n                            download: \"Download diagram\",\r\n                            render: \"Draw diagram...\",\r\n                            error: \"Unfortunately, the diagram cannot be displayed as it contains errors.\"\r\n                        },\r\n                        sumanswer: {\r\n                            header: \"Unique entities/aspects:\",\r\n                            alternative: \"Summary \",\r\n                            copy: \"Copy summary\"\r\n                        },\r\n                        settingsdrawer: {\r\n                            settings_button: \"Settings and feedback\",\r\n                            feedback_button: \"Report Feedback/Fehler\",\r\n                            settings_button_close: \"Close settings and feedback\",\r\n                            settings: \"Settings\",\r\n                            feedback: \"Feedback\",\r\n                            about: \"About\",\r\n                            help: \"Help\",\r\n                            snow: \"Snow\",\r\n                            snow_checkbox: \"Enabled\",\r\n                            language: \"Language\",\r\n                            fontsize: \"Font size\",\r\n                            change_font: \"Adjust font size\",\r\n                            theme: \"Theme\",\r\n                            change_theme: \"Switch theme\",\r\n                            theme_light: \"Light\",\r\n                            theme_dark: \"Dark\",\r\n                            llm: \"language model\"\r\n                        },\r\n                        questioninput: {\r\n                            tokensused: \"Token used\",\r\n                            limit: \". Previous inputs are not considered during generation!\",\r\n                            errorhint: \"MUCGPT can make errors. Verify important information.\"\r\n                        },\r\n                        suminput: {\r\n                            tokensused: \"Token used\",\r\n                            limit: \". Previous inputs are not considered during generation!\",\r\n                            removedocument: \"Delete document\"\r\n                        },\r\n                        chattsettingsdrawer: {\r\n                            temperature: \"Temperature\",\r\n                            min_temperature: \"conservative\",\r\n                            max_temperatur: \"creative\",\r\n                            temperature_article: \"The\",\r\n                            temperature_info: `controls  controls the “creativity” or randomness of the text generated by MUCGPT. A higher temperature (e.g., 0.7) results in more diverse and creative output, while a lower temperature (e.g., 0.2) makes the output more deterministic and focused.`,\r\n                            max_lenght: \"Maximum response length\",\r\n                            max_lenght_info: \"How many tokens (words) can be generated at most in a response.\",\r\n                            system_prompt_clear: \"Clear system prompt\",\r\n                            system_prompt: \"System prompt\",\r\n                            system_prompt_info:\r\n                                \"are predefined queries or instructions that serve to make the responses of MUCGPT more targeted and controlled. The AI often takes on a certain role, responds in a certain format, or observes other restrictions\"\r\n                        },\r\n                        botsettingsdrawer: {\r\n                            delete: \"Delete assistent\",\r\n                            edit: \"Edit Assistant\",\r\n                            finish_edit: \"Finish Edit\",\r\n                            show_configutations: \"Show configurations\",\r\n                            close_configutations: \"Close configurations\"\r\n                        },\r\n                        answericon: {\r\n                            label: \"MUCGPT message\"\r\n                        },\r\n                        usericon: {\r\n                            label: \"Your message\"\r\n                        },\r\n                        example: {\r\n                            label: \"Example\"\r\n                        },\r\n                        deleteMessage: {\r\n                            label: \"Retract message\"\r\n                        },\r\n                        quickprompt: {\r\n                            name: \"Recommended answers\"\r\n                        },\r\n                        history: {\r\n                            button: \"Saved Chats\",\r\n                            today: \"Today\",\r\n                            yesterday: \"Yesterday\",\r\n                            sevendays: \"Last 7 Days\",\r\n                            older: \"Older\",\r\n                            history: \"History\",\r\n                            newchat: \"Enter new name for the chat:\",\r\n                            options: \"Chat-Options\",\r\n                            close: \"Close\",\r\n                            lastEdited: \"Last edited: \",\r\n                            rename: \"Rename chat\",\r\n                            delete: \"Delete chat\",\r\n                            favourites: \"Favourites\",\r\n                            save: \"Add to Favourites\",\r\n                            unsave: \"Remove from Favourites\",\r\n                            error: \"Do not change the Tab before the Answer is fully generated!\",\r\n                            saved_in_browser: \"Chats saved in Browser\"\r\n                        },\r\n                        add_bot_button: {\r\n                            add_bot: \"Create your own assistent\"\r\n                        },\r\n                        create_bot_dialog: {\r\n                            what_function: \"What should your assistant be able to do?\",\r\n                            generating_prompt: \"Generating prompt...\",\r\n                            dismiss: \"Cancel\",\r\n                            create: \"Create\",\r\n                            prompt_title_desc: \"Suggested system prompt, title, and description:\",\r\n                            back: \"Back\",\r\n                            save: \"Save\",\r\n                            describe: \"Describe the function...\",\r\n                            skip: \"Skip\"\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            Bairisch: {\r\n                translation: {\r\n                    header: {\r\n                        sum: \"Zammfassn\",\r\n                        chat: \"Redn\",\r\n                        brainstorm: \"Gedanknschmarrn\",\r\n                        simply: \"Oafache Sproch\",\r\n                        nutzungsbedingungen: \"Gebrauchsvorschriftn\",\r\n                        create_bot: \"Assistenten erstoin\"\r\n                    },\r\n                    menu: {\r\n                        own_bots: \"Eigene Assitentn\",\r\n                        community_bots: \"Community Assistentn\",\r\n                        no_bots: \"Koane Assitentn gfundn\",\r\n                        soon: \"In Entwicklung...\"\r\n                    },\r\n                    chat: {\r\n                        header: \"Stelle a Froog oda probier a Beispui\",\r\n                        prompt: \"Stelle a Froog \",\r\n                        answer_loading: \"I bearbeit grad de Frog\",\r\n                        quickprompts: {\r\n                            shorter_tooltip: \"Schreib a kürzere Antwort\",\r\n                            longer_tooltip: \"Schreib a längere Antwort\",\r\n                            formal_tooltip: \"Schreib a förmlichere Antwort\",\r\n                            informal_tooltip: \"Schreib a informellere Antwort\",\r\n                            shorter: \"➖ Kürzer\",\r\n                            longer: \"➕ Länger\",\r\n                            formal: \"👔 Förmlicher\",\r\n                            informal: \"👕 Informeller\",\r\n                            shorter_prompt:\r\n                                \"Formulier dei letzte Nachricht zu am neuen kürzeren Text, der an ursprünglichen Inhalt in a kürzere und prägnantere Form wiedagibt. Der Text soidad die wichtigsten Informationen enthalten und as Verständnis des Lesers verbessern.\",\r\n                            longer_prompt:\r\n                                \"Formuliere dei letzte Nachricht zu am neuen längeren Text, der an ursprünglichen Inhalt erweitert und mit mehr Details und Hintergrundinformationen versehen is. Der Text soidad as Verständnis des Lesers vertiefen und a umfassendere Perspektive auf das Thema bieten.\",\r\n                            formal_prompt:\r\n                                \"Formuliere dei letzte Nachricht zu am neuen formellen Text, der an ursprünglichen Inhalt in na akademischen Schreibweise präsentiert. Der Text soidad a klare Struktur aufweisen, präzise und sachliche Ausdrucksweise benutzn und am Leser a professionelles Leseerlebnis bieten\",\r\n                            informal_prompt:\r\n                                \"Formuliere dei letzte Nachricht zu am neuen informelleren Text, der an ursprünglichen Inhalt in a lockeren Schreibweise wiedagibt. Dieser Text soi am Leser a ungezwungenes Leseerlebnis bieten, indem er leicht verständliche Sprache und gegebenenfalls auch humorvolle Elemente benutzt.\"\r\n                        }\r\n                    },\r\n                    sum: {\r\n                        header: \"Fassn Text zam oda probier a Beispui\",\r\n                        prompt: \"Diesn Text zammfassn oda a PDF per Drag und Drop hoachladn\",\r\n                        rolelabel: \"Zammfassn für\",\r\n                        lengthlabel: \"in\",\r\n                        answer_loading: \"Am zammfassn\",\r\n                        levelofdetail: \"Umfang\",\r\n                        short: \"Kurz\",\r\n                        medium: \"Mittel\",\r\n                        long: \"Lang\"\r\n                    },\r\n                    brainstorm: {\r\n                        header: \"Ideen zu dem Thema aufaspuin oda probier a Beispui\",\r\n                        prompt: \"Ideen zu dem Thema aufaspuin\",\r\n                        answer_loading: \"Denk na\"\r\n                    },\r\n                    simply: {\r\n                        header: \"Gib den zu übasetzenden Text ei oda probier a Beispiel\",\r\n                        prompt: \"Text zum übasetzen eigeben\",\r\n                        answer_loading_plain: \"Übersetze in oafache Sproch\",\r\n                        plain: \"Oafach\",\r\n                        outputType: \"Output Sproch\",\r\n                        plain_description:\r\n                            \"Oafache Sproch is a veroafachte Form der Standardsprache, die auf Komplexität verzichtet, um a breitare Zielgruppn zu erreichen.\"\r\n                    },\r\n                    common: {\r\n                        clear_chat: \"Neia Chat\",\r\n                        settings: \"Konfiguration\",\r\n                        close: \"Schließen\",\r\n                        messages: \"Nochrichten\",\r\n                        examples: \"Beispui\"\r\n                    },\r\n                    version: {\r\n                        header: \"Wos gibts neis?\",\r\n                        added: \"Nei\",\r\n                        fixed: \"Fehla beseitigt\",\r\n                        changed: \"Änderunga\"\r\n                    },\r\n                    create_bot: {\r\n                        title: \"Titel\",\r\n                        description: \"Beschreibung\",\r\n                        prompt: \"System Prompt\",\r\n                        create: \"Erstellen\"\r\n                    },\r\n                    components: {\r\n                        roles: {\r\n                            student: \"Studentn\",\r\n                            secondgrader: \"Grundschüla\",\r\n                            retired: \"Rentna\"\r\n                        },\r\n                        sumlength: {\r\n                            sentences: \"Zwoa Sätzen\",\r\n                            bullets: \"Fünf Stichpunkten\",\r\n                            quarter: \"Viertl vo da Läng\"\r\n                        },\r\n                        answererror: {\r\n                            retry: \"No amoi probiern\",\r\n                            copy: \"Antwort kopieren\",\r\n                            unformat: \"Unformatierte Antwort\"\r\n                        },\r\n                        answer: {\r\n                            regenerate: \"No amoi probiern\"\r\n                        },\r\n                        mindmap: {\r\n                            download: \"Obalada\",\r\n                            reset: \"Oisicht zrucksetzn\",\r\n                            source: \"Datenoisicht\",\r\n                            mindmap: \"Mindmapoisicht\"\r\n                        },\r\n                        mermaid: {\r\n                            download: \"Schau-Buidl obalada\",\r\n                            render: \"Zeichne Schau-Buidl...\",\r\n                            error: \"Des Schau-Buidl ko leiwa net duagstellt wern, wei's Fehla håd.\"\r\n                        },\r\n                        sumanswer: {\r\n                            header: \"Einzigartige Schwerpunkte:\",\r\n                            alternative: \"Zsammanfassung \",\r\n                            copy: \"Zsammanfassung kopiern\"\r\n                        },\r\n                        settingsdrawer: {\r\n                            settings_button: \"Eistellunga und Rückmeldung\",\r\n                            settings_button_close: \"Eistellunga und Rückmeldung zua macha\",\r\n                            feedback_button: \"Ruckmeldung/Fehla meldn\",\r\n                            settings: \"Eistellunga\",\r\n                            feedback: \"Rückmeldung\",\r\n                            about: \"Iba\",\r\n                            help: \"Hilf(e)\",\r\n                            snow: \"Schnee\",\r\n                            snow_checkbox: \"Freigeschaltet\",\r\n                            language: \"Sproch\",\r\n                            fontsize: \"Schriftgrößn\",\r\n                            change_font: \"Schriftgrößn o'passn\",\r\n                            theme: \"Design\",\r\n                            change_theme: \"Design wechseln\",\r\n                            theme_light: \"Hell\",\r\n                            theme_dark: \"Dunkel\",\r\n                            llm: \"Sprachmodell\"\r\n                        },\r\n                        questioninput: {\r\n                            tokensused: \"Token vabrocht\",\r\n                            limit: \". Oide Eingabn wean bei da Generierung ned mit einbezogn!\",\r\n                            errorhint: \"MUCGPT kann a Schmarrn macha. Schau oba wichtige Informationen stimma.\"\r\n                        },\r\n                        suminput: {\r\n                            tokensused: \"Token vabrocht\",\r\n                            limit: \". Oide Eingabn wean bei da Generierung ned mit einbezogn!\",\r\n                            removedocument: \"Dokument löschn\"\r\n                        },\r\n                        chattsettingsdrawer: {\r\n                            min_temperature: \"konservativ\",\r\n                            max_temperatur: \"kreativ\",\r\n                            temperature: \"Temperatur\",\r\n                            temperature_article: \"Da\",\r\n                            temperature_info: `\tbeinflusst de \"Kreativität\" vom Sprachmodel. A höherer Wert führt zu unvorhersehbareren Antworten (Wörter, de unwahrscheinliche geem de aktuelle Kontext san, werdn generiert), während a niedrigerer Wert eher konservative und genauere Antworten erzeugt.`,\r\n                            max_lenght: \"Maximale Antwortläng\",\r\n                            max_lenght_info: \"Wia vui Token dürfen maximal bei am Antwort generiert werdn.\",\r\n                            system_prompt_clear: \"System Prompt löschn\",\r\n                            system_prompt: \"System Prompt\",\r\n                            system_prompt_info:\r\n                                \"san vorgegebene Abfragen oder Anweisungen, de dazu dienen, de Antworten von MUCGPT zielgerichteter und kontrollierter zum doa. Dabei nimmt de KI oft a bestimmte Rolle ei, antwortet in am bestimmten Format oder beachtet andere Einschränkungen.\"\r\n                        },\r\n                        botsettingsdrawer: {\r\n                            delete: \"Assistent löschn\",\r\n                            edit: \"Assistent bearbeit'n\",\r\n                            finish_edit: \"Bearbeitung abschließ'n\",\r\n                            show_configutations: \"Konfigurationen anzeigen\",\r\n                            close_configutations: \"Konfigurationen schließen\"\r\n                        },\r\n                        answericon: {\r\n                            label: \"MUCGPT Nochricht\"\r\n                        },\r\n                        usericon: {\r\n                            label: \"Dei Nochricht\"\r\n                        },\r\n                        example: {\r\n                            label: \"Beispui\"\r\n                        },\r\n                        deleteMessage: {\r\n                            label: \"Nachricht zruckziang\"\r\n                        },\r\n                        quickprompt: {\r\n                            name: \"Vogschlagene Antworten\"\r\n                        },\r\n                        history: {\r\n                            button: \"Gespeichade Chats\",\r\n                            today: \"Heid\",\r\n                            yesterday: \"Gesdan\",\r\n                            sevendays: \"Letzte 7 Dog\",\r\n                            older: \"Oida\",\r\n                            history: \"Historie\",\r\n                            newchat: \"Gib dem Chat an nein Nama:\",\r\n                            options: \"Chat-Optionen\",\r\n                            close: \"Schließen\",\r\n                            lastEdited: \"Zuletzt geändert: \",\r\n                            rename: \"Chat Umbenenna\",\r\n                            delete: \"Chat Löschn\",\r\n                            favourites: \"Favoriten\",\r\n                            save: \"Zu Favoritn hinzufügn\",\r\n                            unsave: \"Vo Favoritn entfernen\",\r\n                            error: \"Wechsle de Seiten ned bevor ned de Nachricht komplett generiert wordn is!\",\r\n                            saved_in_browser: \"Im Browser gespeichade Chats\"\r\n                        },\r\n                        add_bot_button: {\r\n                            add_bot: \"Erstell dein eigenen Assistenten\"\r\n                        },\r\n                        create_bot_dialog: {\r\n                            what_function: \"Was soll dein Assistent können?\",\r\n                            generating_prompt: \"Prompt wird erstellt...\",\r\n                            dismiss: \"Abbrechen\",\r\n                            create: \"Erstellen\",\r\n                            prompt_title_desc: \"Vorgeschlagener System-Prompt, Titel und Beschreibung:\",\r\n                            back: \"Zruck\",\r\n                            save: \"Speichern\",\r\n                            describe: \"Beschreib die Funktion...\",\r\n                            skip: \"Übaspringa\"\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            French: {\r\n                translation: {\r\n                    header: {\r\n                        sum: \"Résumer\",\r\n                        chat: \"Chat\",\r\n                        brainstorm: \"Brainstorming\",\r\n                        simply: \"Langage facile\",\r\n                        nutzungsbedingungen: \"Conditions d'utilisation\"\r\n                    },\r\n                    menu: {\r\n                        own_bots: \"Assistants Personnels\",\r\n                        community_bots: \"Assistants Communautaires\",\r\n                        no_bots: \"Aucun Assistant trouvé\",\r\n                        soon: \"En Développement...\"\r\n                    },\r\n                    chat: {\r\n                        header: \"Posez une question ou essayez un exemple\",\r\n                        prompt: \"Posez une question\",\r\n                        answer_loading: \"Créer une réponse\",\r\n                        quickprompts: {\r\n                            shorter_tooltip: \"Écrire une réponse plus courte\",\r\n                            longer_tooltip: \"Écrire une réponse plus longue\",\r\n                            formal_tooltip: \"Écrire une réponse plus formelle\",\r\n                            informal_tooltip: \"Écrire une réponse plus informelle\",\r\n                            shorter: \"➖ Plus court\",\r\n                            longer: \"➕ Plus long\",\r\n                            formal: \"👔 Plus formel\",\r\n                            informal: \"👕 Plus informel\",\r\n                            shorter_prompt:\r\n                                \"Formulez votre dernier message en un nouveau texte plus court qui reflète le contenu original sous une forme plus courte et plus concise. Ce texte doit contenir les informations les plus importantes et améliorer la compréhension du lecteur.\",\r\n                            longer_prompt:\r\n                                \"Formulez votre dernier message en un nouveau texte plus long qui développe le contenu original et ajoute plus de détails et d'informations de contexte. Ce texte doit approfondir la compréhension du lecteur et offrir une perspective plus complète sur le sujet.\",\r\n                            formal_prompt:\r\n                                \"Formulez votre dernier message en un nouveau texte formel qui présente le contenu original dans un style académique. Ce texte doit avoir une structure claire, utiliser une expression précise et factuelle et offrir au lecteur une expérience de lecture professionnelle\",\r\n                            informal_prompt:\r\n                                \"Formulez votre dernier message en un nouveau texte plus informel qui reflète le contenu original dans un style plus décontracté. Ce texte doit offrir au lecteur une expérience de lecture détendue en utilisant un langage facile à comprendre et, le cas échéant, des éléments humoristiques.\"\r\n                        }\r\n                    },\r\n                    sum: {\r\n                        header: \"Faites résumer le texte ou essayez un exemple\",\r\n                        prompt: \"Résumer ce texte ou faites glisser un PDF ici\",\r\n                        rolelabel: \"Résumer pour\",\r\n                        lengthlabel: \"en\",\r\n                        answer_loading: \"Résumer\",\r\n                        levelofdetail: \"Portée\",\r\n                        short: \"Court\",\r\n                        medium: \"Moyen\",\r\n                        long: \"Long\"\r\n                    },\r\n                    version: {\r\n                        header: \"Quoi de neuf ?\",\r\n                        added: \"Nouveau\",\r\n                        fixed: \"Bugs corrigés\",\r\n                        changed: \"Changements\"\r\n                    },\r\n                    brainstorm: {\r\n                        header: \"Trouvez des idées sur un sujet ou essayez un exemple\",\r\n                        prompt: \"Trouver des idées sur ce sujet\",\r\n                        answer_loading: \"Réfléchir\"\r\n                    },\r\n                    simply: {\r\n                        header: \"Entrez le texte à traduire ou essayez un exemple\",\r\n                        prompt: \"Entrez le texte à traduire\",\r\n                        answer_loading_plain: \"Traduction en langage simple\",\r\n                        plain: \"Simple\",\r\n                        outputType: \"Langue de sortie\",\r\n                        plain_description:\r\n                            \"Le langage simple est une forme simplifiée de la langue standard, qui évite la complexité pour atteindre un public plus large.\"\r\n                    },\r\n                    common: {\r\n                        clear_chat: \"Nouveau chat\",\r\n                        settings: \"Paramètres\",\r\n                        close: \"Fermer\",\r\n                        messages: \"Messages\",\r\n                        examples: \"Exemples\"\r\n                    },\r\n                    components: {\r\n                        roles: {\r\n                            student: \"Étudiant·e·s\",\r\n                            secondgrader: \"Élèves de primaire\",\r\n                            retired: \"Retraité·e·s\"\r\n                        },\r\n                        sumlength: {\r\n                            sentences: \"Deux phrases\",\r\n                            bullets: \"Cinq points\",\r\n                            quarter: \"1/4 de la longueur\"\r\n                        },\r\n                        answererror: {\r\n                            retry: \"Réessayer\"\r\n                        },\r\n                        answer: {\r\n                            regenerate: \"Regénérer la réponse\",\r\n                            copy: \"Copier la réponse\",\r\n                            unformat: \"Réponse non formatée\"\r\n                        },\r\n                        mermaid: {\r\n                            download: \"Télécharger le diagramme\",\r\n                            render: \"Dessiner le diagramme...\",\r\n                            error: \"Le diagramme ne peut malheureusement pas être affiché en raison d'erreurs.\"\r\n                        },\r\n                        mindmap: {\r\n                            download: \"Télécharger\",\r\n                            reset: \"Réinitialiser la vue\",\r\n                            source: \"Vue des données\",\r\n                            mindmap: \"Vue de la carte mentale\"\r\n                        },\r\n                        sumanswer: {\r\n                            header: \"Aspects/entités uniques :\",\r\n                            alternative: \"Résumé\",\r\n                            copy: \"Copier le résumé\"\r\n                        },\r\n                        settingsdrawer: {\r\n                            settings_button: \"Paramètres et feedback\",\r\n                            feedback_button: \"Retour/Signalement de bug\",\r\n                            settings_button_close: \"Fermer les paramètres et le feedback\",\r\n                            settings: \"Paramètres\",\r\n                            feedback: \"Feedback\",\r\n                            about: \"À propos\",\r\n                            help: \"Aide\",\r\n                            snow: \"Neige\",\r\n                            snow_checkbox: \"Activé\",\r\n                            language: \"Langue\",\r\n                            fontsize: \"Taille de police\",\r\n                            change_font: \"Ajuster la taille de police\",\r\n                            theme: \"Thème\",\r\n                            change_theme: \"Changer de thème\",\r\n                            theme_light: \"Clair\",\r\n                            theme_dark: \"Sombre\",\r\n                            llm: \"Modèle de langage\"\r\n                        },\r\n                        questioninput: {\r\n                            tokensused: \"Tokens utilisés\",\r\n                            limit: \". Les entrées plus anciennes ne seront pas prises en compte lors de la génération !\",\r\n                            errorhint: \"MUCGPT peut faire des erreurs. Vérifiez les informations importantes.\"\r\n                        },\r\n                        suminput: {\r\n                            tokensused: \"Tokens utilisés\",\r\n                            limit: \". Les entrées plus anciennes ne seront pas prises en compte lors de la génération !\",\r\n                            removedocument: \"Supprimer le document\"\r\n                        },\r\n                        chattsettingsdrawer: {\r\n                            temperature: \"Température\",\r\n                            min_temperature: \"conservatrice\",\r\n                            max_temperatur: \"créative\",\r\n                            temperature_article: \"La\",\r\n                            temperature_info: `influence la \"créativité\" du modèle de langage. Une valeur plus élevée produit des réponses moins prévisibles (des mots improbables par rapport au contexte actuel sont générés), tandis qu'une valeur plus basse produit des réponses plus conservatrices et précises.`,\r\n                            max_lenght: \"Longueur maximale de la réponse\",\r\n                            max_lenght_info: \"Nombre maximal de tokens pouvant être générés pour une réponse.\",\r\n                            system_prompt_clear: \"Effacer le Prompt système\",\r\n                            system_prompt: \"Prompt système\",\r\n                            system_prompt_info:\r\n                                \"sont des requêtes ou des instructions prédéfinies destinées à rendre les réponses de MUCGPT plus ciblées et contrôlées. L'IA prend souvent un rôle spécifique, répond dans un format particulier ou respecte d'autres contraintes.\"\r\n                        },\r\n                        botsettingsdrawer: {\r\n                            delete: \"Supprimer l'assistant\",\r\n                            edit: \"Modifier l'assistant\",\r\n                            finish_edit: \"Terminer la modification\",\r\n                            show_configutations: \"Afficher les configurations\",\r\n                            close_configutations: \"Fermer les configurations\"\r\n                        },\r\n                        answericon: {\r\n                            label: \"Message de MUCGPT\"\r\n                        },\r\n                        usericon: {\r\n                            label: \"Votre message\"\r\n                        },\r\n                        example: {\r\n                            label: \"Exemple\"\r\n                        },\r\n                        deleteMessage: {\r\n                            label: \"Retirer le message\"\r\n                        },\r\n                        quickprompt: {\r\n                            name: \"Réponses suggérées\"\r\n                        },\r\n                        history: {\r\n                            button: \"Chats sauvegardés\",\r\n                            today: \"Aujourd'hui\",\r\n                            yesterday: \"Hier\",\r\n                            sevendays: \"7 derniers jours\",\r\n                            older: \"Plus ancien\",\r\n                            history: \"Historique\",\r\n                            newchat: \"Donnez un nouveau nom au chat :\",\r\n                            options: \"Options de chat\",\r\n                            close: \"Fermer\",\r\n                            lastEdited: \"Dernière modification : \",\r\n                            rename: \"Renommer le chat\",\r\n                            delete: \"Supprimer le chat\",\r\n                            favourites: \"Favoris\",\r\n                            save: \"Ajouter aux favoris\",\r\n                            unsave: \"Retirer des favoris\",\r\n                            error: \"Ne changez pas d'onglet avant que la réponse soit générée !\",\r\n                            saved_in_browser: \"Chats sauvegardés dans le navigateur\"\r\n                        },\r\n                        add_bot_button: {\r\n                            add_bot: \"Crée ton propre assistant\"\r\n                        },\r\n                        create_bot_dialog: {\r\n                            what_function: \"Que doit pouvoir faire votre assistant?\",\r\n                            generating_prompt: \"Génération du prompt...\",\r\n                            dismiss: \"Annuler\",\r\n                            create: \"Créer\",\r\n                            prompt_title_desc: \"Prompt système proposé, titre et description :\",\r\n                            back: \"Retour\",\r\n                            save: \"Enregistrer\",\r\n                            describe: \"Décrivez la fonction...\",\r\n                            skip: \"Passer\"\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            Ukrainisch: {\r\n                translation: {\r\n                    header: {\r\n                        sum: \"Резюме\",\r\n                        chat: \"Чат\",\r\n                        brainstorm: \"Брейнштурм\",\r\n                        simply: \"Проста мова\",\r\n                        nutzungsbedingungen: \"Умови використання\"\r\n                    },\r\n                    menu: {\r\n                        own_bots: \"Власні Асистенти\",\r\n                        community_bots: \"Громадські Асистенти\",\r\n                        no_bots: \"Асистентів не знайдено\",\r\n                        soon: \"В розробці...\"\r\n                    },\r\n                    chat: {\r\n                        header: \"Задайте питання або спробуйте приклад\",\r\n                        prompt: \"Задайте питання\",\r\n                        answer_loading: \"Створення відповіді\",\r\n                        quickprompts: {\r\n                            shorter_tooltip: \"Написати коротшу відповідь\",\r\n                            longer_tooltip: \"Написати довшу відповідь\",\r\n                            formal_tooltip: \"Написати офіційнішу відповідь\",\r\n                            informal_tooltip: \"Написати неофіційнішу відповідь\",\r\n                            shorter: \"➖ Коротше\",\r\n                            longer: \"➕ Довше\",\r\n                            formal: \"👔 Офіційніше\",\r\n                            informal: \"👕 Неофіційніше\",\r\n                            shorter_prompt:\r\n                                \"Сформулюйте ваше останнє повідомлення в новий коротший текст, який відображає оригінальний зміст у скороченому та стислому вигляді. Цей текст має містити найважливішу інформацію та покращити розуміння читача.\",\r\n                            longer_prompt:\r\n                                \"Сформулюйте ваше останнє повідомлення в новий довший текст, який розширює оригінальний зміст та додає більше деталей і контекстної інформації. Цей текст має поглибити розуміння читача та надати більш всебічний погляд на тему.\",\r\n                            formal_prompt:\r\n                                \"Сформулюйте ваше останнє повідомлення в новий офіційний текст, який представляє оригінальний зміст у академічному стилі. Цей текст має мати чітку структуру, використовувати точну та фактичну мову та надавати читачеві професійний досвід читання\",\r\n                            informal_prompt:\r\n                                \"Сформулюйте ваше останнє повідомлення в новий неофіційний текст, який відображає оригінальний зміст у невимушеному стилі. Цей текст має надавати читачеві розслаблений досвід читання за допомогою легкої та зрозумілої мови та, можливо, гумористичних елементів.\"\r\n                        }\r\n                    },\r\n                    sum: {\r\n                        header: \"Зробіть резюме тексту або спробуйте приклад\",\r\n                        prompt: \"Резюме цього тексту або завантажте PDF перетягуванням\",\r\n                        rolelabel: \"Резюме для\",\r\n                        lengthlabel: \"в\",\r\n                        answer_loading: \"Резюме\",\r\n                        levelofdetail: \"Обсяг\",\r\n                        short: \"Короткий\",\r\n                        medium: \"Середній\",\r\n                        long: \"Довгий\"\r\n                    },\r\n                    version: {\r\n                        header: \"Що нового?\",\r\n                        added: \"Нове\",\r\n                        fixed: \"Виправлено помилки\",\r\n                        changed: \"Зміни\"\r\n                    },\r\n                    brainstorm: {\r\n                        header: \"Знайдіть ідеї за темою або спробуйте приклад\",\r\n                        prompt: \"Знайти ідеї за цією темою\",\r\n                        answer_loading: \"Думаю\"\r\n                    },\r\n                    simply: {\r\n                        header: \"Введіть текст для перекладу або спробуйте приклад\",\r\n                        prompt: \"Введіть текст для перекладу\",\r\n                        answer_loading_plain: \"Переклад на зрозумілу мову\",\r\n                        plain: \"Проста\",\r\n                        outputType: \"Вихідна мова\",\r\n                        plain_description: \"Проста мова - це спрощена форма стандартної мови, яка уникає складності для охоплення ширшої аудиторії.\"\r\n                    },\r\n                    common: {\r\n                        clear_chat: \"Новий чат\",\r\n                        settings: \"Налаштування\",\r\n                        close: \"Закрити\",\r\n                        messages: \"Повідомлення\",\r\n                        examples: \"Приклади\"\r\n                    },\r\n                    components: {\r\n                        roles: {\r\n                            student: \"Студент(к)и\",\r\n                            secondgrader: \"Учні початкової школи\",\r\n                            retired: \"Пенсіонери\"\r\n                        },\r\n                        sumlength: {\r\n                            sentences: \"Два речення\",\r\n                            bullets: \"П'ять пунктів\",\r\n                            quarter: \"1/4 довжини\"\r\n                        },\r\n                        answererror: {\r\n                            retry: \"Спробувати знову\"\r\n                        },\r\n                        answer: {\r\n                            regenerate: \"Регенерувати відповідь\",\r\n                            copy: \"Копіювати відповідь\",\r\n                            unformat: \"Неформатована відповідь\"\r\n                        },\r\n                        mermaid: {\r\n                            download: \"Завантажити діаграму\",\r\n                            render: \"Малювати діаграму...\",\r\n                            error: \"На жаль, діаграму не можна відобразити через помилки.\"\r\n                        },\r\n                        mindmap: {\r\n                            download: \"Завантажити\",\r\n                            reset: \"Скинути вигляд\",\r\n                            source: \"Вигляд даних\",\r\n                            mindmap: \"Вигляд інтелектуальної карти\"\r\n                        },\r\n                        sumanswer: {\r\n                            header: \"Унікальні аспекти/сутності:\",\r\n                            alternative: \"Резюме\",\r\n                            copy: \"Копіювати резюме\"\r\n                        },\r\n                        settingsdrawer: {\r\n                            settings_button: \"Налаштування та зворотний зв'язок\",\r\n                            feedback_button: \"Зворотній зв'язок/Повідомити про помилку\",\r\n                            settings_button_close: \"Закрити налаштування та зворотний зв'язок\",\r\n                            settings: \"Налаштування\",\r\n                            feedback: \"Зворотний зв'язок\",\r\n                            about: \"Про нас\",\r\n                            help: \"Допомога\",\r\n                            snow: \"Сніг\",\r\n                            snow_checkbox: \"Активувати\",\r\n                            language: \"Мова\",\r\n                            fontsize: \"Розмір шрифту\",\r\n                            change_font: \"Налаштувати розмір шрифту\",\r\n                            theme: \"Тема\",\r\n                            change_theme: \"Змінити тему\",\r\n                            theme_light: \"Світла\",\r\n                            theme_dark: \"Темна\",\r\n                            llm: \"Мовна модель\"\r\n                        },\r\n                        questioninput: {\r\n                            tokensused: \"Використано токени\",\r\n                            limit: \". Старіші введення не будуть враховані при генерації!\",\r\n                            errorhint: \"MUCGPT може помилятися. Перевірте важливу інформацію.\"\r\n                        },\r\n                        suminput: {\r\n                            tokensused: \"Використано токени\",\r\n                            limit: \". Старіші введення не будуть враховані при генерації!\",\r\n                            removedocument: \"Видалити документ\"\r\n                        },\r\n                        chattsettingsdrawer: {\r\n                            temperature: \"Температура\",\r\n                            min_temperature: \"консервативна\",\r\n                            max_temperatur: \"креативна\",\r\n                            temperature_article: \"Температура\",\r\n                            temperature_info: `впливає на \"креативність\" мовної моделі. Вища вартість призводить до менш передбачуваних відповідей (неймовірні слова порівняно з поточним контекстом генеруються), тоді як нижча вартість створює більш консервативні та точні відповіді.`,\r\n                            max_lenght: \"Максимальна довжина відповіді\",\r\n                            max_lenght_info: \"Яка кількість токенів може бути згенерована при відповіді.\",\r\n                            system_prompt_clear: \"Очистити системний запит\",\r\n                            system_prompt: \"Системний запит\",\r\n                            system_prompt_info:\r\n                                \"це передвизначені запити або вказівки, які спрямовані на точне та контрольоване створення відповідей від MUCGPT. ШІ часто бере на себе певну роль, відповідає в певному форматі або дотримується інших обмежень.\"\r\n                        },\r\n                        botsettingsdrawer: {\r\n                            delete: \"Видалити асистента\",\r\n                            edit: \"Редагувати асистента\",\r\n                            finish_edit: \"Завершити редагування\",\r\n                            show_configutations: \"Показати конфігурації\",\r\n                            close_configutations: \"Закрити конфігурації\"\r\n                        },\r\n                        answericon: {\r\n                            label: \"Повідомлення MUCGPT\"\r\n                        },\r\n                        usericon: {\r\n                            label: \"Ваше повідомлення\"\r\n                        },\r\n                        example: {\r\n                            label: \"Приклад\"\r\n                        },\r\n                        deleteMessage: {\r\n                            label: \"Видалити повідомлення\"\r\n                        },\r\n                        quickprompt: {\r\n                            name: \"Рекомендовані відповіді\"\r\n                        },\r\n                        history: {\r\n                            button: \"Збережені чати\",\r\n                            today: \"Сьогодні\",\r\n                            yesterday: \"Вчора\",\r\n                            sevendays: \"Останні 7 днів\",\r\n                            older: \"Старіше\",\r\n                            history: \"Історія\",\r\n                            newchat: \"Дайте нову назву чату:\",\r\n                            options: \"Опції чату\",\r\n                            close: \"Закрити\",\r\n                            lastEdited: \"Останній раз редагувалося: \",\r\n                            rename: \"Перейменувати чат\",\r\n                            delete: \"Видалити чат\",\r\n                            favourites: \"Обране\",\r\n                            save: \"Додати до обраного\",\r\n                            unsave: \"Видалити з обраного\",\r\n                            error: \"Не переходьте на іншу вкладку, доки відповідь не буде згенерована!\",\r\n                            saved_in_browser: \"Чати, збережені в браузері\"\r\n                        },\r\n                        add_bot_button: {\r\n                            add_bot: \"Створи свого власного асистента\"\r\n                        },\r\n                        create_bot_dialog: {\r\n                            what_function: \"Що має вміти ваш асистент?\",\r\n                            generating_prompt: \"Генерація запиту...\",\r\n                            dismiss: \"Скасувати\",\r\n                            create: \"Створити\",\r\n                            prompt_title_desc: \"Пропонований системний запит, заголовок та опис:\",\r\n                            back: \"Назад\",\r\n                            save: \"Зберегти\",\r\n                            describe: \"Опишіть функцію...\",\r\n                            skip: \"Пропустити\"\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\nexport default i18n;\r\n","export default \"__VITE_ASSET__n75rXlEC__\"","export default \"__VITE_ASSET__BokanKWz__\"","export default \"__VITE_ASSET__DT_uu2qQ__\"","// Context.js\r\nimport React, { Dispatch, SetStateAction, useState } from \"react\";\r\n\r\ninterface ILanguageProvider {\r\n    language: string;\r\n    setLanguage: Dispatch<SetStateAction<string>>;\r\n}\r\n\r\nexport const DEFAULTLANG = \"Deutsch\";\r\nexport const LanguageContext = React.createContext<ILanguageProvider>({ language: DEFAULTLANG, setLanguage: () => {} });\r\n\r\nexport const LanguageContextProvider = (props: React.PropsWithChildren<{}>) => {\r\n    const [language, setLanguage] = useState<string>(DEFAULTLANG);\r\n\r\n    return <LanguageContext.Provider value={{ language, setLanguage }}>{props.children}</LanguageContext.Provider>;\r\n};\r\n","import { Dialog, DialogTrigger, DialogSurface, DialogTitle, DialogBody, DialogActions, DialogContent, Button, Link } from \"@fluentui/react-components\";\r\nimport { Checkmark24Filled } from \"@fluentui/react-icons\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport styles from \"./TermsOfUseDialog.module.css\";\r\n\r\ninterface Props {\r\n    defaultOpen: boolean;\r\n    onAccept: () => void;\r\n}\r\n\r\nexport const TermsOfUseDialog = ({ defaultOpen, onAccept }: Props) => {\r\n    const { t } = useTranslation();\r\n    return (\r\n        <div>\r\n            <Dialog modalType=\"alert\" defaultOpen={defaultOpen}>\r\n                <DialogTrigger disableButtonEnhancement>\r\n                    <Button appearance=\"primary\">{t(\"header.nutzungsbedingungen\")}</Button>\r\n                </DialogTrigger>\r\n                <DialogSurface className={styles.dialog}>\r\n                    <DialogBody className={styles.dialogContent}>\r\n                        <DialogTitle>Nutzungsbedingungen (Zustimmung erforderlich)</DialogTitle>\r\n                        <DialogContent>\r\n                            <ul>\r\n                                <li>\r\n                                    <strong>Zielgruppe:</strong> MUCGPT darf von allen städtischen Mitarbeiter*innen und von allen Personen mit einem\r\n                                    München-Account (muenchen.de Email-Adresse) verwendet werden.\r\n                                </li>\r\n                                <li>\r\n                                    <strong>Erlaubte Nutzung:</strong> MUCGPT darf nur im dienstlichen Kontext genutzt werden. Die Nutzung vergleichbarer\r\n                                    kommerzieller KI-Produkte (z.B. ChatGPT, Google Bard etc.) ist nicht erlaubt.{\" \"}\r\n                                </li>\r\n                                <li>\r\n                                    <strong>Informationssicherheit und Datenschutz</strong> Bei der Nutzung von MUCGPT dürfen keine personenbezogenen Daten\r\n                                    (z.B. Name, Anschrift, E-Mail-Adressen etc.) oder als vertraulich klassifizierte Daten (siehe{\" \"}\r\n                                    <Link\r\n                                        inline\r\n                                        href=\"https://wilma.muenchen.de/pages/informationssicherheit/apps/wiki/regelwerk-aktuell/list/view/0b6737b2-9712-4fba-9fd3-a86f9daf98c5\"\r\n                                    >\r\n                                        Regelwerk Informationssicherheit\r\n                                    </Link>\r\n                                    ) eingegeben werden.\r\n                                </li>\r\n                                <li>\r\n                                    <strong>Überprüfung der Ergebnisse</strong> Die generierten Informationen bzw. Ergebnisse müssen stets auf inhaltliche\r\n                                    Richtigkeit, Angemessenheit und Aktualität überprüft und bei Bedarf angepasst werden. Es kann vorkommen, dass aufgrund einer\r\n                                    älteren Datenbasis, MUCGPT veraltete Ergebnisse liefert. Für die inhaltliche Richtigkeit ist immer der MUCGPT-Nutzende\r\n                                    verantwortlich.\r\n                                </li>\r\n                                <li>\r\n                                    <strong>Weiterverwendung der Ergebnisse:</strong> Die Verantwortung für die Weiterverwendung der Ergebnisse trägt die/der\r\n                                    MUCGPT Nutzer*in. Die Ergebnisse müssen als solche sowohl für intern, als auch für extern gekennzeichnet (z.B.: „Quelle:\r\n                                    MUCGPT“) werden. Siehe Details und weitere Zitierstile hierzu in den{\" \"}\r\n                                    <Link inline href=\"/#faq\">\r\n                                        FAQs\r\n                                    </Link>\r\n                                    .\r\n                                </li>\r\n                                <li>\r\n                                    <strong>Entscheidungsfindung:</strong> MUCGPT darf nicht für abschließende Entscheidungen verwendet werden, die gegenüber\r\n                                    Personen rechtliche Wirkung entfalten oder sie in ähnlicher Weise erheblich beeinträchtigen (Art. 22 Abs. 1 DSGVO).\r\n                                    Derartige Entscheidungen müssen stets von Menschen getroffen werden.\r\n                                </li>\r\n                                <li>\r\n                                    <strong>Nachhaltigkeit/GreenIT</strong> Bitte denken Sie daran, dass bei der Nutzung von MUCGPT jede Anfrage Rechenleistung\r\n                                    benötigt. Für Suchanfragen im Internet empfehlen wir eine Suchmaschine wie Ecosia/Google oder andere Suchmaschinen zu\r\n                                    verwenden.\r\n                                </li>\r\n                                <li>\r\n                                    <strong>Ansprechpartner*innen:</strong> Bei Fragen und Feedback, sowie zum Melden von unangemessenen Ergebnissen von MUCGPT\r\n                                    bitte an{\" \"}\r\n                                    <Link inline href=\"mailto:itm.kicc@muenchen.de?subject=MUCGPT\">\r\n                                        {\" \"}\r\n                                        itm.kicc@muenchen.de\r\n                                    </Link>{\" \"}\r\n                                    wenden. Technische Fehler bitte an den{\" \"}\r\n                                    <Link inline href=\"https://wilma.muenchen.de/pages/it-nutzung-support/apps/content/it-servicedesk-neu\">\r\n                                        {\" \"}\r\n                                        zuständigen Servicedesk\r\n                                    </Link>{\" \"}\r\n                                    melden\r\n                                </li>\r\n                                <li>\r\n                                    <strong>FAQs:</strong> Weitere Fragen und Antworten (u.a. zu Ziel und Einsatzzwecke von MUCGPT sowie zur Weiterverwendung\r\n                                    der Eingaben und Ergebnisse) geben die{\" \"}\r\n                                    <Link inline href=\"/#faq\">\r\n                                        FAQs\r\n                                    </Link>\r\n                                    .\r\n                                </li>\r\n                                <li>\r\n                                    <strong>Best-Practice Dokumentation/Wissensmanagement:</strong> Erfolgreiche Anwendungsfälle von MUCGPT sollen dokumentiert\r\n                                    werden, um wertvolles Wissen für zukünftige Projekte zu generieren. Tragen Sie diese Beispiele gerne{\" \"}\r\n                                    <Link inline href=\"https://wilma.muenchen.de/workspaces/innovationcenter/apps/list/best-practices\">\r\n                                        hier\r\n                                    </Link>{\" \"}\r\n                                    ein.\r\n                                </li>\r\n                            </ul>\r\n                            <div className={styles.responsibleContainer}>\r\n                                Verantwortlich für die Nutzungsbedingungen ist RIT-I (STRAC). Bei Fragen oder Anmerkungen hierzu bitte an folgende E-Mail\r\n                                Adresse wenden:\r\n                                <Link inline href=\"mailto:it-vorschriften.strac.rit@muenchen.de?subject=MUCGPT\">\r\n                                    {\" \"}\r\n                                    it-vorschriften.strac.rit@muenchen.de\r\n                                </Link>\r\n                            </div>\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <DialogTrigger disableButtonEnhancement>\r\n                                <Button appearance=\"secondary\" size=\"small\" onClick={_ => onAccept()}>\r\n                                    <Checkmark24Filled className={styles.checkIcon} />\r\n                                    Zustimmen\r\n                                </Button>\r\n                            </DialogTrigger>\r\n                        </DialogActions>\r\n                    </DialogBody>\r\n                </DialogSurface>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n};\r\n","import {\r\n    ApplicationConfig,\r\n    AskResponse,\r\n    BrainstormRequest,\r\n    ChatRequest,\r\n    ChatTurn,\r\n    CountTokenRequest,\r\n    CountTokenResponse,\r\n    CreateBotRequest,\r\n    SimplyRequest,\r\n    SimplyResponse,\r\n    SumRequest,\r\n    SumResponse\r\n} from \"./models\";\r\n\r\nconst CHAT_NAME_PROMPT =\r\n    \"Gebe dem bisherigen Chatverlauf einen passenden und aussagekräftigen Namen, bestehend aus maximal 5 Wörtern. Über diesen Namen soll klar ersichtlich sein, welches Thema der Chat behandelt. Antworte nur mit dem vollständigen Namen und keinem weiteren Text, damit deine Antwort direkt weiterverwendet werden kann. Benutze keine Sonderzeichen sondern lediglich Zahlen und Buchstaben. Antworte in keinem Fall mit etwas anderem als dem Chat namen. Antworte immer nur mit dem namen des Chats\";\r\n\r\nexport async function chatApi(options: ChatRequest): Promise<Response> {\r\n    const url = options.shouldStream ? \"/api/chat_stream\" : \"/api/chat\";\r\n    return await fetch(url, {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        mode: \"cors\",\r\n        redirect: \"manual\",\r\n        body: JSON.stringify({\r\n            history: options.history,\r\n            temperature: options.temperature,\r\n            language: options.language,\r\n            system_message: options.system_message,\r\n            max_output_tokens: options.max_output_tokens,\r\n            model: options.model\r\n        })\r\n    });\r\n}\r\n\r\nexport async function sumApi(options: SumRequest, file?: File): Promise<SumResponse> {\r\n    const formData = new FormData();\r\n    formData.append(\r\n        \"body\",\r\n        JSON.stringify({\r\n            text: options.text,\r\n            detaillevel: options.detaillevel,\r\n            language: options.language,\r\n            model: options.model\r\n        })\r\n    );\r\n    if (file) formData.append(\"file\", file);\r\n\r\n    const response = await fetch(\"/api/sum\", {\r\n        method: \"POST\",\r\n        headers: {},\r\n        mode: \"cors\",\r\n        redirect: \"manual\",\r\n        body: formData\r\n    });\r\n\r\n    const parsedResponse: SumResponse = await handleResponse(response);\r\n\r\n    return parsedResponse;\r\n}\r\n\r\nexport function handleRedirect(response: Response, reload = true) {\r\n    if (response.type === \"opaqueredirect\") {\r\n        if (reload) {\r\n            console.log(\"reloading shortly\");\r\n            setTimeout(() => {\r\n                location.reload();\r\n            }, 5000);\r\n            throw Error(\"Die Authentifizierungsinformationen sind abgelaufen. Die Seite wird in wenigen Sekunden neu geladen.\");\r\n        } else {\r\n            const redirectUrl = response.url;\r\n            if (redirectUrl) {\r\n                window.location.href = redirectUrl; // Manually redirect\r\n            } else {\r\n                throw new Error(\"Redirect URL not found\");\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport async function handleResponse(response: Response) {\r\n    const parsedResponse = await response.json();\r\n    if (response.status > 299 || !response.ok) {\r\n        throw Error(parsedResponse.error || \"Unknown error\");\r\n    }\r\n    return parsedResponse;\r\n}\r\n\r\nexport async function configApi(): Promise<ApplicationConfig> {\r\n    return await fetch(\"/api/config\", {\r\n        method: \"GET\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        mode: \"cors\",\r\n        redirect: \"manual\"\r\n    }).then(async response => {\r\n        handleRedirect(response, false);\r\n        const parsedResponse = await handleResponse(response);\r\n        return parsedResponse;\r\n    });\r\n}\r\n\r\nexport async function brainstormApi(options: BrainstormRequest): Promise<AskResponse> {\r\n    const response = await fetch(\"/api/brainstorm\", {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        mode: \"cors\",\r\n        redirect: \"manual\",\r\n        body: JSON.stringify({\r\n            topic: options.topic,\r\n            temperature: options.temperature,\r\n            language: options.language,\r\n            model: options.model\r\n        })\r\n    });\r\n\r\n    handleRedirect(response, true);\r\n    const parsedResponse: AskResponse = await handleResponse(response);\r\n    return parsedResponse;\r\n}\r\n\r\nexport async function simplyApi(options: SimplyRequest): Promise<SimplyResponse> {\r\n    const response = await fetch(\"/api/simply\", {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        mode: \"cors\",\r\n        redirect: \"manual\",\r\n        body: JSON.stringify({\r\n            topic: options.topic,\r\n            temperature: options.temperature,\r\n            model: options.model\r\n        })\r\n    });\r\n    handleRedirect(response);\r\n    const parsedResponse: SimplyResponse = await handleResponse(response);\r\n    return parsedResponse;\r\n}\r\n\r\nexport async function countTokensAPI(options: CountTokenRequest): Promise<CountTokenResponse> {\r\n    const response = await fetch(\"/api/counttokens\", {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        mode: \"cors\",\r\n        redirect: \"manual\",\r\n        body: JSON.stringify({\r\n            text: options.text,\r\n            model: options.model.llm_name\r\n        })\r\n    });\r\n\r\n    handleRedirect(response, true);\r\n    const parsedResponse: CountTokenResponse = await handleResponse(response);\r\n    return parsedResponse;\r\n}\r\n\r\nexport async function createBotApi(options: CreateBotRequest): Promise<Response> {\r\n    return await fetch(\"/api/create_bot\", {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        mode: \"cors\",\r\n        redirect: \"manual\",\r\n        body: JSON.stringify({\r\n            input: options.input,\r\n            model: options.model,\r\n            max_output_tokens: options.max_output_tokens\r\n        })\r\n    });\r\n}\r\n\r\nexport async function createChatName(\r\n    query: string,\r\n    answer: string,\r\n    language: string,\r\n    temperature: number,\r\n    system_message: string,\r\n    max_output_tokens: number,\r\n    model: string\r\n) {\r\n    const history: ChatTurn[] = [{ user: query, bot: answer }];\r\n    const request: ChatRequest = {\r\n        history: [\r\n            ...history,\r\n            {\r\n                user: CHAT_NAME_PROMPT,\r\n                bot: undefined\r\n            }\r\n        ],\r\n        shouldStream: false,\r\n        language: language,\r\n        temperature: temperature,\r\n        system_message: system_message,\r\n        max_output_tokens: max_output_tokens,\r\n        model: model\r\n    };\r\n    const response = await chatApi(request);\r\n    handleRedirect(response);\r\n\r\n    if (!response.body) {\r\n        throw Error(\"No response body\");\r\n    }\r\n    const parsedResponse = (await response.json()) as SimplyResponse;\r\n    if (response.status > 299 || !response.ok) {\r\n        throw Error(parsedResponse.error || \"Unknown error\");\r\n    }\r\n    return parsedResponse.content;\r\n}\r\n","import { Dropdown, makeStyles, Option } from \"@fluentui/react-components\";\r\nimport { SelectionEvents, OptionOnSelectData } from \"@fluentui/react-combobox\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        // Stack the label above the field with a gap\r\n    },\r\n    option: {}\r\n});\r\n\r\ninterface Props {\r\n    onSelectionChange: (e: SelectionEvents, selection: OptionOnSelectData) => void;\r\n    defaultlang: string;\r\n}\r\n\r\nexport const LanguageSelector = ({ onSelectionChange, defaultlang }: Props) => {\r\n    const styles = useStyles();\r\n    return (\r\n        <div className={styles.root}>\r\n            <Dropdown\r\n                aria-label=\"Sprache auswählen\"\r\n                defaultValue={defaultlang}\r\n                onOptionSelect={onSelectionChange}\r\n                appearance=\"underline\"\r\n                size=\"small\"\r\n                positioning=\"below-start\"\r\n            >\r\n                <Option text=\"Deutsch\" className={styles.option}>\r\n                    Deutsch\r\n                </Option>\r\n                <Option text=\"Englisch\" className={styles.option}>\r\n                    Englisch\r\n                </Option>\r\n                <Option text=\"French\" className={styles.option}>\r\n                    Französich\r\n                </Option>\r\n                <Option text=\"Bairisch\" className={styles.option}>\r\n                    Bairisch\r\n                </Option>\r\n                <Option text=\"Ukrainisch\" className={styles.option}>\r\n                    Ukrainisch\r\n                </Option>\r\n            </Dropdown>\r\n        </div>\r\n    );\r\n};\r\n","import { Dropdown, makeStyles, Option } from \"@fluentui/react-components\";\r\nimport { SelectionEvents, OptionOnSelectData } from \"@fluentui/react-combobox\";\r\nimport { Model } from \"../../api\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        // Stack the label above the field with a gap\r\n    },\r\n    option: {}\r\n});\r\n\r\ninterface Props {\r\n    onSelectionChange: (e: SelectionEvents, selection: OptionOnSelectData) => void;\r\n    defaultLLM: string;\r\n    options: Model[];\r\n}\r\n\r\nexport const LLMSelector = ({ onSelectionChange, defaultLLM, options }: Props) => {\r\n    const styles = useStyles();\r\n    return (\r\n        <div className={styles.root}>\r\n            <Dropdown\r\n                aria-label=\"Sprachmodell auswählen\"\r\n                defaultValue={defaultLLM}\r\n                onOptionSelect={onSelectionChange}\r\n                appearance=\"underline\"\r\n                size=\"small\"\r\n                positioning=\"below-start\"\r\n            >\r\n                {options.map((item, index) => (\r\n                    <Option text={item.llm_name} className={styles.option} key={index}>\r\n                        {item.llm_name}\r\n                    </Option>\r\n                ))}\r\n            </Dropdown>\r\n        </div>\r\n    );\r\n};\r\n","export default \"__VITE_ASSET__CVHVFLM3__\"","import { ChevronDown24Regular, DarkTheme20Regular, Dismiss24Regular, FontIncrease20Regular, Mail24Regular } from \"@fluentui/react-icons\";\r\nimport { OverlayDrawer, Button, Slider, SliderProps, Label, useId, Tooltip, Link } from \"@fluentui/react-components\";\r\n\r\nimport styles from \"./SettingsDrawer.module.css\";\r\nimport { useCallback, useState } from \"react\";\r\nimport { SelectionEvents, OptionOnSelectData } from \"@fluentui/react-combobox\";\r\nimport { Tag } from \"@fluentui/react-components\";\r\nimport { LanguageSelector } from \"../../components/LanguageSelector\";\r\nimport { LLMSelector } from \"../LLMSelector/LLMSelector\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport cheetsheet from \"../../assets/mucgpt_cheatsheet.pdf\";\r\nimport { Model } from \"../../api\";\r\ninterface Props {\r\n    onLanguageSelectionChanged: (e: SelectionEvents, selection: OptionOnSelectData) => void;\r\n    defaultlang: string;\r\n    version: string;\r\n    commit: string;\r\n    fontscale: number;\r\n    setFontscale: (fontscale: number) => void;\r\n    isLight: boolean;\r\n    setTheme: (isLight: boolean) => void;\r\n    onLLMSelectionChanged: (e: SelectionEvents, selection: OptionOnSelectData) => void;\r\n    defaultLLM: string;\r\n    llmOptions: Model[];\r\n    currentLLM: Model;\r\n}\r\n\r\nexport const SettingsDrawer = ({\r\n    onLanguageSelectionChanged,\r\n    defaultlang,\r\n    version,\r\n    commit,\r\n    fontscale,\r\n    setFontscale,\r\n    isLight,\r\n    setTheme,\r\n    onLLMSelectionChanged,\r\n    defaultLLM,\r\n    llmOptions,\r\n    currentLLM\r\n}: Props) => {\r\n    const [isOpen, setIsOpen] = useState<boolean>(false);\r\n    const { t, i18n } = useTranslation();\r\n\r\n    const fontscaleID = useId(\"input-fontscale\");\r\n    const feedback_headerID = useId(\"feedback-language\");\r\n\r\n    const onClickRightButton = useCallback(() => {\r\n        setIsOpen(true);\r\n    }, []);\r\n    const min_temp = 0.8;\r\n    const max_temp = 1.8;\r\n    const onFontscaleChange: SliderProps[\"onChange\"] = (_, data) => setFontscale(data.value);\r\n\r\n    const closeDrawer = () => {\r\n        setIsOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <OverlayDrawer size=\"small\" position=\"end\" open={isOpen} style={{ padding: \"30px\", alignItems: \"stretch\", overflowY: \"auto\", height: \"100vh\" }}>\r\n                <div className={styles.title} role=\"heading\" aria-level={2}>\r\n                    <div className={styles.title_text}>{t(\"components.settingsdrawer.settings\")}</div>\r\n                    <div className={styles.title_close}>\r\n                        <Tooltip content={t(\"components.settingsdrawer.settings_button_close\")} relationship=\"description\" positioning=\"below\">\r\n                            <Button\r\n                                appearance=\"subtle\"\r\n                                aria-label={t(\"components.settingsdrawer.settings_button_close\")}\r\n                                icon={<Dismiss24Regular />}\r\n                                onClick={closeDrawer}\r\n                            />\r\n                        </Tooltip>\r\n                    </div>\r\n                </div>\r\n                <div className={styles.header} role=\"heading\" aria-level={3}>\r\n                    {t(\"components.settingsdrawer.language\")}\r\n                </div>\r\n                <div className={styles.bodyContainer}>\r\n                    <LanguageSelector defaultlang={defaultlang} onSelectionChange={onLanguageSelectionChanged}></LanguageSelector>\r\n                </div>\r\n\r\n                <div className={styles.header} role=\"heading\" aria-level={3}>\r\n                    {t(\"components.settingsdrawer.llm\")}\r\n                </div>\r\n                <div className={styles.bodyContainer}>\r\n                    <LLMSelector defaultLLM={defaultLLM} onSelectionChange={onLLMSelectionChanged} options={llmOptions}></LLMSelector>\r\n                    <div className={styles.info}>{currentLLM[\"description\"]}</div>\r\n                </div>\r\n                <div className={styles.header} role=\"heading\" aria-level={3}>\r\n                    {t(\"components.settingsdrawer.fontsize\")}\r\n                </div>\r\n                <div className={styles.bodyContainer}>\r\n                    <div className={styles.verticalContainer}>\r\n                        <Tooltip aria-hidden=\"true\" content={t(\"components.settingsdrawer.change_font\")} relationship=\"description\" positioning=\"below\">\r\n                            <FontIncrease20Regular className={styles.iconRightMargin}></FontIncrease20Regular>\r\n                        </Tooltip>\r\n                        <Slider\r\n                            min={min_temp}\r\n                            max={max_temp}\r\n                            defaultValue={2}\r\n                            onChange={onFontscaleChange}\r\n                            aria-valuetext={t(\"components.settingsdrawer.fontsize\") + ` ist ${Math.floor(fontscale * 100)} %`}\r\n                            value={fontscale}\r\n                            step={0.1}\r\n                            size=\"small\"\r\n                            aria-label={t(\"components.settingsdrawer.change_font\")}\r\n                            id={fontscaleID}\r\n                        />\r\n                        <br></br>\r\n                        <Label htmlFor={fontscaleID} aria-hidden>\r\n                            {Math.floor(fontscale * 100)} %\r\n                        </Label>\r\n                    </div>\r\n                </div>\r\n                <div className={styles.header} role=\"heading\" aria-level={3}>\r\n                    {t(\"components.settingsdrawer.theme\")}\r\n                </div>\r\n                <div className={styles.bodyContainer}>\r\n                    <div className={styles.verticalContainer}>\r\n                        <Tooltip content={t(\"components.settingsdrawer.change_theme\")} relationship=\"description\" positioning=\"below\">\r\n                            <Button\r\n                                appearance=\"subtle\"\r\n                                aria-label={t(\"components.settingsdrawer.change_theme\")}\r\n                                icon={<DarkTheme20Regular className={styles.iconRightMargin}></DarkTheme20Regular>}\r\n                                onClick={() => setTheme(!isLight)}\r\n                                size=\"large\"\r\n                            ></Button>\r\n                        </Tooltip>\r\n\r\n                        {isLight ? <div>{t(\"components.settingsdrawer.theme_light\")}</div> : <div>{t(\"components.settingsdrawer.theme_dark\")}</div>}\r\n                    </div>\r\n                </div>\r\n                <div className={styles.header} role=\"heading\" aria-level={3} id={feedback_headerID}>\r\n                    {t(\"components.settingsdrawer.feedback\")}\r\n                </div>\r\n                <div className={styles.bodyContainer} role=\"heading\" aria-level={3}>\r\n                    <div className={styles.verticalContainer}>\r\n                        <Mail24Regular className={styles.iconRightMargin} aria-hidden></Mail24Regular>\r\n                        <Link aria-labelledby={feedback_headerID} href=\"mailto:itm.kicc@muenchen.de?subject=MUCGPT\">\r\n                            itm.kicc@muenchen.de\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n                <div className={styles.header} role=\"heading\" aria-level={3}>\r\n                    {t(\"components.settingsdrawer.help\")}\r\n                </div>\r\n                <div className={styles.bodyContainer}>\r\n                    <ul className={styles.list}>\r\n                        <li>\r\n                            {\" \"}\r\n                            <Link href=\"\\#faq\" onClick={closeDrawer}>\r\n                                FAQs\r\n                            </Link>\r\n                        </li>\r\n                        <li>\r\n                            <Link download href={cheetsheet} aria-label=\"Cheat Sheet\">\r\n                                Cheat Sheet\r\n                            </Link>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n                <div className={styles.header} role=\"heading\" aria-level={3}>\r\n                    {t(\"components.settingsdrawer.about\")}\r\n                </div>\r\n                <div className={styles.bodyContainer}>\r\n                    <div className={styles.faq}>\r\n                        Version: <Tag shape=\"circular\">{version}</Tag> <Tag shape=\"circular\">{commit}</Tag>\r\n                    </div>\r\n                    <div className={styles.faq}>\r\n                        <Link href=\"\\#version\" onClick={closeDrawer}>\r\n                            {t(\"version.header\")}\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n            </OverlayDrawer>\r\n\r\n            <div className={styles.button}>\r\n                <Button icon={<ChevronDown24Regular />} appearance=\"primary\" onClick={onClickRightButton}>\r\n                    {t(\"components.settingsdrawer.settings_button\")}\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import { BrandVariants, createDarkTheme, createLightTheme, makeStyles } from \"@fluentui/react-components\";\r\nimport { tokens } from \"@fluentui/react-theme\";\r\n\r\nexport const useStyles = makeStyles({\r\n    header: {\r\n        backgroundColor: tokens.colorBrandBackground2,\r\n        color: tokens.colorBrandForeground2\r\n    }\r\n});\r\n\r\nexport const enum STORAGE_KEYS {\r\n    TERMS_OF_USE_READ = \"TERMS_OF_USE_READ\",\r\n    SETTINGS_LANGUAGE = \"SETTINGS_LANGUAGE\",\r\n    SETTINGS_LLM = \"SETTINGS_LLM\",\r\n    SETTINGS_FONT_SCALING = \"SETTINGS_FONT_SCALING\",\r\n    SETTINGS_IS_LIGHT_THEME = \"SETTINGS_IS_LIGHT_THEME\",\r\n    VERSION_UPDATE_SEEN = \"VERSION_UPDATE_SEEN\"\r\n}\r\n\r\nconst customBrandRamp: BrandVariants = {\r\n    10: \"#f2f2f2\",\r\n    20: \"#e4e4e5\",\r\n    30: \"#d6d6d8\",\r\n    40: \"#c8c8cb\",\r\n    50: \"#bababe\",\r\n    60: \"#acacb1\",\r\n    70: \"#9e9ea4\",\r\n    80: \"#909097\",\r\n    90: \"#82828a\",\r\n    100: \"#74747d\",\r\n    110: \"#666670\",\r\n    120: \"#585863\",\r\n    130: \"#4a4a56\",\r\n    140: \"#3c3c49\",\r\n    150: \"#2e2e3c\",\r\n    160: \"#212529\"\r\n};\r\nexport const adjustTheme = (isLight: boolean, scaling: number) => {\r\n    let theme = isLight ? createLightTheme(customBrandRamp) : createDarkTheme(customBrandRamp);\r\n    theme.fontSizeBase100 = (parseFloat(theme.fontSizeBase100.replace(\"px\", \"\")) * scaling).toString() + \"px\";\r\n    theme.fontSizeBase200 = (parseFloat(theme.fontSizeBase200.replace(\"px\", \"\")) * scaling).toString() + \"px\";\r\n    theme.fontSizeBase300 = (parseFloat(theme.fontSizeBase300.replace(\"px\", \"\")) * scaling).toString() + \"px\";\r\n    theme.fontSizeBase400 = (parseFloat(theme.fontSizeBase400.replace(\"px\", \"\")) * scaling).toString() + \"px\";\r\n    theme.fontSizeBase500 = (parseFloat(theme.fontSizeBase500.replace(\"px\", \"\")) * scaling).toString() + \"px\";\r\n    theme.fontSizeBase600 = (parseFloat(theme.fontSizeBase600.replace(\"px\", \"\")) * scaling).toString() + \"px\";\r\n    theme.fontSizeHero700 = (parseFloat(theme.fontSizeHero700.replace(\"px\", \"\")) * scaling).toString() + \"px\";\r\n    theme.fontSizeHero800 = (parseFloat(theme.fontSizeHero800.replace(\"px\", \"\")) * scaling).toString() + \"px\";\r\n    theme.fontSizeHero900 = (parseFloat(theme.fontSizeHero900.replace(\"px\", \"\")) * scaling).toString() + \"px\";\r\n    theme.fontSizeHero1000 = (parseFloat(theme.fontSizeHero1000.replace(\"px\", \"\")) * scaling).toString() + \"px\";\r\n\r\n    theme.lineHeightBase100 = (parseFloat(theme.lineHeightBase100.replace(\"px\", \"\")) * scaling).toString() + \"px\";\r\n    theme.lineHeightBase200 = (parseFloat(theme.lineHeightBase200.replace(\"px\", \"\")) * scaling).toString() + \"px\";\r\n    theme.lineHeightBase300 = (parseFloat(theme.lineHeightBase300.replace(\"px\", \"\")) * scaling).toString() + \"px\";\r\n    theme.lineHeightBase400 = (parseFloat(theme.lineHeightBase400.replace(\"px\", \"\")) * scaling).toString() + \"px\";\r\n    theme.lineHeightBase500 = (parseFloat(theme.lineHeightBase500.replace(\"px\", \"\")) * scaling).toString() + \"px\";\r\n    theme.lineHeightBase600 = (parseFloat(theme.lineHeightBase600.replace(\"px\", \"\")) * scaling).toString() + \"px\";\r\n    theme.lineHeightHero700 = (parseFloat(theme.lineHeightHero700.replace(\"px\", \"\")) * scaling).toString() + \"px\";\r\n    theme.lineHeightHero800 = (parseFloat(theme.lineHeightHero800.replace(\"px\", \"\")) * scaling).toString() + \"px\";\r\n    theme.lineHeightHero900 = (parseFloat(theme.lineHeightHero900.replace(\"px\", \"\")) * scaling).toString() + \"px\";\r\n    theme.lineHeightHero1000 = (parseFloat(theme.lineHeightHero1000.replace(\"px\", \"\")) * scaling).toString() + \"px\";\r\n    return theme;\r\n};\r\n","// Context.js\r\nimport React, { Dispatch, SetStateAction, useState } from \"react\";\r\nimport { Model } from \"../../api\";\r\n\r\ninterface ILLMProvider {\r\n    LLM: Model;\r\n    setLLM: Dispatch<SetStateAction<Model>>;\r\n}\r\n\r\nexport const DEFAULTLLM = \"gpt-4o-mini\";\r\nexport const LLMContext = React.createContext<ILLMProvider>({\r\n    LLM: { llm_name: DEFAULTLLM, max_output_tokens: 0, max_input_tokens: 0, description: \"\" },\r\n    setLLM: () => {}\r\n});\r\n\r\nexport const LLMContextProvider = (props: React.PropsWithChildren<{}>) => {\r\n    const [LLM, setLLM] = useState<Model>({ llm_name: DEFAULTLLM, max_output_tokens: 0, max_input_tokens: 0, description: \"\" });\r\n\r\n    return <LLMContext.Provider value={{ LLM, setLLM }}>{props.children}</LLMContext.Provider>;\r\n};\r\n","import { createContext } from \"react\";\r\n\r\nexport const LightContext = createContext(true);\r\n","import { ApplicationConfig } from \"./api\";\r\nimport { IndexedDBStorage } from \"./service/indexedDBStorage\";\r\n\r\n//APP Config\r\nexport const DEFAULT_APP_CONFIG: ApplicationConfig = {\r\n    models: [\r\n        {\r\n            llm_name: \"KICC GPT\",\r\n            max_input_tokens: 128000,\r\n            max_output_tokens: 128000,\r\n            description: \"\"\r\n        },\r\n        {\r\n            llm_name: \"Unknown GPT\",\r\n            max_input_tokens: 128000,\r\n            max_output_tokens: 128000,\r\n            description: \"\"\r\n        }\r\n    ],\r\n    frontend: {\r\n        labels: {\r\n            env_name: \"MUC tschibidi-C\"\r\n        },\r\n        alternative_logo: true,\r\n        enable_simply: true,\r\n        community_assistants: []\r\n    },\r\n    version: \"DEV 1.0.0\",\r\n    commit: \"152b175\"\r\n};\r\n\r\n//IDB storage configs\r\nexport const BOT_STORE: IndexedDBStorage = {\r\n    db_name: \"MUCGPT-ASSISTANTS\",\r\n    objectStore_name: \"bots\",\r\n    db_version: 1\r\n};\r\n//Old storage, used to migrate existing bots\r\nexport const LEGACY_BOT_STORE: IndexedDBStorage = {\r\n    db_name: \"MUCGPT-BOTS\",\r\n    objectStore_name: \"bots\",\r\n    db_version: 3\r\n};\r\n\r\nexport const SUMMARIZE_STORE: IndexedDBStorage = {\r\n    db_name: \"MUCGPT-SUMMARIZE\",\r\n    objectStore_name: \"summarize\",\r\n    db_version: 3\r\n};\r\n\r\nexport const SIMPLY_STORE: IndexedDBStorage = {\r\n    db_name: \"MUCGPT-SIMPLY\",\r\n    objectStore_name: \"simply\",\r\n    db_version: 3\r\n};\r\n\r\nexport const BRAINSTORM_STORE: IndexedDBStorage = {\r\n    db_name: \"MUCGPT-BRAINSTORMING\",\r\n    objectStore_name: \"brainstorming\",\r\n    db_version: 3\r\n};\r\n\r\nexport const CHAT_STORE: IndexedDBStorage = {\r\n    db_name: \"MUCGPT-CHAT\",\r\n    objectStore_name: \"chat\",\r\n    db_version: 3\r\n};\r\n\r\nexport const enum STORAGE_KEYS_SIMPLY {\r\n    SIMPLY_SYSTEM_PROMPT = \"SIMPLY_SYSTEM_PROMPT\",\r\n    SIMPLY_OUTPUT_TYPE = \"SIMPLY_OUTPUT_TYPE\"\r\n}\r\n\r\n// Create Bot examples\r\nexport const CREATE_BOT_EXAMPLE_1 = \"Englischübersetzer: Der Assistent übersetzt den eingegebenen Text ins Englische.\";\r\nexport const CREATE_BOT_EXAMPLE_2 = \"Der Assistent ist ein Mitarbeiter der Stadt München und antwortet höflich sowie individuell auf die eingehenden E-Mails.\";\r\nexport const CREATE_BOT_EXAMPLE_3 =\r\n    \"Der Assistent erstellt für das eingegebene Wort oder den eingegebenen Satz zehn verschiedene Umformulierungen oder Synonyme.\";\r\n","import { IDBPDatabase, IDBPTransaction } from \"idb\";\r\nimport { ChatResponse } from \"../api\";\r\nimport { BOT_STORE, CHAT_STORE, LEGACY_BOT_STORE } from \"../constants\";\r\nimport { ChatOptions } from \"../pages/chat/Chat\";\r\nimport { BotStorageService } from \"./botstorage\";\r\nimport { DBObject, StorageService } from \"./storage\";\r\n\r\ninterface LegacyChatObject {\r\n    id: string;\r\n    Data: {\r\n        Answers: [string, { answer: string; tokens: number }, number][];\r\n        LastEdited: number;\r\n        Name: string;\r\n    };\r\n    Options: {\r\n        favorite: boolean;\r\n        system: string;\r\n        maxTokens: number;\r\n        temperature: number;\r\n    };\r\n}\r\n\r\nexport interface LegacyBot {\r\n    title: string;\r\n    description: string;\r\n    system_message: string;\r\n    publish: boolean;\r\n    id: number;\r\n    temperature: number;\r\n    max_output_tokens: number;\r\n}\r\nexport async function migrate_old_bots() {\r\n    const legacy_store = new StorageService<any, any>(LEGACY_BOT_STORE, undefined);\r\n    const db = await legacy_store.connectToDB();\r\n    const newStore = new BotStorageService(BOT_STORE);\r\n    if (db.objectStoreNames.contains(LEGACY_BOT_STORE.objectStore_name)) {\r\n        const oldbots: LegacyBot[] = (await db.getAll(LEGACY_BOT_STORE.objectStore_name)) as LegacyBot[];\r\n        await db.clear(LEGACY_BOT_STORE.objectStore_name);\r\n        for (let oldbot of oldbots) {\r\n            if (oldbot.id == 0 || oldbot.id == 1) continue; //skip the default bots\r\n            let newBot = {\r\n                title: oldbot.title,\r\n                description: oldbot.description,\r\n                system_message: oldbot.system_message,\r\n                publish: oldbot.publish,\r\n                temperature: oldbot.temperature,\r\n                max_output_tokens: oldbot.max_output_tokens\r\n            };\r\n            //save to new bot storage\r\n            await newStore.createBotConfig(newBot);\r\n        }\r\n    }\r\n}\r\n\r\nexport async function migrateChats(\r\n    db: IDBPDatabase<any>,\r\n    _oldVersion: number,\r\n    _newVersion: number | null,\r\n    transaction: IDBPTransaction<any, string[], \"versionchange\">,\r\n    _event: IDBVersionChangeEvent,\r\n    storeName: string\r\n) {\r\n    if (!db.objectStoreNames.contains(storeName)) {\r\n        db.createObjectStore(storeName, { keyPath: \"id\" });\r\n    } else {\r\n        if (storeName === CHAT_STORE.objectStore_name && _oldVersion == 2) {\r\n            transaction.oncomplete = async () => {\r\n                const oldchats: LegacyChatObject[] = (await db.getAll(storeName)) as [LegacyChatObject];\r\n                for (let chat of oldchats) {\r\n                    let newChat: DBObject<ChatResponse, ChatOptions> = {\r\n                        messages: chat.Data.Answers.map(answer => {\r\n                            return {\r\n                                user: answer[0],\r\n                                response: { answer: answer[1].answer, tokens: answer[1].tokens, user_tokens: answer[2] }\r\n                            };\r\n                        }),\r\n                        config: {\r\n                            system: chat.Options.system,\r\n                            maxTokens: chat.Options.maxTokens,\r\n                            temperature: chat.Options.temperature\r\n                        },\r\n                        _last_edited: chat.Data.LastEdited,\r\n                        id: chat.id,\r\n                        name: chat.Data.Name,\r\n                        favorite: chat.Options.favorite\r\n                    };\r\n                    await db.put(storeName, newChat);\r\n                }\r\n            };\r\n        } else transaction.objectStore(storeName).clear();\r\n    }\r\n}\r\n","import { openDB, IDBPDatabase } from \"idb\";\r\n\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { IndexedDBStorage } from \"./indexedDBStorage\";\r\nimport { migrateChats } from \"./migration\";\r\n\r\n/**\r\n * Represents a database object that stores messages and configuration data.\r\n */\r\nexport interface DBObject<M, C> {\r\n    _last_edited?: number;\r\n    id?: string;\r\n    name?: string;\r\n    favorite?: boolean;\r\n    messages: DBMessage<M>[];\r\n    config: C;\r\n}\r\n\r\n/**\r\n * Represents a message stored in the database.\r\n */\r\nexport interface DBMessage<R> {\r\n    user: string; //the user message/query\r\n    response: R; //the response from the ai\r\n}\r\n\r\n/**\r\n * Represents a storage service for managing data in an IndexedDB.\r\n *\r\n * The service provides methods for creating, reading, updating, and deleting records in the database.\r\n * Each record is saved in a object store and is from type DBObject.\r\n * @template M - The type of messages stored in the database.\r\n * @template C - The type of configuration stored in the database.\r\n */\r\nexport class StorageService<M, C> {\r\n    config: IndexedDBStorage;\r\n    private active_chat_id?: string;\r\n    constructor(config: IndexedDBStorage, active_chat_id?: string) {\r\n        this.config = config;\r\n        this.active_chat_id = active_chat_id;\r\n    }\r\n\r\n    getActiveChatId() {\r\n        return this.active_chat_id;\r\n    }\r\n\r\n    async connectToDB(): Promise<IDBPDatabase<DBObject<M, C>>> {\r\n        return openDB<DBObject<M, C>>(this.config.db_name, this.config.db_version, {\r\n            upgrade: (db, oldVersion, newVersion, transaction, _event) => {\r\n                return migrateChats(db, oldVersion, newVersion, transaction, _event, this.config.objectStore_name);\r\n            }\r\n        });\r\n    }\r\n\r\n    onError(request: any) {\r\n        console.error(\"Error\", JSON.stringify(request));\r\n    }\r\n\r\n    /**\r\n     * Creates a new entry in the database with the specified messages, configuration, and ID.\r\n     * If messages or configuration are not provided, empty arrays and an empty object will be used, respectively.\r\n     * If ID is not provided, a new UUID will be generated.\r\n     *\r\n     * @param messages - An optional array of messages to be stored in the database.\r\n     * @param configuration - An optional configuration object to be stored in the database.\r\n     * @param id - An optional ID for the new entry. If not provided, a new UUID will be generated.\r\n     * @param name - An optional name for the new entry.\r\n     * @param favorite - An optional boolean indicating whether the new entry should be marked as a favorite.\r\n     * @returns A Promise that resolves to the ID of the newly created entry, or undefined if an error occurs.\r\n     *\r\n     */\r\n    async create(messages?: DBMessage<M>[], configuration?: C, id = uuid(), name?: string, favorite: boolean = false): Promise<string | undefined> {\r\n        try {\r\n            const db_object: DBObject<M, C> = {\r\n                messages: messages ? messages : [],\r\n                config: configuration ? configuration : ({} as C),\r\n                _last_edited: Date.now(),\r\n                id: id,\r\n                favorite: favorite,\r\n                name: name\r\n            };\r\n            const db = await this.connectToDB();\r\n            await db.put(this.config.objectStore_name, db_object);\r\n            return db_object.id;\r\n        } catch (error) {\r\n            this.onError(error);\r\n        }\r\n    }\r\n\r\n    async get(id: string): Promise<DBObject<M, C> | undefined> {\r\n        try {\r\n            const db = await this.connectToDB();\r\n            const result = (await db.get(this.config.objectStore_name, id)) as DBObject<M, C>;\r\n            return result;\r\n        } catch (error) {\r\n            this.onError(error);\r\n        }\r\n    }\r\n\r\n    async getAll() {\r\n        try {\r\n            const db = await this.connectToDB();\r\n            const result = (await db.getAll(this.config.objectStore_name)) as DBObject<M, C>[];\r\n            return result;\r\n        } catch (error) {\r\n            this.onError(error);\r\n        }\r\n    }\r\n\r\n    async update(messages?: DBMessage<M>[], configuration?: C, alternative_id?: string, favorite?: boolean, name?: string) {\r\n        try {\r\n            const id = alternative_id ? alternative_id : this.getActiveChatId();\r\n            if (!id) throw new Error(\"No active id found and alternative id not provided\");\r\n            const db = await this.connectToDB();\r\n            const stored = await this.get(id);\r\n            if (stored) {\r\n                stored.messages = messages ? messages : stored.messages;\r\n                stored.config = configuration ? configuration : stored.config;\r\n                stored._last_edited = Date.now();\r\n                if (favorite !== undefined) stored.favorite = favorite;\r\n                if (name) stored.name = name;\r\n                const result = await db.put(this.config.objectStore_name, stored);\r\n                return stored;\r\n            } else throw new Error(\"No object with id \" + id + \" found\");\r\n        } catch (error) {\r\n            this.onError(error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deletes a record from the database.\r\n     * If `alternative_id` is provided, it deletes the record with the specified ID.\r\n     * Otherwise, it deletes the record with the active chat ID.\r\n     *\r\n     * @param alternative_id - The ID of the record to delete (optional).\r\n     */\r\n    async delete(alternative_id?: string) {\r\n        try {\r\n            const id = alternative_id ? alternative_id : this.getActiveChatId();\r\n            if (id) {\r\n                const db = await this.connectToDB();\r\n                await db.transaction(this.config.objectStore_name, \"readwrite\").objectStore(this.config.objectStore_name).delete(id);\r\n            }\r\n        } catch (error) {\r\n            this.onError(error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves the newest chat from the storage.\r\n     * @returns The newest chat object, or undefined if no chats are available.\r\n     */\r\n    async getNewestChat() {\r\n        try {\r\n            const results = await this.getAll();\r\n            if (results && results.length > 0) {\r\n                const newest_chat = results.toSorted((a, b) => (b._last_edited as number) - (a._last_edited as number))[0];\r\n                return newest_chat;\r\n            } else return undefined;\r\n        } catch (error) {\r\n            this.onError(error);\r\n        }\r\n    }\r\n\r\n    async appendMessage(data: DBMessage<M>, configuration?: C) {\r\n        try {\r\n            const id = this.getActiveChatId() as string;\r\n            const stored = await this.get(id);\r\n            if (stored) {\r\n                stored.messages.push(data);\r\n                const updated = await this.update(stored.messages, configuration ? configuration : stored.config);\r\n                return updated;\r\n            } else throw new Error(\"No object with id \" + id + \" found\");\r\n        } catch (error) {\r\n            this.onError(error);\r\n        }\r\n    }\r\n\r\n    async popMessage() {\r\n        try {\r\n            const id = this.getActiveChatId();\r\n            if (!id) throw new Error(\"No active id found\");\r\n            const stored = await this.get(id);\r\n            if (stored) {\r\n                const popedMessage = stored.messages.pop();\r\n                const updated = await this.update(stored.messages, stored.config);\r\n                return popedMessage;\r\n            } else throw new Error(\"No object with id \" + id + \" found\");\r\n        } catch (error) {\r\n            this.onError(error);\r\n        }\r\n    }\r\n\r\n    async rollbackMessage(message: string) {\r\n        try {\r\n            const id = this.getActiveChatId();\r\n            if (!id) throw new Error(\"No active id found\");\r\n            const stored = await this.get(id);\r\n            if (stored) {\r\n                while (stored.messages.length) {\r\n                    let last = stored.messages.pop();\r\n                    if (last && last.user == message) {\r\n                        break;\r\n                    }\r\n                }\r\n                const updated = await this.update(stored.messages, stored.config);\r\n                return updated;\r\n            } else throw new Error(\"No object with id \" + id + \" found\");\r\n        } catch (error) {\r\n            this.onError(error);\r\n        }\r\n    }\r\n\r\n    async renameChat(id: string, newName: string) {\r\n        try {\r\n            return await this.update(undefined, undefined, id, undefined, newName);\r\n        } catch (error) {\r\n            this.onError(error);\r\n        }\r\n    }\r\n\r\n    async changeFavouritesInDb(id: string, fav: boolean) {\r\n        try {\r\n            return await this.update(undefined, undefined, id, fav, undefined);\r\n        } catch (error) {\r\n            this.onError(error);\r\n        }\r\n    }\r\n}\r\n","import { StorageService, DBMessage } from \"./storage\";\r\nimport { Bot, ChatResponse } from \"../api\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { IndexedDBStorage } from \"./indexedDBStorage\";\r\n\r\n/**\r\n * Service for storing and retrieving bot configurations and chat messages.\r\n *\r\n * each bot as configuration and multiple chats with messages\r\n * the configuration is a object in the objectstore with the id \"BOTCONFIG_<bot_id>\"\r\n * the chats are objects in the objectstore with the id \"CHAT_<bot_id>_<chat_id>\"\r\n */\r\nexport class BotStorageService {\r\n    // service to handling with the indexeddb\r\n    private storageService: StorageService<ChatResponse, Bot>;\r\n    // contains the name of the bot indexeddb and the corresponding object store\r\n    private config: IndexedDBStorage;\r\n    static CONFIG_ID = \"BOTCONFIG_\";\r\n    static CHAT_ID = \"CHAT_\";\r\n\r\n    constructor(config: IndexedDBStorage) {\r\n        this.storageService = new StorageService<ChatResponse, Bot>(config, undefined);\r\n        this.config = config;\r\n    }\r\n\r\n    /****************************\r\n     * Helper methods\r\n     ***************************/\r\n\r\n    /**\r\n     * Returns a new instance of the StorageService class for chat storage.\r\n     * @param chat_id - Optional chat ID.\r\n     * @returns A new instance of the StorageService class.\r\n     */\r\n    getChatStorageService(chat_id?: string) {\r\n        return new StorageService<ChatResponse, Bot>(this.config, chat_id);\r\n    }\r\n\r\n    /**\r\n     * Retrieves all chats and configurations that match the provided filter predicate.\r\n     * @param filter_predicate - A function that takes an ID and returns a boolean indicating whether the ID matches the desired criteria.\r\n     * @returns An array of chats and configurations that match the filter predicate.\r\n     */\r\n    private async _getAllChatsAndConfigs(filter_predicate: (id: string) => boolean) {\r\n        const results = await this.storageService.getAll();\r\n        if (results)\r\n            return results.filter(config => {\r\n                if (config.id) {\r\n                    return filter_predicate(config.id);\r\n                }\r\n                return false;\r\n            });\r\n        else return [];\r\n    }\r\n\r\n    /****************************\r\n     * Create IDs\r\n     ***************************/\r\n\r\n    static GENERATE_BOT_CONFIG_ID(id: string) {\r\n        return BotStorageService.CONFIG_ID + id;\r\n    }\r\n\r\n    static GENERATE_BOT_CHAT_PREFIX(bot_id: string) {\r\n        return BotStorageService.CHAT_ID + bot_id + \"_\";\r\n    }\r\n\r\n    static GENERATE_BOT_CHAT_ID(bot_id: string, chat_id?: string) {\r\n        return BotStorageService.GENERATE_BOT_CHAT_PREFIX(bot_id) + chat_id;\r\n    }\r\n\r\n    /****************************\r\n     * Bot config\r\n     ***************************/\r\n\r\n    async createBotConfig(bot_config: Bot, id: string = uuid()) {\r\n        let config_with_id = { ...bot_config, ...{ id: id } };\r\n        await this.storageService.create([], config_with_id, BotStorageService.GENERATE_BOT_CONFIG_ID(id));\r\n        return id;\r\n    }\r\n\r\n    async getBotConfig(bot_id: string) {\r\n        return await this.storageService.get(BotStorageService.GENERATE_BOT_CONFIG_ID(bot_id)).then(bot_config => {\r\n            if (bot_config) return bot_config.config;\r\n            else return undefined;\r\n        });\r\n    }\r\n\r\n    async setBotConfig(bot_id: string, bot_config: Bot) {\r\n        await this.storageService.update(undefined, bot_config, BotStorageService.GENERATE_BOT_CONFIG_ID(bot_id));\r\n    }\r\n\r\n    async getAllBotConfigs() {\r\n        const bots = await this._getAllChatsAndConfigs((id: string) => id.startsWith(BotStorageService.CONFIG_ID));\r\n        const bot_configs = bots.map(config => {\r\n            return config.config;\r\n        });\r\n        return bot_configs;\r\n    }\r\n\r\n    /****************************\r\n     * Chats\r\n     ***************************/\r\n\r\n    async createChat(bot_id: string, messages: DBMessage<ChatResponse>[], chatname: string) {\r\n        const storageService = new StorageService<ChatResponse, Bot>(this.config, BotStorageService.GENERATE_BOT_CHAT_ID(bot_id, undefined));\r\n        const id = BotStorageService.GENERATE_BOT_CHAT_ID(bot_id, uuid());\r\n        await storageService.create(messages, undefined, id, chatname, false);\r\n        return id;\r\n    }\r\n\r\n    async getNewestChatForBot(bot_id: string) {\r\n        const results = await this._getAllChatsAndConfigs(\r\n            (id: string) => !id.startsWith(BotStorageService.CONFIG_ID) && id.startsWith(BotStorageService.GENERATE_BOT_CHAT_PREFIX(bot_id))\r\n        );\r\n        if (results && results.length > 0) {\r\n            const newest_chat = results.toSorted((a, b) => (b._last_edited as number) - (a._last_edited as number))[0];\r\n            return newest_chat;\r\n        } else return undefined;\r\n    }\r\n\r\n    async getAllChatForBot(bot_id: string) {\r\n        const results = await this._getAllChatsAndConfigs(\r\n            (id: string) => !id.startsWith(BotStorageService.CONFIG_ID) && id.startsWith(BotStorageService.GENERATE_BOT_CHAT_PREFIX(bot_id))\r\n        );\r\n        return results;\r\n    }\r\n\r\n    /****************************\r\n     * Delete\r\n     ***************************/\r\n\r\n    async deleteConfigAndChatsForBot(bot_id: string) {\r\n        const results = await this._getAllChatsAndConfigs(\r\n            (id: string) => id === BotStorageService.GENERATE_BOT_CONFIG_ID(bot_id) || id.startsWith(BotStorageService.GENERATE_BOT_CHAT_PREFIX(bot_id))\r\n        );\r\n        for (let i = 0; i < results.length; i++) {\r\n            await this.storageService.delete(results[i].id);\r\n        }\r\n    }\r\n}\r\n","import { Outlet, NavLink, Link, useNavigate, useParams } from \"react-router-dom\";\r\nimport styles from \"./Layout.module.css\";\r\nimport { useContext, useEffect, useState } from \"react\";\r\nimport logo from \"../../assets/mucgpt_logo.png\";\r\nimport alternative_logo from \"../../assets/mugg_tschibidi.png\";\r\nimport logo_black from \"../../assets/mucgpt_black.png\";\r\nimport { SelectionEvents, OptionOnSelectData } from \"@fluentui/react-combobox\";\r\nimport { DEFAULTLANG, LanguageContext } from \"../../components/LanguageSelector/LanguageContextProvider\";\r\nimport { TermsOfUseDialog } from \"../../components/TermsOfUseDialog\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { ApplicationConfig, configApi } from \"../../api\";\r\nimport { SettingsDrawer } from \"../../components/SettingsDrawer\";\r\nimport { FluentProvider, Theme } from \"@fluentui/react-components\";\r\nimport { useStyles, STORAGE_KEYS, adjustTheme } from \"./LayoutHelper\";\r\nimport { DEFAULTLLM, LLMContext } from \"../../components/LLMSelector/LLMContextProvider\";\r\nimport { LightContext } from \"./LightContext\";\r\nimport { BOT_STORE, CHAT_STORE, DEFAULT_APP_CONFIG } from \"../../constants\";\r\nimport { BotStorageService } from \"../../service/botstorage\";\r\nimport { StorageService } from \"../../service/storage\";\r\n\r\nconst formatDate = (date: Date) => {\r\n    let formatted_date = date.getDate() + \"-\" + (date.getMonth() + 1) + \"-\" + date.getFullYear();\r\n    return formatted_date;\r\n};\r\n\r\nexport const Layout = () => {\r\n    const { id } = useParams();\r\n    const styles2 = useStyles();\r\n    const navigate = useNavigate();\r\n    const termsofuseread = localStorage.getItem(STORAGE_KEYS.TERMS_OF_USE_READ) === formatDate(new Date());\r\n    const language_pref = localStorage.getItem(STORAGE_KEYS.SETTINGS_LANGUAGE) || DEFAULTLANG;\r\n    const [config, setConfig] = useState<ApplicationConfig>(DEFAULT_APP_CONFIG);\r\n    const llm_pref = localStorage.getItem(STORAGE_KEYS.SETTINGS_LLM) || config.models[0].llm_name;\r\n    const font_scaling_pref = Number(localStorage.getItem(STORAGE_KEYS.SETTINGS_FONT_SCALING)) || 1;\r\n    const ligth_theme_pref =\r\n        localStorage.getItem(STORAGE_KEYS.SETTINGS_IS_LIGHT_THEME) === null ? true : localStorage.getItem(STORAGE_KEYS.SETTINGS_IS_LIGHT_THEME) == \"true\";\r\n    const { language, setLanguage } = useContext(LanguageContext);\r\n    const { LLM, setLLM } = useContext(LLMContext);\r\n    const { t, i18n } = useTranslation();\r\n    const [isLight, setLight] = useState<boolean>(ligth_theme_pref);\r\n    const [fontscaling, setFontscaling] = useState<number>(font_scaling_pref);\r\n    const [simply, setSimply] = useState<boolean>(true);\r\n\r\n    const [models, setModels] = useState(config.models);\r\n    const [theme, setTheme] = useState<Theme>(adjustTheme(isLight, fontscaling));\r\n    const [title, setTitle] = useState<[string, string]>([\"0\", \"\"]);\r\n\r\n    const onFontscaleChange = (fontscale: number) => {\r\n        setFontscaling(fontscale);\r\n        setTheme(adjustTheme(isLight, fontscale));\r\n        localStorage.setItem(STORAGE_KEYS.SETTINGS_FONT_SCALING, fontscale.toString());\r\n    };\r\n\r\n    const onThemeChange = (light: boolean) => {\r\n        setLight(light);\r\n        localStorage.setItem(STORAGE_KEYS.SETTINGS_IS_LIGHT_THEME, String(light));\r\n        setTheme(adjustTheme(light, fontscaling));\r\n    };\r\n\r\n    const botStorageService: BotStorageService = new BotStorageService(BOT_STORE);\r\n\r\n    useEffect(() => {\r\n        //do migrations for chat\r\n        new StorageService<any, any>(CHAT_STORE, undefined).connectToDB();\r\n        if (id) {\r\n            botStorageService.getBotConfig(id).then(bot => {\r\n                if (bot) setTitle([bot.id as string, bot.title]);\r\n            });\r\n        }\r\n    }, [id]);\r\n\r\n    useEffect(() => {\r\n        configApi().then(\r\n            result => {\r\n                setConfig(result);\r\n                setModels(result.models);\r\n                setSimply(result.frontend.enable_simply);\r\n                if (result.models.length === 0) {\r\n                    console.error(\"Keine Modelle vorhanden\");\r\n                }\r\n                setLLM(result.models.find(model => model.llm_name == llm_pref) || result.models[0]);\r\n                for (let bot of result.frontend.community_assistants) {\r\n                    bot.system_message = bot.system_message.replace(/\\\\n/g, \"\\n\");\r\n                    if (bot.system_message.startsWith('\"') && bot.system_message.endsWith('\"')) {\r\n                        bot.system_message = bot.system_message.slice(1, -1);\r\n                    }\r\n                    bot.description = bot.description.replace(/\\\\n/g, \"\\n\").replace(/  /g, \"  \\n\");\r\n                    if (bot.description.startsWith('\"') && bot.description.endsWith('\"')) {\r\n                        bot.description = bot.description.slice(1, -1);\r\n                    }\r\n                    botStorageService.createBotConfig(bot, bot.id);\r\n                }\r\n            },\r\n            () => {\r\n                console.error(\"Config nicht geladen\");\r\n            }\r\n        );\r\n        i18n.changeLanguage(language_pref);\r\n    }, []);\r\n\r\n    const onAcceptTermsOfUse = () => {\r\n        localStorage.setItem(STORAGE_KEYS.TERMS_OF_USE_READ, formatDate(new Date()));\r\n        if (localStorage.getItem(STORAGE_KEYS.VERSION_UPDATE_SEEN) !== config.version) {\r\n            localStorage.setItem(STORAGE_KEYS.VERSION_UPDATE_SEEN, config.version);\r\n            navigate(\"version\");\r\n        }\r\n    };\r\n\r\n    const onLanguageSelectionChanged = (e: SelectionEvents, selection: OptionOnSelectData) => {\r\n        let lang = selection.optionValue || DEFAULTLANG;\r\n        i18n.changeLanguage(lang);\r\n        setLanguage(lang);\r\n        localStorage.setItem(STORAGE_KEYS.SETTINGS_LANGUAGE, lang);\r\n    };\r\n    const onLLMSelectionChanged = (e: SelectionEvents, selection: OptionOnSelectData) => {\r\n        let llm = selection.optionValue || DEFAULTLLM;\r\n        let found_llm = models.find(model => model.llm_name == llm);\r\n        if (found_llm) {\r\n            setLLM(found_llm);\r\n            localStorage.setItem(STORAGE_KEYS.SETTINGS_LLM, llm);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <FluentProvider theme={theme}>\r\n            <LightContext.Provider value={isLight}>\r\n                <div className={styles.layout}>\r\n                    <header className={styles2.header} role={\"banner\"}>\r\n                        <div className={styles.header}>\r\n                            <Link to=\"/\" className={styles.headerTitleContainer}>\r\n                                <img\r\n                                    src={config.frontend.alternative_logo ? alternative_logo : isLight ? logo : logo_black}\r\n                                    alt=\"MUCGPT logo\"\r\n                                    aria-label=\"MUCGPT Logo\"\r\n                                    className={styles.logo}\r\n                                ></img>\r\n                                <h3 className={styles.headerTitle} aria-description=\"Umgebung:\">\r\n                                    {config.frontend.labels.env_name}\r\n                                </h3>\r\n                            </Link>\r\n                            <div className={styles.headerNavList}>\r\n                                <div className={styles.headerNavLeftMargin}>\r\n                                    <NavLink to=\"/\" className={({ isActive }) => (isActive ? styles.headerNavPageLinkActive : styles.headerNavPageLink)}>\r\n                                        MUCGPT\r\n                                    </NavLink>\r\n                                </div>\r\n                                <div className={styles.headerNavLeftMargin}>\r\n                                    <NavLink to=\"/chat\" className={({ isActive }) => (isActive ? styles.headerNavPageLinkActive : styles.headerNavPageLink)}>\r\n                                        {t(\"header.chat\")}\r\n                                    </NavLink>\r\n                                </div>\r\n                                <div className={styles.headerNavLeftMargin}>\r\n                                    <NavLink\r\n                                        to=\"/sum\"\r\n                                        state={{ from: \"This is my props\" }}\r\n                                        className={({ isActive }) => (isActive ? styles.headerNavPageLinkActive : styles.headerNavPageLink)}\r\n                                    >\r\n                                        {t(\"header.sum\")}\r\n                                    </NavLink>\r\n                                </div>\r\n                                <div className={styles.headerNavLeftMargin}>\r\n                                    <NavLink\r\n                                        to=\"/brainstorm\"\r\n                                        className={({ isActive }) => (isActive ? styles.headerNavPageLinkActive : styles.headerNavPageLink)}\r\n                                    >\r\n                                        {t(\"header.brainstorm\")}\r\n                                    </NavLink>\r\n                                </div>\r\n                                {simply && (\r\n                                    <div className={styles.headerNavLeftMargin}>\r\n                                        <NavLink\r\n                                            to=\"/simply\"\r\n                                            className={({ isActive }) => (isActive ? styles.headerNavPageLinkActive : styles.headerNavPageLink)}\r\n                                        >\r\n                                            {t(\"header.simply\")}\r\n                                        </NavLink>\r\n                                    </div>\r\n                                )}\r\n                                <div className={styles.headerNavLeftMargin}>\r\n                                    <NavLink\r\n                                        to={\"/bot/\" + title[0]}\r\n                                        className={({ isActive }) => (isActive ? styles.headerNavPageLinkActive : styles.headerNavPageLink)}\r\n                                    >\r\n                                        {title[1]}\r\n                                    </NavLink>\r\n                                </div>\r\n                            </div>\r\n                            <div className={styles.SettingsDrawer}>\r\n                                <SettingsDrawer\r\n                                    defaultlang={language_pref}\r\n                                    onLanguageSelectionChanged={onLanguageSelectionChanged}\r\n                                    version={config.version}\r\n                                    commit={config.commit}\r\n                                    fontscale={fontscaling}\r\n                                    setFontscale={onFontscaleChange}\r\n                                    isLight={isLight}\r\n                                    setTheme={onThemeChange}\r\n                                    defaultLLM={llm_pref}\r\n                                    onLLMSelectionChanged={onLLMSelectionChanged}\r\n                                    llmOptions={models}\r\n                                    currentLLM={LLM}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </header>\r\n                    <Outlet />\r\n\r\n                    <footer className={styles.footer} role={\"banner\"}>\r\n                        <div>\r\n                            Landeshauptstadt München <br />\r\n                            RIT/it@M KICC <br />\r\n                        </div>\r\n                        <div className={styles.headerNavRightMargin}>\r\n                            <TermsOfUseDialog defaultOpen={!termsofuseread} onAccept={onAcceptTermsOfUse}></TermsOfUseDialog>\r\n                        </div>\r\n                    </footer>\r\n                </div>\r\n            </LightContext.Provider>\r\n        </FluentProvider>\r\n    );\r\n};\r\n\r\nexport default Layout;\r\n","import { Tooltip } from \"@fluentui/react-components\";\r\nimport { BrainCircuit24Regular } from \"@fluentui/react-icons\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nexport const AnswerIcon = () => {\r\n    const { t, i18n } = useTranslation();\r\n    return (\r\n        <Tooltip content={t(\"components.answericon.label\")} relationship=\"description\" positioning=\"above\">\r\n            <BrainCircuit24Regular aria-hidden=\"true\" aria-label={t(\"components.answericon.label\")} />\r\n        </Tooltip>\r\n    );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport styles from \"./Mermaid.module.css\";\r\nimport { ArrowDownload24Regular } from \"@fluentui/react-icons\";\r\nimport { Button, Tooltip } from \"@fluentui/react-components\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport mermaid, { MermaidConfig } from \"mermaid\";\r\nexport interface MermaidProps {\r\n    text: string;\r\n    darkTheme: boolean;\r\n}\r\n\r\nexport const Mermaid: React.FC<MermaidProps> = ({ text, darkTheme }) => {\r\n    const [diagram, setDiagram] = useState<string | boolean>(true);\r\n    const [id, setID] = useState<string>(\"\");\r\n    const { t } = useTranslation();\r\n\r\n    useEffect(() => {\r\n        const render = async () => {\r\n            // Generate a random ID for Mermaid to use.\r\n            const id = `mermaid-svg-${Math.round(Math.random() * 10000000)}`;\r\n            setID(id);\r\n\r\n            mermaid.initialize({\r\n                startOnLoad: false,\r\n                theme: darkTheme ? \"dark\" : \"default\",\r\n                securityLevel: \"loose\",\r\n                suppressErrorRendering: true\r\n            } as MermaidConfig);\r\n            // Confirm the diagram is valid before rendering since it could be invalid\r\n            // while streaming, or if the LLM \"hallucinates\" an invalid diagram.\r\n            text = text.replaceAll(\"`\", \"\");\r\n            let validMermaid = await mermaid.parse(text, { suppressErrors: true });\r\n            if (validMermaid) {\r\n                const { svg } = await mermaid.render(id, text).then(\r\n                    value => value,\r\n                    _ => {\r\n                        return { svg: undefined };\r\n                    }\r\n                );\r\n                if (svg) {\r\n                    const svgImage = new DOMParser().parseFromString(svg, \"text/html\").body.firstElementChild;\r\n                    if (svgImage) {\r\n                        svgImage.setAttribute(\"width\", \"700px\");\r\n                        svgImage.setAttribute(\"max-width\", \"100%\"); //TODO Besser auf die größe des Übergeordneten Containers skalieren\r\n                        svgImage.setAttribute(\"height\", \"100%\");\r\n                    }\r\n                    if (svgImage) setDiagram(svgImage.outerHTML);\r\n                    else setDiagram(false);\r\n                } else {\r\n                    document.querySelectorAll(`[id=${id}`).forEach(el => el.remove());\r\n                    setDiagram(false);\r\n                }\r\n            } else {\r\n                setDiagram(false);\r\n            }\r\n            //remove error elements\r\n        };\r\n        render();\r\n    }, [text]);\r\n\r\n    const download = () => {\r\n        const svgElement = document.getElementById(id);\r\n\r\n        if (svgElement) {\r\n            const base64doc = btoa(unescape(encodeURIComponent(svgElement.outerHTML)));\r\n            const a = document.createElement(\"a\");\r\n            const e = new MouseEvent(\"click\");\r\n\r\n            a.download = \"diagram.svg\";\r\n            a.href = \"data:text/html;base64,\" + base64doc;\r\n            a.dispatchEvent(e);\r\n        }\r\n    };\r\n\r\n    if (diagram === true) {\r\n        return <p className=\"...\">{t(\"components.mermaid.render\")}</p>;\r\n    } else if (diagram === false) {\r\n        return <p className=\"...\">{t(\"components.mermaid.error\")}</p>;\r\n    } else {\r\n        return (\r\n            <div className={styles.diagramContainer}>\r\n                <div dangerouslySetInnerHTML={{ __html: diagram ?? \"\" }}></div>\r\n                <div className={styles.downloadContainer}>\r\n                    mermaid\r\n                    <Tooltip content={t(\"components.mermaid.download\")} relationship=\"description\" positioning=\"above\">\r\n                        <Button\r\n                            appearance=\"subtle\"\r\n                            aria-label={t(\"components.mermaid.download\")}\r\n                            icon={<ArrowDownload24Regular className={styles.iconRightMargin} />}\r\n                            onClick={() => download()}\r\n                            size=\"large\"\r\n                        ></Button>\r\n                    </Tooltip>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n","// @ts-nocheck\r\nimport { IconButton } from \"@fluentui/react\";\r\nimport { ClassAttributes, HTMLAttributes, useState, useEffect } from \"react\";\r\nimport { ExtraProps } from \"react-markdown\";\r\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\r\nimport { dark, duotoneLight } from \"react-syntax-highlighter/dist/esm/styles/prism\";\r\nimport styles from \"./CodeBlockRenderer.module.css\";\r\nimport { Mermaid, MermaidProps } from \"./Mermaid\";\r\nimport { STORAGE_KEYS } from \"../../pages/layout/LayoutHelper\";\r\n\r\nexport default function CodeBlockRenderer(props: ClassAttributes<HTMLElement> & HTMLAttributes<HTMLElement> & ExtraProps) {\r\n    const { children, className, node, ...rest } = props;\r\n    const match = /language-(\\w+)/.exec(className || \"\");\r\n    const [copied, setCopied] = useState<boolean>(false);\r\n    const [icon, setIcon] = useState<string>(\"Copy\");\r\n    const ligth_theme_pref =\r\n        localStorage.getItem(STORAGE_KEYS.SETTINGS_IS_LIGHT_THEME) === null ? true : localStorage.getItem(STORAGE_KEYS.SETTINGS_IS_LIGHT_THEME) == \"true\";\r\n\r\n    const oncopy = () => {\r\n        setCopied(true);\r\n        navigator.clipboard.writeText(children);\r\n        setIcon(\"Checkmark\");\r\n        setTimeout(() => {\r\n            setIcon(\"Copy\");\r\n            setCopied(false);\r\n        }, 1000);\r\n    };\r\n\r\n    const language = match ? match[1] : \"\";\r\n    const text = String(children);\r\n    let diagrams = [\"flowchart\", \"classDiagram\", \"sequenceDiagram\", \"stateDiagram\", \"pie\", \"mindmap\", \"journey\", \"erDiagram\", \"gantt\"];\r\n    //check if mermaid diagramm is at the start\r\n    if (language === \"mermaid\" || (language === \"\" && text.length > 30 && diagrams.some(type => text.indexOf(type) !== -1))) {\r\n        const mermaidProps: MermaidProps = {\r\n            text: text,\r\n            darkTheme: !ligth_theme_pref\r\n        };\r\n\r\n        return <Mermaid {...mermaidProps} />;\r\n    } else {\r\n        const isMultiline = String(children).includes(\"\\n\");\r\n        return isMultiline ? (\r\n            <div className={styles.codeContainer}>\r\n                <SyntaxHighlighter\r\n                    {...rest}\r\n                    children={String(children).replace(/\\n$/, \"\")}\r\n                    style={ligth_theme_pref ? duotoneLight : dark}\r\n                    language={language}\r\n                    PreTag=\"div\"\r\n                    showLineNumbers={false}\r\n                    wrapLongLines={true}\r\n                    codeTagProps={{ style: { fontSize: \"var(--fontSizeBase400)\" } }}\r\n                />\r\n                <div className={styles.copyContainer}>\r\n                    {language}\r\n                    <IconButton\r\n                        style={{ color: \"black\" }}\r\n                        iconProps={{ iconName: icon }}\r\n                        onClick={() => {\r\n                            oncopy();\r\n                        }}\r\n                    ></IconButton>\r\n                </div>\r\n            </div>\r\n        ) : (\r\n            <code {...rest} className={className}>\r\n                {children}\r\n            </code>\r\n        );\r\n    }\r\n}\r\n","// Context.js\r\nimport React, { Dispatch, SetStateAction, useContext, useState } from \"react\";\r\nimport { QuickPrompt } from \"./QuickPrompt\";\r\n\r\ninterface IQuickPromptProvider {\r\n    quickPrompts: QuickPrompt[];\r\n    setQuickPrompts: Dispatch<SetStateAction<QuickPrompt[]>>;\r\n}\r\n\r\nexport const QuickPromptContext = React.createContext<IQuickPromptProvider>({ quickPrompts: [], setQuickPrompts: () => {} });\r\n\r\nexport const QuickPromptProvider = (props: React.PropsWithChildren<{}>) => {\r\n    const [quickPrompts, setQuickPrompts] = useState<QuickPrompt[]>([]);\r\n\r\n    return <QuickPromptContext.Provider value={{ quickPrompts: quickPrompts, setQuickPrompts: setQuickPrompts }}>{props.children}</QuickPromptContext.Provider>;\r\n};\r\n","import { Stack } from \"@fluentui/react\";\r\nimport { Button, Divider, Tooltip } from \"@fluentui/react-components\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport styles from \"./QuickPromptList.module.css\";\r\nimport { QuickPromptContext } from \"./QuickPromptProvider\";\r\nimport { useContext } from \"react\";\r\n\r\ninterface Props {\r\n    setQuestion: (question: string) => void;\r\n}\r\n\r\nexport const QuickPromptList = ({ setQuestion }: Props) => {\r\n    const { t } = useTranslation();\r\n    const { quickPrompts } = useContext(QuickPromptContext);\r\n    return quickPrompts.length > 0 ? (\r\n        <Stack>\r\n            <Divider className={styles.divider}>\r\n                <b>{t(\"components.quickprompt.name\")}</b>\r\n            </Divider>\r\n            <div className={styles.buttons}>\r\n                {quickPrompts.map(quickPrompt => (\r\n                    <Tooltip content={quickPrompt.tooltip} relationship=\"description\" positioning=\"above\" key={quickPrompt.label}>\r\n                        <Button onClick={() => setQuestion(quickPrompt.prompt)} appearance=\"subtle\" aria-label={quickPrompt.prompt} className={styles.item}>\r\n                            {quickPrompt.label}\r\n                        </Button>\r\n                    </Tooltip>\r\n                ))}\r\n            </div>\r\n        </Stack>\r\n    ) : (\r\n        <></>\r\n    );\r\n};\r\n","import { useState } from \"react\";\r\nimport { Stack } from \"@fluentui/react\";\r\n\r\nimport styles from \"./Answer.module.css\";\r\n\r\nimport { AskResponse } from \"../../api\";\r\nimport { AnswerIcon } from \"./AnswerIcon\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport Markdown from \"react-markdown\";\r\nimport remarkGfm from \"remark-gfm\";\r\nimport rehypeRaw from \"rehype-raw\";\r\nimport CodeBlockRenderer from \"../CodeBlockRenderer/CodeBlockRenderer\";\r\nimport { ArrowSync24Regular, CheckmarkSquare24Regular, ContentView24Regular, Copy24Regular } from \"@fluentui/react-icons\";\r\nimport { Button, Tooltip } from \"@fluentui/react-components\";\r\nimport { QuickPromptList } from \"../QuickPrompt/QuickPromptList\";\r\n\r\ninterface Props {\r\n    answer: AskResponse;\r\n    onRegenerateResponseClicked?: () => void;\r\n    setQuestion: (question: string) => void;\r\n}\r\n\r\nexport const Answer = ({ answer, onRegenerateResponseClicked, setQuestion }: Props) => {\r\n    const { t } = useTranslation();\r\n\r\n    const [copied, setCopied] = useState<boolean>(false);\r\n    const [formatted, setFormatted] = useState<boolean>(true);\r\n    const [ref, setRef] = useState<HTMLElement | null>();\r\n\r\n    const oncopy = () => {\r\n        setCopied(true);\r\n        navigator.clipboard.writeText(answer.answer);\r\n        setTimeout(() => {\r\n            setCopied(false);\r\n        }, 1000);\r\n    };\r\n    return (\r\n        <Stack className={styles.answerContainer} verticalAlign=\"space-between\">\r\n            <Stack.Item>\r\n                <Stack horizontal horizontalAlign=\"space-between\">\r\n                    <AnswerIcon aria-hidden />\r\n                    <div>\r\n                        <Tooltip content={t(\"components.answer.copy\")} relationship=\"description\" positioning={{ target: ref }}>\r\n                            <Button\r\n                                ref={setRef}\r\n                                appearance=\"subtle\"\r\n                                aria-label={t(\"components.answer.copy\")}\r\n                                icon={\r\n                                    !copied ? (\r\n                                        <Copy24Regular className={styles.iconRightMargin} />\r\n                                    ) : (\r\n                                        <CheckmarkSquare24Regular className={styles.iconRightMargin} />\r\n                                    )\r\n                                }\r\n                                size=\"large\"\r\n                                onClick={() => {\r\n                                    oncopy();\r\n                                }}\r\n                            ></Button>\r\n                        </Tooltip>\r\n\r\n                        <Tooltip content={t(\"components.answer.unformat\")} relationship=\"description\" positioning=\"above\">\r\n                            <Button\r\n                                appearance=\"subtle\"\r\n                                aria-label={t(\"components.answer.unformat\")}\r\n                                icon={<ContentView24Regular className={styles.iconRightMargin} />}\r\n                                onClick={() => setFormatted(!formatted)}\r\n                                size=\"large\"\r\n                            ></Button>\r\n                        </Tooltip>\r\n\r\n                        {onRegenerateResponseClicked && (\r\n                            <Tooltip content={t(\"components.answer.regenerate\")} relationship=\"description\" positioning=\"above\">\r\n                                <Button\r\n                                    appearance=\"subtle\"\r\n                                    aria-label={t(\"components.answer.regenerate\")}\r\n                                    icon={<ArrowSync24Regular className={styles.iconRightMargin} />}\r\n                                    onClick={() => onRegenerateResponseClicked()}\r\n                                    size=\"large\"\r\n                                ></Button>\r\n                            </Tooltip>\r\n                        )}\r\n                    </div>\r\n                </Stack>\r\n            </Stack.Item>\r\n\r\n            <Stack.Item className={styles.growItem} grow>\r\n                {formatted && (\r\n                    <Markdown\r\n                        className={styles.answerText}\r\n                        remarkPlugins={[remarkGfm]}\r\n                        rehypePlugins={[rehypeRaw]}\r\n                        components={{\r\n                            code: CodeBlockRenderer\r\n                        }}\r\n                    >\r\n                        {answer.answer}\r\n                    </Markdown>\r\n                )}\r\n                {!formatted && (\r\n                    <div className={styles.unformattedAnswer} tabIndex={0}>\r\n                        {answer.answer}\r\n                    </div>\r\n                )}\r\n            </Stack.Item>\r\n            {onRegenerateResponseClicked && (\r\n                <Stack.Item>\r\n                    <QuickPromptList setQuestion={question => setQuestion(question)} />\r\n                </Stack.Item>\r\n            )}\r\n        </Stack>\r\n    );\r\n};\r\n","import { Stack } from \"@fluentui/react\";\r\nimport { animated, useSpring } from \"@react-spring/web\";\r\n\r\nimport styles from \"./Answer.module.css\";\r\nimport { AnswerIcon } from \"./AnswerIcon\";\r\n\r\ninterface Props {\r\n    text: string;\r\n}\r\n\r\nexport const AnswerLoading = ({ text }: Props) => {\r\n    const animatedStyles = useSpring({\r\n        from: { opacity: 0 },\r\n        to: { opacity: 1 }\r\n    });\r\n\r\n    return (\r\n        <animated.div style={{ ...animatedStyles }}>\r\n            <Stack className={styles.answerContainer} verticalAlign=\"space-between\">\r\n                <AnswerIcon />\r\n                <Stack.Item className={styles.growItem} grow>\r\n                    <p className={styles.answerText}>\r\n                        {text}\r\n                        <span className={styles.loadingdots} />\r\n                    </p>\r\n                </Stack.Item>\r\n            </Stack>\r\n        </animated.div>\r\n    );\r\n};\r\n","import { Stack, PrimaryButton } from \"@fluentui/react\";\r\nimport { ErrorCircle24Regular } from \"@fluentui/react-icons\";\r\n\r\nimport styles from \"./Answer.module.css\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\ninterface Props {\r\n    error: string;\r\n    onRetry: () => void;\r\n}\r\n\r\nexport const AnswerError = ({ error, onRetry }: Props) => {\r\n    const { t } = useTranslation();\r\n    return (\r\n        <Stack className={styles.answerContainer} verticalAlign=\"space-between\">\r\n            <ErrorCircle24Regular aria-hidden=\"true\" aria-label=\"Error icon\" primaryFill=\"red\" />\r\n\r\n            <Stack.Item className={styles.growItem} grow>\r\n                <p className={styles.answerText}>{error}</p>\r\n            </Stack.Item>\r\n\r\n            <PrimaryButton className={styles.retryButton} onClick={onRetry} text={t(\"components.answererror.retry\")} />\r\n        </Stack>\r\n    );\r\n};\r\n","import { Stack } from \"@fluentui/react\";\r\nimport { Button, Textarea, TextareaOnChangeData, Tooltip } from \"@fluentui/react-components\";\r\nimport { Send28Filled } from \"@fluentui/react-icons\";\r\n\r\nimport styles from \"./QuestionInput.module.css\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useContext, useEffect, useState } from \"react\";\r\nimport { LLMContext } from \"../LLMSelector/LLMContextProvider\";\r\n\r\ninterface Props {\r\n    onSend: (question: string) => void;\r\n    disabled: boolean;\r\n    placeholder?: string;\r\n    clearOnSend?: boolean;\r\n    tokens_used: number;\r\n    token_limit_tracking?: boolean;\r\n    question: string;\r\n    setQuestion: (question: string) => void;\r\n}\r\n\r\nexport const QuestionInput = ({ onSend, disabled, placeholder, clearOnSend, tokens_used, token_limit_tracking = true, question, setQuestion }: Props) => {\r\n    const { t, i18n } = useTranslation();\r\n    const { LLM } = useContext(LLMContext);\r\n    const [description, setDescription] = useState<string>(\"0\");\r\n\r\n    useEffect(() => {\r\n        let actual = countWords(question) + tokens_used;\r\n        let text;\r\n        if (token_limit_tracking) {\r\n            text = `${actual}/ ${LLM.max_input_tokens} ${t(\"components.questioninput.tokensused\")}`;\r\n            if (actual > LLM.max_input_tokens) text += `${t(\"components.questioninput.limit\")}`;\r\n        } else text = `${actual} ${t(\"components.questioninput.tokensused\")}`;\r\n        setDescription(text);\r\n    }, [tokens_used, LLM.max_input_tokens]);\r\n\r\n    const sendQuestion = () => {\r\n        if (disabled || !question.trim()) {\r\n            return;\r\n        }\r\n\r\n        onSend(question);\r\n\r\n        if (clearOnSend) {\r\n            setQuestion(\"\");\r\n        }\r\n    };\r\n\r\n    const onEnterPress = (ev: React.KeyboardEvent<Element>) => {\r\n        if (ev.key === \"Enter\" && !ev.shiftKey) {\r\n            ev.preventDefault();\r\n            sendQuestion();\r\n        }\r\n    };\r\n\r\n    function countWords(str: string) {\r\n        return str.trim().split(/\\s+/).length;\r\n    }\r\n\r\n    const onQuestionChange = (_ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: TextareaOnChangeData) => {\r\n        if (!newValue?.value) {\r\n            setQuestion(\"\");\r\n        } else {\r\n            setQuestion(newValue.value);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Stack horizontal className={styles.questionInputContainer}>\r\n            <Textarea\r\n                textarea={styles.questionInputTextArea}\r\n                placeholder={placeholder}\r\n                resize=\"vertical\"\r\n                value={question}\r\n                size=\"large\"\r\n                onChange={onQuestionChange}\r\n                onKeyDown={onEnterPress}\r\n            />\r\n            <div className={styles.questionInputContainerFooter}>\r\n                {tokens_used == 0 ? <div> </div> : <div>{description}</div>}\r\n                <div className={styles.errorhint}>{t(\"components.questioninput.errorhint\")}</div>\r\n                <div className={styles.questionInputButtonsContainer}>\r\n                    <Tooltip content={placeholder || \"\"} relationship=\"label\">\r\n                        <Button size=\"large\" appearance=\"subtle\" icon={<Send28Filled />} disabled={disabled || !question.trim()} onClick={sendQuestion} />\r\n                    </Tooltip>\r\n                </div>\r\n            </div>\r\n        </Stack>\r\n    );\r\n};\r\n","import styles from \"./Example.module.css\";\r\n\r\ninterface Props {\r\n    text: string;\r\n    value: string;\r\n    system?: string;\r\n    onClick: (value: string, system?: string) => void;\r\n    ariaLabel: string;\r\n}\r\n\r\nexport const Example = ({ text, value, system, onClick, ariaLabel }: Props) => {\r\n    return (\r\n        <div className={styles.example} aria-description={ariaLabel} onClick={() => onClick(value, system)}>\r\n            <p className={styles.exampleText}>{text}</p>\r\n        </div>\r\n    );\r\n};\r\n","import { useTranslation } from \"react-i18next\";\r\nimport { Example } from \"./Example\";\r\n\r\nimport styles from \"./Example.module.css\";\r\n\r\nexport type ExampleModel = {\r\n    text: string;\r\n    value: string;\r\n    system?: string;\r\n};\r\n\r\ninterface Props {\r\n    examples: ExampleModel[];\r\n    onExampleClicked: (value: string, system?: string) => void;\r\n}\r\n\r\nexport const ExampleList = ({ examples, onExampleClicked }: Props) => {\r\n    const { t } = useTranslation();\r\n    return (\r\n        <ul className={styles.examplesNavList} aria-description={t(\"common.examples\")}>\r\n            {examples.map((x, i) => (\r\n                <li key={i} tabIndex={0}>\r\n                    <Example\r\n                        text={x.text}\r\n                        system={x.system}\r\n                        value={x.value}\r\n                        onClick={onExampleClicked}\r\n                        ariaLabel={t(\"components.example.label\") + \" \" + (i + 1).toString()}\r\n                    />\r\n                </li>\r\n            ))}\r\n        </ul>\r\n    );\r\n};\r\n","import { ChatAdd24Regular } from \"@fluentui/react-icons\";\r\nimport { Button, Tooltip } from \"@fluentui/react-components\";\r\n\r\nimport styles from \"./ClearChatButton.module.css\";\r\nimport { useTranslation } from \"react-i18next\";\r\ninterface Props {\r\n    onClick: () => void;\r\n    disabled?: boolean;\r\n}\r\n\r\nexport const ClearChatButton = ({ disabled, onClick }: Props) => {\r\n    const { t } = useTranslation();\r\n    return (\r\n        <Tooltip content={t(\"common.clear_chat\")} relationship=\"description\" positioning=\"below\">\r\n            <Button\r\n                appearance=\"primary\"\r\n                aria-label={t(\"common.clear_chat\")}\r\n                icon={<ChatAdd24Regular className={styles.iconRightMargin} />}\r\n                disabled={disabled}\r\n                onClick={onClick}\r\n            >\r\n                {t(\"common.clear_chat\")}\r\n            </Button>\r\n        </Tooltip>\r\n    );\r\n};\r\n","import { ReactNode } from \"react\";\r\nimport styles from \"./Sidebar.module.css\";\r\ninterface Props {\r\n    actions: ReactNode;\r\n    content: ReactNode;\r\n}\r\n\r\nexport const Sidebar = ({ actions, content }: Props) => {\r\n    return (\r\n        <div className={styles.drawer}>\r\n            <div className={styles.header} role=\"heading\" aria-level={3}>\r\n                {actions}\r\n            </div>\r\n            <div className={styles.drawerContent}>{content}</div>\r\n        </div>\r\n    );\r\n};\r\n","import { Dismiss24Regular } from \"@fluentui/react-icons\";\r\nimport { Button, Slider, Label, useId, SliderProps, Field, InfoLabel, Tooltip, Textarea, TextareaOnChangeData } from \"@fluentui/react-components\";\r\n\r\nimport styles from \"./ChatsettingsDrawer.module.css\";\r\nimport { ReactNode, useContext } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { LLMContext } from \"../LLMSelector/LLMContextProvider\";\r\nimport { Sidebar } from \"../Sidebar/Sidebar\";\r\ninterface Props {\r\n    temperature: number;\r\n    setTemperature: (temp: number) => void;\r\n    max_output_tokens: number;\r\n    setMaxTokens: (maxTokens: number) => void;\r\n    systemPrompt: string;\r\n    setSystemPrompt: (systemPrompt: string) => void;\r\n    actions: ReactNode;\r\n    content: ReactNode;\r\n}\r\n\r\nexport const ChatsettingsDrawer = ({\r\n    temperature,\r\n    setTemperature,\r\n    max_output_tokens,\r\n    setMaxTokens,\r\n    systemPrompt,\r\n    setSystemPrompt,\r\n    actions,\r\n    content\r\n}: Props) => {\r\n    const { t, i18n } = useTranslation();\r\n    const { LLM } = useContext(LLMContext);\r\n\r\n    const temperature_headerID = useId(\"header-temperature\");\r\n    const temperatureID = useId(\"input-temperature\");\r\n    const max_tokens_headerID = useId(\"header-max_tokens\");\r\n    const max_tokensID = useId(\"input-max_tokens\");\r\n\r\n    const min_max_tokens = 10;\r\n    const max_max_tokens = LLM.max_output_tokens;\r\n    const min_temp = 0;\r\n    const max_temp = 1;\r\n\r\n    const onTemperatureChange: SliderProps[\"onChange\"] = (_, data) => setTemperature(data.value);\r\n    const onMaxtokensChange: SliderProps[\"onChange\"] = (_, data) => setMaxTokens(data.value);\r\n\r\n    const onSytemPromptChange = (_ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: TextareaOnChangeData) => {\r\n        if (newValue?.value) setSystemPrompt(newValue.value);\r\n        else setSystemPrompt(\"\");\r\n    };\r\n\r\n    const onClearSystemPrompt = () => {\r\n        setSystemPrompt(\"\");\r\n    };\r\n    const sidebar_action = <>{actions}</>;\r\n    const sidebar_content = (\r\n        <>\r\n            <>{content}</>\r\n            <div className={styles.header} role=\"heading\" aria-level={3}>\r\n                <div className={styles.systemPromptHeadingContainer}>\r\n                    <InfoLabel\r\n                        info={\r\n                            <div>\r\n                                <i>{t(\"components.chattsettingsdrawer.system_prompt\")}s </i>\r\n                                {t(\"components.chattsettingsdrawer.system_prompt_info\")}\r\n                            </div>\r\n                        }\r\n                    >\r\n                        {t(\"components.chattsettingsdrawer.system_prompt\")}\r\n                    </InfoLabel>\r\n                    <Tooltip content={t(\"components.chattsettingsdrawer.system_prompt_clear\")} relationship=\"description\" positioning=\"below\">\r\n                        <Button\r\n                            aria-label={t(\"components.chattsettingsdrawer.system_prompt_clear\")}\r\n                            icon={<Dismiss24Regular />}\r\n                            appearance=\"subtle\"\r\n                            onClick={onClearSystemPrompt}\r\n                            size=\"small\"\r\n                        ></Button>\r\n                    </Tooltip>\r\n                </div>\r\n            </div>\r\n\r\n            <div className={styles.bodyContainer}>\r\n                <div>\r\n                    <Field size=\"large\">\r\n                        <Textarea\r\n                            textarea={styles.systempromptTextArea}\r\n                            placeholder={t(\"components.chattsettingsdrawer.system_prompt\")}\r\n                            resize=\"vertical\"\r\n                            value={systemPrompt}\r\n                            size=\"large\"\r\n                            rows={7}\r\n                            onChange={onSytemPromptChange}\r\n                        />\r\n                    </Field>\r\n                </div>\r\n            </div>\r\n\r\n            <div className={styles.header} role=\"heading\" aria-level={3} id={temperature_headerID}>\r\n                <InfoLabel\r\n                    info={\r\n                        <div>\r\n                            {t(\"components.chattsettingsdrawer.temperature_article\")} <i>{t(\"components.chattsettingsdrawer.temperature\")}</i>{\" \"}\r\n                            {t(\"components.chattsettingsdrawer.temperature_info\")}\r\n                        </div>\r\n                    }\r\n                >\r\n                    {t(\"components.chattsettingsdrawer.temperature\")}\r\n                </InfoLabel>\r\n            </div>\r\n            <div className={styles.bodyContainer}>\r\n                <div className={styles.verticalContainer}>\r\n                    <Label htmlFor={temperatureID} aria-hidden size=\"medium\" className={styles.temperatureLabel}>\r\n                        {\" \"}\r\n                        {t(\"components.chattsettingsdrawer.min_temperature\")}\r\n                    </Label>\r\n                    <Slider\r\n                        min={min_temp}\r\n                        max={max_temp}\r\n                        defaultValue={2}\r\n                        onChange={onTemperatureChange}\r\n                        aria-valuetext={t(\"components.chattsettingsdrawer.temperature\") + ` ist ${temperature}`}\r\n                        value={temperature}\r\n                        step={0.05}\r\n                        aria-labelledby={temperature_headerID}\r\n                        id={temperatureID}\r\n                    />\r\n                    <Label htmlFor={temperatureID} className={styles.temperatureLabel} aria-hidden size=\"medium\">\r\n                        {\" \"}\r\n                        {t(\"components.chattsettingsdrawer.max_temperatur\")}\r\n                    </Label>\r\n                    <Label htmlFor={temperatureID} aria-hidden>\r\n                        {temperature}\r\n                    </Label>\r\n                </div>\r\n            </div>\r\n\r\n            <div className={styles.header} role=\"heading\" aria-level={3} id={max_tokens_headerID}>\r\n                <InfoLabel info={<div>{t(\"components.chattsettingsdrawer.max_lenght_info\")}</div>}>{t(\"components.chattsettingsdrawer.max_lenght\")}</InfoLabel>\r\n            </div>\r\n\r\n            <div className={styles.bodyContainer}>\r\n                <div className={styles.verticalContainer}>\r\n                    <Slider\r\n                        min={min_max_tokens}\r\n                        max={max_max_tokens}\r\n                        defaultValue={20}\r\n                        onChange={onMaxtokensChange}\r\n                        aria-valuetext={t(\"components.chattsettingsdrawer.max_lenght\") + ` ist ${max_tokensID}`}\r\n                        value={max_output_tokens}\r\n                        aria-labelledby={max_tokens_headerID}\r\n                        id={max_tokensID}\r\n                    />\r\n                    <br></br>\r\n                    <Label htmlFor={max_tokensID} aria-hidden>\r\n                        {max_output_tokens} Tokens\r\n                    </Label>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n    return (\r\n        <div>\r\n            <Sidebar actions={sidebar_action} content={sidebar_content}></Sidebar>\r\n        </div>\r\n    );\r\n};\r\n","import { Button, Menu, MenuItem, MenuList, MenuPopover, MenuTrigger, Tooltip } from \"@fluentui/react-components\";\r\nimport { Options24Regular } from \"@fluentui/react-icons\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport styles from \"./History.module.css\";\r\nimport { DBObject } from \"../../service/storage\";\r\n\r\ninterface Props {\r\n    allChats: DBObject<any, any>[];\r\n    currentActiveChatId: string | undefined;\r\n    onDeleteChat: (id: string) => void;\r\n    onChatNameChange: (id: string, newName: string) => void;\r\n    onFavChange: (id: string, fav: boolean) => void;\r\n    onSelect: (id: string) => void;\r\n}\r\nexport const History = ({ allChats, currentActiveChatId, onDeleteChat, onChatNameChange, onFavChange, onSelect }: Props) => {\r\n    const { t } = useTranslation();\r\n\r\n    const getCategory = (lastEdited: number, fav: boolean) => {\r\n        if (fav) return t(\"components.history.favourites\");\r\n        const today = new Date();\r\n        const lastEditedDate = new Date(lastEdited);\r\n        today.setHours(0, 0, 0, 0);\r\n        lastEditedDate.setHours(0, 0, 0, 0);\r\n        const diffTime = Math.abs(today.getTime() - lastEditedDate.getTime());\r\n        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\r\n        if (diffDays === 0) return t(\"components.history.today\");\r\n        if (diffDays === 1) return t(\"components.history.yesterday\");\r\n        if (diffDays <= 7) return t(\"components.history.sevendays\");\r\n        return t(\"components.history.older\");\r\n    };\r\n\r\n    const categorizedChats = allChats\r\n        .filter((chat: DBObject<any, any>) => chat.id)\r\n        .sort((a: DBObject<any, any>, b: DBObject<any, any>) => {\r\n            return (b._last_edited as number) - (a._last_edited as number);\r\n        })\r\n        .reduce((acc: { [key: string]: DBObject<any, any>[] }, chat: DBObject<any, any>) => {\r\n            const category = getCategory(chat._last_edited as number, chat.favorite ? chat.favorite : false);\r\n            if (!acc[category]) acc[category] = [];\r\n            acc[category].push(chat);\r\n            return acc;\r\n        }, {});\r\n    const sortedChats = Object.entries(categorizedChats).sort(([categoryA], [categoryB]) => {\r\n        if (categoryA === t(\"components.history.favourites\")) return -1;\r\n        if (categoryB === t(\"components.history.favourites\")) return 1;\r\n        return 0;\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <div className={styles.header} role=\"heading\" aria-level={3}>\r\n                <Tooltip content={t(\"components.history.saved_in_browser\")} relationship=\"description\" positioning=\"below\">\r\n                    <div>{t(\"components.history.history\")}</div>\r\n                </Tooltip>\r\n            </div>\r\n\r\n            <div className={styles.historyContent}>\r\n                {sortedChats.map(([category, chats]) => (\r\n                    <div key={category}>\r\n                        <div className={styles.header} role=\"heading\" aria-level={4}>\r\n                            {category}\r\n                        </div>\r\n                        {chats.map((chat: DBObject<any, any>, index: number) => (\r\n                            <div key={index}>\r\n                                <div className={styles.singlechatcontainer}>\r\n                                    <Tooltip\r\n                                        content={t(\"components.history.lastEdited\") + new Date(chat._last_edited as number).toString()}\r\n                                        relationship=\"description\"\r\n                                        positioning=\"below\"\r\n                                    >\r\n                                        <Button\r\n                                            className={styles.savedChatButton}\r\n                                            disabled={currentActiveChatId == chat.id}\r\n                                            onClick={() => onSelect(chat.id as string)}\r\n                                            size=\"large\"\r\n                                        >\r\n                                            {currentActiveChatId === chat.id ? \"🟢 \" : \"\"}\r\n                                            {chat.name}\r\n                                        </Button>\r\n                                    </Tooltip>\r\n                                    <Menu>\r\n                                        <MenuTrigger disableButtonEnhancement>\r\n                                            <Tooltip content={t(\"components.history.options\")} relationship=\"description\" positioning=\"below\">\r\n                                                <Button icon={<Options24Regular />} appearance=\"secondary\" size=\"large\" />\r\n                                            </Tooltip>\r\n                                        </MenuTrigger>\r\n                                        <MenuPopover>\r\n                                            <MenuList>\r\n                                                <MenuItem onClick={() => onDeleteChat(chat.id as string)} disabled={currentActiveChatId == chat.id}>\r\n                                                    {t(\"components.history.delete\")}\r\n                                                </MenuItem>\r\n                                                <MenuItem onClick={() => onChatNameChange(chat.id as string, chat.name as string)}>\r\n                                                    {t(\"components.history.rename\")}\r\n                                                </MenuItem>\r\n                                                {chat.favorite ? (\r\n                                                    <MenuItem onClick={() => onFavChange(chat.id as string, false)}>{t(\"components.history.unsave\")}</MenuItem>\r\n                                                ) : (\r\n                                                    <MenuItem onClick={() => onFavChange(chat.id as string, true)}>{t(\"components.history.save\")}</MenuItem>\r\n                                                )}\r\n                                            </MenuList>\r\n                                        </MenuPopover>\r\n                                    </Menu>\r\n                                </div>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\n\r\nconst useDebounce = (inputValue: string, delay: number = 500) => {\r\n    const [debouncedValue, setDebouncedValue] = useState(inputValue);\r\n    useEffect(() => {\r\n        const handler = setTimeout(() => {\r\n            setDebouncedValue(inputValue);\r\n        }, delay);\r\n        return () => {\r\n            clearTimeout(handler);\r\n        };\r\n    }, [inputValue, delay]);\r\n\r\n    return debouncedValue;\r\n};\r\nexport default useDebounce;\r\n","import { ReactNode } from \"react\";\r\nimport styles from \"./ChatLayout.module.css\";\r\nimport Markdown from \"react-markdown\";\r\nimport remarkGfm from \"remark-gfm\";\r\nimport rehypeRaw from \"rehype-raw\";\r\n\r\nexport type SidebarSizes = \"small\" | \"medium\" | \"large\" | \"full_width\";\r\n\r\ninterface Props {\r\n    sidebar: ReactNode;\r\n    examples: ReactNode;\r\n    answers: ReactNode;\r\n    input: ReactNode;\r\n    showExamples: boolean;\r\n    header: string;\r\n    header_as_markdown: boolean;\r\n    messages_description: string;\r\n    size: SidebarSizes;\r\n}\r\n\r\nexport const ChatLayout = ({ sidebar: sidebar, examples, answers, input, showExamples, header, header_as_markdown, messages_description, size }: Props) => {\r\n    const sidebarWidth = { small: \"200px\", medium: \"300px\", large: \"460px\", full_width: \"80%\" }[size];\r\n    return (\r\n        <div className={styles.container} style={{ \"--sidebarWidth\": sidebarWidth } as React.CSSProperties}>\r\n            <aside className={styles.sidebar}>{sidebar}</aside>\r\n            <div className={styles.chatRoot}>\r\n                <div className={styles.chatContainer}>\r\n                    {showExamples ? (\r\n                        <div className={styles.chatEmptyState} tabIndex={0}>\r\n                            {header_as_markdown ? (\r\n                                <div className={styles.chatEmptyStateSubtitleMarkdown}>\r\n                                    <Markdown className={styles.answerText} remarkPlugins={[remarkGfm]} rehypePlugins={[rehypeRaw]}>\r\n                                        {header}\r\n                                    </Markdown>\r\n                                </div>\r\n                            ) : (\r\n                                <h2 className={styles.chatEmptyStateSubtitle}> {header}</h2>\r\n                            )}\r\n                            {examples}\r\n                        </div>\r\n                    ) : (\r\n                        <ul className={styles.allChatMessages} aria-description={messages_description}>\r\n                            {answers}\r\n                        </ul>\r\n                    )}\r\n                    <div className={styles.chatInput}>{input}</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import { ReactNode } from \"react\";\r\nimport styles from \"./ChatTurnComponent.module.css\";\r\n\r\ninterface Props {\r\n    usermsg: ReactNode;\r\n    botmsg: ReactNode;\r\n    usermsglabel: string;\r\n    botmsglabel: string;\r\n}\r\n\r\nexport const ChatTurnComponent = ({ usermsg, botmsg, usermsglabel, botmsglabel }: Props) => {\r\n    return (\r\n        <div className={styles.chatMessageStream}>\r\n            <li className={styles.chatMessageUser} aria-description={usermsglabel}>\r\n                {usermsg}\r\n            </li>\r\n            <li className={styles.chatMessageGpt} aria-description={botmsglabel}>\r\n                {botmsg}\r\n            </li>\r\n        </div>\r\n    );\r\n};\r\n","import { Tooltip } from \"@fluentui/react-components\";\r\nimport { PersonChat24Regular } from \"@fluentui/react-icons\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nexport const ChatMessageIcon = () => {\r\n    const { t, i18n } = useTranslation();\r\n    return (\r\n        <Tooltip content={t(\"components.usericon.label\")} relationship=\"description\" positioning=\"above\">\r\n            <PersonChat24Regular aria-hidden=\"true\" aria-label={t(\"components.usericon.label\")} />\r\n        </Tooltip>\r\n    );\r\n};\r\n","import { Button, Tooltip } from \"@fluentui/react-components\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { DeleteArrowBackRegular } from \"@fluentui/react-icons\";\r\n\r\nimport styles from \"./UserChatMessage.module.css\";\r\n\r\ninterface Props {\r\n    onRollback: () => void;\r\n}\r\n\r\nexport const RollBackMessage = ({ onRollback }: Props) => {\r\n    const { t } = useTranslation();\r\n    return (\r\n        <Tooltip content={t(\"components.deleteMessage.label\")} relationship=\"description\" positioning=\"above\">\r\n            <Button\r\n                onClick={onRollback}\r\n                appearance=\"subtle\"\r\n                aria-label={t(\"components.deleteMessage.label\")}\r\n                icon={<DeleteArrowBackRegular className={styles.iconRightMargin} />}\r\n                size=\"large\"\r\n            />\r\n        </Tooltip>\r\n    );\r\n};\r\n","import styles from \"./UserChatMessage.module.css\";\r\nimport Markdown from \"react-markdown\";\r\nimport remarkGfm from \"remark-gfm\";\r\nimport rehypeRaw from \"rehype-raw\";\r\nimport CodeBlockRenderer from \"../CodeBlockRenderer/CodeBlockRenderer\";\r\nimport { ChatMessageIcon } from \"./ChatMessageIcon\";\r\nimport { Stack } from \"@fluentui/react\";\r\nimport { RollBackMessage } from \"./RollbackMessage\";\r\n\r\ninterface Props {\r\n    message: string;\r\n    onRollbackMessage: () => void;\r\n}\r\n\r\nexport const UserChatMessage = ({ message, onRollbackMessage: onRollbackMessage }: Props) => {\r\n    return (\r\n        <div className={styles.message}>\r\n            <Stack horizontal horizontalAlign=\"space-between\">\r\n                <ChatMessageIcon aria-hidden></ChatMessageIcon>\r\n                <RollBackMessage onRollback={onRollbackMessage} />\r\n            </Stack>\r\n            <Markdown\r\n                className={styles.answerText}\r\n                remarkPlugins={[remarkGfm]}\r\n                rehypePlugins={[rehypeRaw]}\r\n                components={{\r\n                    code: CodeBlockRenderer\r\n                }}\r\n            >\r\n                {message}\r\n            </Markdown>\r\n        </div>\r\n    );\r\n};\r\n","import { ReactNode, useEffect, useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { ChatTurnComponent } from \"../ChatTurnComponent/ChatTurnComponent\";\r\nimport { UserChatMessage } from \"../UserChatMessage\";\r\nimport { AnswerLoading } from \"../Answer/AnswerLoading\";\r\nimport { AnswerError } from \"../Answer/AnswerError\";\r\nimport { ChatMessage } from \"../../pages/chat/Chat\";\r\nimport { QuickPrompt } from \"../QuickPrompt/QuickPrompt\";\r\n\r\ninterface Props {\r\n    answers: ChatMessage[];\r\n    regularBotMsg: (answer: ChatMessage, index: number, quickPrompts?: QuickPrompt[]) => ReactNode;\r\n    onRollbackMessage: (message: string) => () => void;\r\n    isLoading: boolean;\r\n    error: unknown;\r\n    makeApiRequest: () => void;\r\n    chatMessageStreamEnd: React.RefObject<HTMLDivElement>;\r\n    lastQuestionRef: React.MutableRefObject<string>;\r\n}\r\n\r\nexport const AnswerList = ({ answers, regularBotMsg, onRollbackMessage, isLoading, error, makeApiRequest, chatMessageStreamEnd, lastQuestionRef }: Props) => {\r\n    const { t } = useTranslation();\r\n\r\n    const [answersComponent, setAnswersComponent] = useState<JSX.Element[]>([]);\r\n\r\n    useEffect(() => {\r\n        setAnswersComponent(\r\n            answers.map((answer, index) => (\r\n                <ChatTurnComponent\r\n                    key={index}\r\n                    usermsg={<UserChatMessage message={answer.user} onRollbackMessage={onRollbackMessage(answer.user)} />}\r\n                    usermsglabel={t(\"components.usericon.label\") + \" \" + (index + 1).toString()}\r\n                    botmsglabel={t(\"components.answericon.label\") + \" \" + (index + 1).toString()}\r\n                    botmsg={regularBotMsg(answer, index)}\r\n                ></ChatTurnComponent>\r\n            ))\r\n        );\r\n    }, [answers, isLoading]);\r\n\r\n    return (\r\n        <>\r\n            {answersComponent}\r\n            {isLoading || error ? (\r\n                <ChatTurnComponent\r\n                    usermsg={<UserChatMessage message={lastQuestionRef.current} onRollbackMessage={onRollbackMessage(lastQuestionRef.current)} />}\r\n                    usermsglabel={t(\"components.usericon.label\") + \" \" + (answers.length + 1).toString()}\r\n                    botmsglabel={t(\"components.answericon.label\") + \" \" + (answers.length + 1).toString()}\r\n                    botmsg={\r\n                        <>\r\n                            {isLoading && <AnswerLoading text={t(\"chat.answer_loading\")} />}\r\n                            {error ? <AnswerError error={error.toString()} onRetry={makeApiRequest} /> : null}\r\n                        </>\r\n                    }\r\n                ></ChatTurnComponent>\r\n            ) : (\r\n                <div></div>\r\n            )}\r\n            <div ref={chatMessageStreamEnd} />\r\n        </>\r\n    );\r\n};\r\n","import { useRef, useState, useEffect, useContext, useCallback } from \"react\";\r\nimport readNDJSONStream from \"ndjson-readablestream\";\r\n\r\nimport { chatApi, AskResponse, ChatRequest, ChatTurn, handleRedirect, Chunk, ChunkInfo, countTokensAPI, ChatResponse, createChatName } from \"../../api\";\r\nimport { Answer } from \"../../components/Answer\";\r\nimport { QuestionInput } from \"../../components/QuestionInput\";\r\nimport { ExampleList, ExampleModel } from \"../../components/Example\";\r\nimport { ClearChatButton } from \"../../components/ClearChatButton\";\r\nimport { LanguageContext } from \"../../components/LanguageSelector/LanguageContextProvider\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { ChatsettingsDrawer } from \"../../components/ChatsettingsDrawer\";\r\nimport { History } from \"../../components/History/History\";\r\nimport useDebounce from \"../../hooks/debouncehook\";\r\nimport { LLMContext } from \"../../components/LLMSelector/LLMContextProvider\";\r\nimport { ChatLayout } from \"../../components/ChatLayout/ChatLayout\";\r\nimport { CHAT_STORE } from \"../../constants\";\r\nimport { DBMessage, DBObject, StorageService } from \"../../service/storage\";\r\nimport { AnswerList } from \"../../components/AnswerList/AnswerList\";\r\nimport { QuickPromptContext } from \"../../components/QuickPrompt/QuickPromptProvider\";\r\n\r\nexport type ChatMessage = DBMessage<ChatResponse>;\r\n\r\nexport interface ChatOptions {\r\n    system: string;\r\n    maxTokens: number;\r\n    temperature: number;\r\n}\r\n\r\nconst CHAT_EXAMPLES: ExampleModel[] = [\r\n    {\r\n        text: \"Du bist König Ludwig II. von Bayern. Schreibe einen Brief an alle Mitarbeiter*innen der Stadtverwaltung München.\",\r\n        value: \"Du bist König Ludwig II. von Bayern. Schreibe einen Brief an alle Mitarbeiter*innen der Stadtverwaltung München, indem Du Dich für die tolle Leistung bedankst und den Bau eines neuen Schlosses (noch beeindruckender als Neuschwanstein) in der Stadt München wünschst.\"\r\n    },\r\n    {\r\n        text: \"Stell dir vor, es ist schlechtes Wetter.\",\r\n        value: `Stell dir vor, es ist schlechtes Wetter und du sitzt lustlos im Büro. Alle möglichen Leute wollen etwas von Dir und Du spürst eine Stimmung, als ob irgendeine Kleinigkeit gleich eskalieren wird. Schreibe mir etwas, das dir in dieser Situation gut tut und dich aufmuntert.`\r\n    },\r\n    {\r\n        text: \"Motiviere, warum eine öffentliche Verwaltung Robot Process Automation nutzen sollte und warum nicht?\",\r\n        value: \"Motiviere, warum eine öffentliche Verwaltung Robot Process Automation nutzen sollte und warum nicht?\"\r\n    }\r\n];\r\n\r\nconst Chat = () => {\r\n    const { language } = useContext(LanguageContext);\r\n    const { LLM } = useContext(LLMContext);\r\n    const { t } = useTranslation();\r\n    const { quickPrompts, setQuickPrompts } = useContext(QuickPromptContext);\r\n\r\n    const lastQuestionRef = useRef<string>(\"\");\r\n    const chatMessageStreamEnd = useRef<HTMLDivElement | null>(null);\r\n\r\n    const [isLoading, setIsLoading] = useState<boolean>(false);\r\n    const [error, setError] = useState<unknown>();\r\n\r\n    const [answers, setAnswers] = useState<ChatMessage[]>([]);\r\n    const [question, setQuestion] = useState<string>(\"\");\r\n\r\n    const [temperature, setTemperature] = useState(0.7);\r\n    const [max_output_tokens, setMaxOutputTokens] = useState(4000);\r\n    const [systemPrompt, setSystemPrompt] = useState<string>(\"\");\r\n\r\n    const [active_chat, setActiveChat] = useState<string | undefined>(undefined);\r\n    const storageService: StorageService<ChatResponse, ChatOptions> = new StorageService<ChatResponse, ChatOptions>(CHAT_STORE, active_chat);\r\n\r\n    const debouncedSystemPrompt = useDebounce(systemPrompt, 1000);\r\n    const [systemPromptTokens, setSystemPromptTokens] = useState<number>(0);\r\n    const [totalTokens, setTotalTokens] = useState<number>(0);\r\n\r\n    const [allChats, setAllChats] = useState<DBObject<ChatResponse, ChatOptions>[]>([]);\r\n\r\n    const makeTokenCountRequest = useCallback(async () => {\r\n        if (debouncedSystemPrompt && debouncedSystemPrompt !== \"\") {\r\n            const response = await countTokensAPI({ text: debouncedSystemPrompt, model: LLM });\r\n            setSystemPromptTokens(response.count);\r\n        } else setSystemPromptTokens(0);\r\n    }, [debouncedSystemPrompt, LLM]);\r\n\r\n    useEffect(() => {\r\n        setQuickPrompts([\r\n            {\r\n                label: t(\"chat.quickprompts.shorter\", { lng: language }),\r\n                prompt: t(\"chat.quickprompts.shorter_prompt\", { lng: language }),\r\n                tooltip: t(\"chat.quickprompts.shorter_tooltip\", { lng: language })\r\n            },\r\n            {\r\n                label: t(\"chat.quickprompts.formal\", { lng: language }),\r\n                prompt: t(\"chat.quickprompts.formal_prompt\", { lng: language }),\r\n                tooltip: t(\"chat.quickprompts.formal_tooltip\", { lng: language })\r\n            },\r\n            {\r\n                label: t(\"chat.quickprompts.informal\", { lng: language }),\r\n                prompt: t(\"chat.quickprompts.informal_prompt\", { lng: language }),\r\n                tooltip: t(\"chat.quickprompts.informal_tooltip\", { lng: language })\r\n            },\r\n            {\r\n                label: t(\"chat.quickprompts.longer\", { lng: language }),\r\n                prompt: t(\"chat.quickprompts.longer_prompt\", { lng: language }),\r\n                tooltip: t(\"chat.quickprompts.longer_tooltip\", { lng: language })\r\n            }\r\n        ]);\r\n    }, [language]);\r\n\r\n    useEffect(() => {\r\n        makeTokenCountRequest();\r\n        if (max_output_tokens > LLM.max_output_tokens && LLM.max_output_tokens != 0) {\r\n            onMaxTokensChanged(LLM.max_output_tokens);\r\n        }\r\n    }, [debouncedSystemPrompt, LLM, makeTokenCountRequest]);\r\n\r\n    const fetchHistory = () => {\r\n        return storageService.getAll().then(chats => {\r\n            if (chats) setAllChats(chats);\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        setAnswers([]);\r\n        lastQuestionRef.current = \"\";\r\n        error && setError(undefined);\r\n        setIsLoading(true);\r\n\r\n        storageService\r\n            .getNewestChat()\r\n            .then(existingData => {\r\n                if (existingData) {\r\n                    // if the chat exists\r\n                    const messages = existingData.messages;\r\n                    let options = existingData.config;\r\n                    setAnswers([...answers.concat(messages)]);\r\n                    if (options) {\r\n                        setMaxOutputTokens(options.maxTokens);\r\n                        setTemperature(options.temperature);\r\n                        setSystemPrompt(options.system);\r\n                    }\r\n                    lastQuestionRef.current = messages.length > 0 ? messages[messages.length - 1].user : \"\";\r\n                    setActiveChat(existingData.id);\r\n                }\r\n                return fetchHistory();\r\n            })\r\n            .finally(() => {\r\n                setIsLoading(false);\r\n            });\r\n    }, []);\r\n\r\n    const makeApiRequest = async (question: string, system?: string) => {\r\n        lastQuestionRef.current = question;\r\n        error && setError(undefined);\r\n        setIsLoading(true);\r\n        const askResponse: ChatResponse = { answer: \"\", tokens: 0, user_tokens: 0 } as AskResponse;\r\n        const options: ChatOptions = {\r\n            system: system ? system : \"\",\r\n            maxTokens: max_output_tokens,\r\n            temperature: temperature //TODO model LLM.llm_name übergeben?\r\n        };\r\n\r\n        try {\r\n            const history: ChatTurn[] = answers.map(a => ({ user: a.user, bot: a.response.answer }));\r\n            const request: ChatRequest = {\r\n                history: [...history, { user: question, bot: undefined }],\r\n                shouldStream: true,\r\n                language: language,\r\n                temperature: temperature,\r\n                system_message: system ? system : \"\",\r\n                max_output_tokens: max_output_tokens,\r\n                model: LLM.llm_name\r\n            };\r\n\r\n            const response = await chatApi(request);\r\n            handleRedirect(response);\r\n\r\n            if (!response.body) {\r\n                throw Error(\"No response body\");\r\n            }\r\n            let user_tokens = 0;\r\n            let answer: string = \"\";\r\n            let streamed_tokens = 0;\r\n            let latestResponse: ChatResponse = { ...askResponse, answer: answer, tokens: streamed_tokens, user_tokens: user_tokens };\r\n            setAnswers([...answers, { user: question, response: latestResponse }]);\r\n            for await (const chunk of readNDJSONStream(response.body)) {\r\n                if (chunk as Chunk) {\r\n                    switch (chunk.type) {\r\n                        case \"C\":\r\n                            answer += chunk.message as string;\r\n                            break;\r\n                        case \"I\":\r\n                            const info = chunk.message as ChunkInfo;\r\n                            streamed_tokens = info.streamedtokens;\r\n                            user_tokens = info.requesttokens;\r\n                            break;\r\n                        case \"E\":\r\n                            throw Error((chunk.message as string) || \"Unknown error\");\r\n                    }\r\n\r\n                    latestResponse = { ...askResponse, answer: answer, tokens: streamed_tokens, user_tokens: user_tokens };\r\n                    setAnswers([...answers, { user: question, response: latestResponse }]);\r\n                    setIsLoading(false);\r\n                }\r\n            }\r\n            chatMessageStreamEnd.current?.scrollIntoView({ behavior: \"smooth\" });\r\n            //chat present, if not create.\r\n            if (active_chat) {\r\n                await storageService.appendMessage({ user: question, response: latestResponse }, options);\r\n            } else {\r\n                // generate chat name for first chat\r\n                const chatname = await createChatName(\r\n                    question,\r\n                    latestResponse.answer,\r\n                    language,\r\n                    temperature,\r\n                    system ? system : \"\",\r\n                    max_output_tokens,\r\n                    LLM.llm_name\r\n                );\r\n\r\n                // create and save current id\r\n                const id = await storageService.create([{ user: question, response: latestResponse }], options, undefined, chatname, false);\r\n                setActiveChat(id);\r\n\r\n                // fetch all chats\r\n                await fetchHistory();\r\n            }\r\n        } catch (e) {\r\n            setError(e);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n    const clearChat = () => {\r\n        lastQuestionRef.current = \"\";\r\n        error && setError(undefined);\r\n        //unset active chat\r\n        if (active_chat) {\r\n            setActiveChat(undefined);\r\n        }\r\n        setAnswers([]);\r\n    };\r\n\r\n    const onRollbackMessage = (message: string) => {\r\n        return async () => {\r\n            if (active_chat) {\r\n                let result = await storageService.rollbackMessage(message);\r\n                if (result) {\r\n                    setAnswers(result.messages);\r\n                    lastQuestionRef.current = result.messages.length > 0 ? result.messages[result.messages.length - 1].user : \"\";\r\n                }\r\n                setQuestion(message);\r\n            }\r\n        };\r\n    };\r\n\r\n    const onRegeneratResponseClicked = async () => {\r\n        if (answers.length > 0 && storageService.getActiveChatId()) {\r\n            await storageService.popMessage();\r\n            let last = answers.pop();\r\n            setAnswers(answers);\r\n            if (last) {\r\n                makeApiRequest(last.user, systemPrompt);\r\n            }\r\n        }\r\n    };\r\n\r\n    useEffect(() => chatMessageStreamEnd.current?.scrollIntoView({ behavior: \"smooth\" }), [isLoading]);\r\n\r\n    useEffect(() => {\r\n        setTotalTokens(\r\n            systemPromptTokens + answers.map(answ => (answ.response.user_tokens || 0) + (answ.response.tokens || 0)).reduceRight((prev, curr) => prev + curr, 0)\r\n        );\r\n    }, [answers, systemPromptTokens]);\r\n\r\n    const onExampleClicked = async (example: string, system?: string) => {\r\n        if (system) onSystemPromptChanged(system);\r\n        makeApiRequest(example, system);\r\n    };\r\n\r\n    const onTemperatureChanged = (temp: number) => {\r\n        setTemperature(temp);\r\n        storageService.update(undefined, {\r\n            system: systemPrompt ? systemPrompt : \"\",\r\n            maxTokens: max_output_tokens,\r\n            temperature: temp\r\n        });\r\n    };\r\n\r\n    const onMaxTokensChanged = (maxTokens: number) => {\r\n        if (maxTokens > LLM.max_output_tokens && LLM.max_output_tokens != 0) {\r\n            onMaxTokensChanged(LLM.max_output_tokens);\r\n        } else {\r\n            setMaxOutputTokens(maxTokens);\r\n            storageService.update(undefined, {\r\n                system: systemPrompt ? systemPrompt : \"\",\r\n                maxTokens: maxTokens,\r\n                temperature: temperature\r\n            });\r\n        }\r\n    };\r\n\r\n    const onSystemPromptChanged = (systemPrompt: string) => {\r\n        setSystemPrompt(systemPrompt);\r\n        storageService.update(undefined, {\r\n            system: systemPrompt ? systemPrompt : \"\",\r\n            maxTokens: max_output_tokens,\r\n            temperature: temperature\r\n        });\r\n    };\r\n\r\n    const answerList = (\r\n        <AnswerList\r\n            answers={answers}\r\n            regularBotMsg={(answer, index) => {\r\n                return (\r\n                    <>\r\n                        {index === answers.length - 1 && (\r\n                            <Answer\r\n                                answer={answer.response}\r\n                                onRegenerateResponseClicked={onRegeneratResponseClicked}\r\n                                setQuestion={question => setQuestion(question)}\r\n                            />\r\n                        )}\r\n                        {index !== answers.length - 1 && <Answer answer={answer.response} setQuestion={question => setQuestion(question)} />}\r\n                    </>\r\n                );\r\n            }}\r\n            onRollbackMessage={onRollbackMessage}\r\n            isLoading={isLoading}\r\n            error={error}\r\n            makeApiRequest={() => makeApiRequest(lastQuestionRef.current, systemPrompt)}\r\n            chatMessageStreamEnd={chatMessageStreamEnd}\r\n            lastQuestionRef={lastQuestionRef}\r\n        />\r\n    );\r\n    const examplesComponent = <ExampleList examples={CHAT_EXAMPLES} onExampleClicked={onExampleClicked} />;\r\n    const inputComponent = (\r\n        <QuestionInput\r\n            clearOnSend\r\n            placeholder={t(\"chat.prompt\")}\r\n            disabled={isLoading}\r\n            onSend={question => makeApiRequest(question, systemPrompt)}\r\n            tokens_used={totalTokens}\r\n            question={question}\r\n            setQuestion={question => setQuestion(question)}\r\n        />\r\n    );\r\n    const sidebar_actions = (\r\n        <>\r\n            <ClearChatButton onClick={clearChat} disabled={!lastQuestionRef.current || isLoading} />\r\n        </>\r\n    );\r\n    const sidebar_content = (\r\n        <>\r\n            <History\r\n                allChats={allChats}\r\n                currentActiveChatId={active_chat}\r\n                onDeleteChat={async id => {\r\n                    await storageService.delete(id);\r\n                    await fetchHistory();\r\n                }}\r\n                onChatNameChange={async (id, name: string) => {\r\n                    const newName = prompt(t(\"components.history.newchat\"), name);\r\n                    await storageService.renameChat(id, newName ? newName.trim() : name);\r\n                    await fetchHistory();\r\n                }}\r\n                onFavChange={async (id: string, fav: boolean) => {\r\n                    await storageService.changeFavouritesInDb(id, fav);\r\n                    await fetchHistory();\r\n                }}\r\n                onSelect={async (id: string) => {\r\n                    const chat = await storageService.get(id);\r\n                    if (chat) {\r\n                        setAnswers(chat.messages);\r\n                        lastQuestionRef.current = chat.messages.length > 0 ? chat.messages[chat.messages.length - 1].user : \"\";\r\n                        setActiveChat(id);\r\n                        setMaxOutputTokens(chat.config.maxTokens);\r\n                        setTemperature(chat.config.temperature);\r\n                        setSystemPrompt(chat.config.system);\r\n                    }\r\n                }}\r\n            ></History>\r\n        </>\r\n    );\r\n    const sidebar = (\r\n        <ChatsettingsDrawer\r\n            temperature={temperature}\r\n            setTemperature={onTemperatureChanged}\r\n            max_output_tokens={max_output_tokens}\r\n            setMaxTokens={onMaxTokensChanged}\r\n            systemPrompt={systemPrompt}\r\n            setSystemPrompt={onSystemPromptChanged}\r\n            actions={sidebar_actions}\r\n            content={sidebar_content}\r\n        />\r\n    );\r\n    return (\r\n        <ChatLayout\r\n            sidebar={sidebar}\r\n            examples={examplesComponent}\r\n            answers={answerList}\r\n            input={inputComponent}\r\n            showExamples={!lastQuestionRef.current}\r\n            header={t(\"chat.header\")}\r\n            header_as_markdown={false}\r\n            messages_description={t(\"common.messages\")}\r\n            size=\"large\"\r\n        ></ChatLayout>\r\n    );\r\n};\r\n\r\nexport default Chat;\r\n","import { useState } from \"react\";\r\nimport { Stack } from \"@fluentui/react\";\r\nimport { Button, Tooltip, Textarea, TextareaOnChangeData } from \"@fluentui/react-components\";\r\nimport { Delete24Regular, Send28Filled } from \"@fluentui/react-icons\";\r\n\r\nimport styles from \"./SumInput.module.css\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\ninterface Props {\r\n    onSend: (question: string, file?: File) => void;\r\n    disabled: boolean;\r\n    placeholder?: string;\r\n    clearOnSend?: boolean;\r\n    question: string;\r\n    setQuestion: (question: string) => void;\r\n}\r\n\r\nexport const SumInput = ({ onSend, disabled, placeholder, clearOnSend, question, setQuestion }: Props) => {\r\n    const { t, i18n } = useTranslation();\r\n    const [dragging, setDragging] = useState(false);\r\n    const [file, setFile] = useState<File | undefined>(undefined);\r\n\r\n    const sendQuestion = () => {\r\n        if (disabled || (!question.trim() && !file)) {\r\n            return;\r\n        }\r\n        onSend(question, file);\r\n\r\n        if (clearOnSend) {\r\n            setQuestion(\"\");\r\n            removeDocuments();\r\n        }\r\n    };\r\n\r\n    const onEnterPress = (ev: React.KeyboardEvent<Element>) => {\r\n        if (ev.key === \"Enter\" && !ev.shiftKey) {\r\n            ev.preventDefault();\r\n            sendQuestion();\r\n        }\r\n    };\r\n\r\n    const onQuestionChange = (_ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: TextareaOnChangeData) => {\r\n        if (!newValue?.value) {\r\n            setQuestion(\"\");\r\n        } else {\r\n            setQuestion(newValue.value);\r\n        }\r\n    };\r\n\r\n    const handleDrop = (e: React.DragEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        e.preventDefault();\r\n        const files = e.dataTransfer.files;\r\n\r\n        if (files.length > 0) setFile(files[0]);\r\n\r\n        setDragging(false);\r\n    };\r\n\r\n    const handleDragOver = (e: React.DragEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        e.preventDefault();\r\n        setDragging(true);\r\n    };\r\n\r\n    const removeDocuments = () => {\r\n        setFile(undefined);\r\n        setDragging(true);\r\n    };\r\n\r\n    const sendQuestionDisabled = disabled || (!question.trim() && !file);\r\n\r\n    return (\r\n        <Stack horizontal className={styles.questionInputContainer}>\r\n            {file ? (\r\n                <div className={styles.documentContainer}>\r\n                    <p className={styles.paddingDocumentName}>{file.name}</p>\r\n\r\n                    <Tooltip content={t(\"components.suminput.removedocument\")} relationship=\"description\" positioning=\"above\">\r\n                        <Button icon={<Delete24Regular />} disabled={disabled} onClick={removeDocuments} size=\"large\"></Button>\r\n                    </Tooltip>\r\n                </div>\r\n            ) : (\r\n                <Textarea\r\n                    textarea={{ style: { borderStyle: \"dashed\", borderWidth: \"4px\" } }}\r\n                    root={{ style: { borderStyle: \"hidden\" } }}\r\n                    placeholder={placeholder}\r\n                    resize=\"vertical\"\r\n                    value={question}\r\n                    size=\"large\"\r\n                    onChange={onQuestionChange}\r\n                    onKeyDown={onEnterPress}\r\n                    onDrop={handleDrop}\r\n                    draggable={dragging}\r\n                    onDragOver={handleDragOver}\r\n                />\r\n            )}\r\n            <div className={styles.questionInputContainerFooter}>\r\n                <div></div>\r\n                <div className={styles.questionInputButtonsContainer}>\r\n                    <Tooltip content={placeholder || \"\"} relationship=\"label\">\r\n                        <Button size=\"large\" appearance=\"subtle\" icon={<Send28Filled />} disabled={sendQuestionDisabled} onClick={sendQuestion} />\r\n                    </Tooltip>\r\n                </div>\r\n            </div>\r\n        </Stack>\r\n    );\r\n};\r\n","import { RadioGroup, Radio, RadioGroupOnChangeData, Field } from \"@fluentui/react-components\";\r\nimport styles from \"./SummarizeSidebar.module.css\";\r\nimport { useTranslation } from \"react-i18next\";\r\ninterface Props {\r\n    onDetaillevelChanged: (newval: string) => void;\r\n    detaillevel_pref: string;\r\n}\r\nexport const SummarizeSidebar = ({ onDetaillevelChanged, detaillevel_pref }: Props) => {\r\n    const { t } = useTranslation();\r\n\r\n    const onDetaillevelChangedInternal = (e: any, selection: RadioGroupOnChangeData) => {\r\n        onDetaillevelChanged(selection.value);\r\n    };\r\n\r\n    return (\r\n        <div className={styles.sidebar}>\r\n            <Field label={t(\"sum.levelofdetail\")}>\r\n                <RadioGroup layout=\"vertical\" onChange={onDetaillevelChangedInternal} value={detaillevel_pref}>\r\n                    <Radio value=\"short\" label={t(\"sum.short\")} />\r\n                    <Radio value=\"medium\" label={t(\"sum.medium\")} />\r\n                    <Radio value=\"long\" label={t(\"sum.long\")} />\r\n                </RadioGroup>\r\n            </Field>\r\n        </div>\r\n    );\r\n};\r\n","import { MutableRefObject, Dispatch, SetStateAction } from \"react\";\r\nimport { StorageService } from \"../service/storage\";\r\n\r\nexport async function setupStore(\r\n    error: unknown,\r\n    setError: Dispatch<unknown>,\r\n    setIsLoading: Dispatch<boolean>,\r\n    storageService: StorageService<any, any>,\r\n    setAnswers: Dispatch<SetStateAction<any[]>>,\r\n    answers: any[],\r\n    lastQuestionRef: MutableRefObject<string>,\r\n    setActiveChat: Dispatch<SetStateAction<string | undefined>>\r\n) {\r\n    error && setError(undefined);\r\n    setIsLoading(true);\r\n    const existingData = await storageService.getNewestChat();\r\n    if (existingData) {\r\n        const messages = existingData.messages;\r\n        setAnswers([...answers.concat(messages)]);\r\n        lastQuestionRef.current = messages.length > 0 ? messages[messages.length - 1].user : \"\";\r\n        setActiveChat(existingData.id);\r\n    }\r\n    setIsLoading(false);\r\n}\r\n\r\nexport function handleDeleteChat(\r\n    lastQuestionRef: MutableRefObject<string>,\r\n    error: unknown,\r\n    setError: Dispatch<unknown>,\r\n    storageService: StorageService<any, any>,\r\n    setAnswers: Dispatch<SetStateAction<any[]>>,\r\n    setActiveChat: Dispatch<SetStateAction<string | undefined>>\r\n) {\r\n    return () => {\r\n        lastQuestionRef.current = \"\";\r\n        error && setError(undefined);\r\n        storageService.delete();\r\n        setAnswers([]);\r\n        setActiveChat(undefined);\r\n    };\r\n}\r\nexport function handleRollback(\r\n    storageService: StorageService<any, any>,\r\n    setAnswers: Dispatch<SetStateAction<any[]>>,\r\n    lastQuestionRef: MutableRefObject<string>,\r\n    setQuestion: Dispatch<SetStateAction<string>>\r\n) {\r\n    return (message: string) => {\r\n        return async () => {\r\n            if (storageService.getActiveChatId()) {\r\n                let result = await storageService.rollbackMessage(message);\r\n                if (result) {\r\n                    setAnswers(result.messages);\r\n                    lastQuestionRef.current = result.messages.length > 0 ? result.messages[result.messages.length - 1].user : \"\";\r\n                }\r\n                setQuestion(message);\r\n            }\r\n        };\r\n    };\r\n}\r\n","import React, { useState } from \"react\";\r\nimport styles from \"./SumAnswer.module.css\";\r\nimport { Stack } from \"@fluentui/react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { SumResponse } from \"../../api\";\r\nimport DOMPurify from \"dompurify\";\r\nimport { Button } from \"@fluentui/react-button\";\r\nimport { Tooltip } from \"@fluentui/react-components\";\r\nimport { CheckmarkSquare24Regular, Copy24Regular } from \"@fluentui/react-icons\";\r\nimport { AnswerIcon } from \"../Answer/AnswerIcon\";\r\ninterface Props {\r\n    answer: SumResponse;\r\n    top_n: number; // die besten zwei Varianten darstellen\r\n}\r\n\r\nexport const SumAnswer = ({ answer, top_n }: Props) => {\r\n    const { t } = useTranslation();\r\n    const [getSelected, setSelected] = useState(0);\r\n    const [copied, setCopied] = useState<boolean>(false);\r\n    const [ref, setRef] = React.useState<HTMLElement | null>();\r\n\r\n    const answers = answer.answer.length > 2 ? answer.answer.slice(-2) : answer.answer;\r\n\r\n    const sanitizedAnswerHtmlWithoutColors = answers.map(answ => {\r\n        return DOMPurify.sanitize(answ);\r\n    });\r\n\r\n    const oncopy = (text: string) => {\r\n        setCopied(true);\r\n        navigator.clipboard.writeText(text);\r\n        setTimeout(() => {\r\n            setCopied(false);\r\n        }, 1000);\r\n    };\r\n    return (\r\n        <Stack verticalAlign=\"space-between\" className={`${styles.sumanswerContainer}`}>\r\n            <Stack.Item>\r\n                <Stack horizontal horizontalAlign=\"space-between\">\r\n                    <AnswerIcon aria-hidden />\r\n                    <div className={styles.buttonContainer}>\r\n                        {answers.map((x, i) => (\r\n                            <div>\r\n                                <Button\r\n                                    style={{\r\n                                        border: \"0.5px solid black\",\r\n                                        padding: \"10px\",\r\n                                        backgroundColor: getSelected === i ? \"var(--colorBrandBackgroundSelected)\" : \"var(--colorNeutralBackground1Hover)\",\r\n                                        height: \"100%\"\r\n                                    }}\r\n                                    appearance=\"outline\"\r\n                                    size=\"small\"\r\n                                    shape=\"rounded\"\r\n                                    onClick={() => setSelected(i)}\r\n                                    key={i}\r\n                                >\r\n                                    {t(\"components.sumanswer.alternative\")} {i + 1}\r\n                                </Button>\r\n                            </div>\r\n                        ))}\r\n                        <Tooltip content={t(\"components.sumanswer.copy\")} relationship=\"description\" positioning={{ target: ref }}>\r\n                            <Button\r\n                                ref={setRef}\r\n                                appearance=\"subtle\"\r\n                                aria-label={t(\"components.answer.copy\")}\r\n                                onClick={() => oncopy(sanitizedAnswerHtmlWithoutColors[getSelected])}\r\n                                icon={\r\n                                    !copied ? (\r\n                                        <Copy24Regular className={styles.iconRightMargin} />\r\n                                    ) : (\r\n                                        <CheckmarkSquare24Regular className={styles.iconRightMargin} />\r\n                                    )\r\n                                }\r\n                                size=\"large\"\r\n                            ></Button>\r\n                        </Tooltip>\r\n                    </div>\r\n                </Stack>\r\n            </Stack.Item>\r\n            <Stack.Item grow>\r\n                <div className={styles.sumanswerContainer}>\r\n                    <div className={styles.answerText} dangerouslySetInnerHTML={{ __html: sanitizedAnswerHtmlWithoutColors[getSelected] }}></div>\r\n                </div>\r\n            </Stack.Item>\r\n        </Stack>\r\n    );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { ChatTurnComponent } from \"../ChatTurnComponent/ChatTurnComponent\";\r\nimport { UserChatMessage } from \"../UserChatMessage\";\r\nimport { AnswerLoading } from \"../Answer/AnswerLoading\";\r\nimport { AnswerError } from \"../Answer/AnswerError\";\r\nimport { SumAnswer } from \"../SumAnswer\";\r\nimport { SumarizeMessage } from \"../../api/models\";\r\n\r\ninterface Props {\r\n    answers: SumarizeMessage[];\r\n    onRollbackMessage: (message: string) => () => void;\r\n    isLoading: boolean;\r\n    error: unknown;\r\n    makeApiRequest: () => void;\r\n    chatMessageStreamEnd: React.RefObject<HTMLDivElement>;\r\n    lastQuestionRef: React.MutableRefObject<string>;\r\n}\r\n\r\nexport const SumAnswerList = ({ answers, onRollbackMessage, isLoading, error, makeApiRequest, chatMessageStreamEnd, lastQuestionRef }: Props) => {\r\n    const { t } = useTranslation();\r\n\r\n    const [answersComponent, setAnswersComponent] = useState<JSX.Element[]>([]);\r\n\r\n    useEffect(() => {\r\n        setAnswersComponent(\r\n            answers.map((answer, index) => (\r\n                <ChatTurnComponent\r\n                    key={index}\r\n                    usermsg={<UserChatMessage message={answer.user} onRollbackMessage={onRollbackMessage(answer.user)} />}\r\n                    usermsglabel={t(\"components.usericon.label\") + \" \" + (index + 1).toString()}\r\n                    botmsglabel={t(\"components.answericon.label\") + \" \" + (index + 1).toString()}\r\n                    botmsg={<SumAnswer answer={answer.response} top_n={2}></SumAnswer>}\r\n                ></ChatTurnComponent>\r\n            ))\r\n        );\r\n    }, [answers]);\r\n\r\n    return (\r\n        <>\r\n            {answersComponent}\r\n            {isLoading || error ? (\r\n                <ChatTurnComponent\r\n                    usermsg={<UserChatMessage message={lastQuestionRef.current} onRollbackMessage={onRollbackMessage(lastQuestionRef.current)} />}\r\n                    usermsglabel={t(\"components.usericon.label\") + \" \" + (answers.length + 1).toString()}\r\n                    botmsglabel={t(\"components.answericon.label\") + \" \" + (answers.length + 1).toString()}\r\n                    botmsg={\r\n                        <>\r\n                            {isLoading && <AnswerLoading text={t(\"chat.answer_loading\")} />}\r\n                            {error ? <AnswerError error={error.toString()} onRetry={() => makeApiRequest()} /> : null}\r\n                        </>\r\n                    }\r\n                ></ChatTurnComponent>\r\n            ) : (\r\n                <div></div>\r\n            )}\r\n            <div ref={chatMessageStreamEnd} />\r\n        </>\r\n    );\r\n};\r\n","import { useRef, useState, useEffect, useContext } from \"react\";\r\n\r\nimport { sumApi, SumarizeMessage, SumRequest, SumResponse } from \"../../api\";\r\nimport { ClearChatButton } from \"../../components/ClearChatButton\";\r\nimport { LanguageContext } from \"../../components/LanguageSelector/LanguageContextProvider\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { SumInput } from \"../../components/SumInput\";\r\nimport { LLMContext } from \"../../components/LLMSelector/LLMContextProvider\";\r\nimport { ChatLayout } from \"../../components/ChatLayout/ChatLayout\";\r\nimport { Sidebar } from \"../../components/Sidebar/Sidebar\";\r\nimport { SummarizeSidebar } from \"../../components/SummarizeSidebar/SummarizeSidebar\";\r\nimport { SUMMARIZE_STORE } from \"../../constants\";\r\nimport { StorageService } from \"../../service/storage\";\r\nimport { handleDeleteChat, handleRollback, setupStore } from \"../page_helpers\";\r\nimport { SumAnswerList } from \"../../components/AnswerList/SumAnswerList\";\r\nimport { ExampleList, ExampleModel } from \"../../components/Example\";\r\n\r\nconst STORAGE_KEY_LEVEL_OF_DETAIL = \"SUM_LEVEL_OF_DETAIL\";\r\n\r\nconst EXAMPLES: ExampleModel[] = [\r\n    {\r\n        text: \"Rotkäppchen\",\r\n        value: `Es war einmal ein kleines süßes Mädchen, das hatte jedermann lieb, der sie nur ansah, am allerliebsten aber ihre Großmutter, die wusste gar nicht, was sie alles dem Kinde geben sollte. Einmal schenkte sie ihm ein Käppchen von rotem Samt, und weil ihm das so wohl stand, und es nichts anders mehr tragen wollte, hieß es nur das Rotkäppchen. Eines Tages sprach seine Mutter zu ihm: \"Komm, Rotkäppchen, da hast du ein Stück Kuchen und eine Flasche Wein, bring das der Großmutter hinaus; sie ist krank und schwach und wird sich daran laben. Mach dich auf, bevor es heiß wird, und wenn du hinauskommst, so geh hübsch sittsam und lauf nicht vom Wege ab, sonst fällst du und zerbrichst das Glas, und die Großmutter hat nichts. Und wenn du in ihre Stube kommst, so vergiss nicht guten Morgen zu sagen und guck nicht erst in allen Ecken herum!\"\r\n        \"Ich will schon alles richtig machen,\" sagte Rotkäppchen zur Mutter, und gab ihr die Hand darauf. Die Großmutter aber wohnte draußen im Wald, eine halbe Stunde vom Dorf. Wie nun Rotkäppchen in den Wald kam, begegnete ihm der Wolf. Rotkäppchen aber wusste nicht, was das für ein böses Tier war, und fürchtete sich nicht vor ihm. \"Guten Tag, Rotkäppchen!\" sprach er. \"Schönen Dank, Wolf!\" - \"Wo hinaus so früh, Rotkäppchen?\" - \"Zur Großmutter.\" - \"Was trägst du unter der Schürze?\" - \"Kuchen und Wein. Gestern haben wir gebacken, da soll sich die kranke und schwache Großmutter etwas zugut tun und sich damit stärken.\" - \"Rotkäppchen, wo wohnt deine Großmutter?\" - \"Noch eine gute Viertelstunde weiter im Wald, unter den drei großen Eichbäumen, da steht ihr Haus, unten sind die Nusshecken, das wirst du ja wissen,\" sagte Rotkäppchen. Der Wolf dachte bei sich: Das junge, zarte Ding, das ist ein fetter Bissen, der wird noch besser schmecken als die Alte. Du musst es listig anfangen, damit du beide schnappst. Da ging er ein Weilchen neben Rotkäppchen her, dann sprach er: \"Rotkäppchen, sieh einmal die schönen Blumen, die ringsumher stehen. Warum guckst du dich nicht um? Ich glaube, du hörst gar nicht, wie die Vöglein so lieblich singen? Du gehst ja für dich hin, als wenn du zur Schule gingst, und ist so lustig haussen in dem Wald.\"\r\n        Rotkäppchen schlug die Augen auf, und als es sah, wie die Sonnenstrahlen durch die Bäume hin und her tanzten und alles voll schöner Blumen stand, dachte es: Wenn ich der Großmutter einen frischen Strauß mitbringe, der wird ihr auch Freude machen; es ist so früh am Tag, dass ich doch zu rechter Zeit ankomme, lief vom Wege ab in den Wald hinein und suchte Blumen. Und wenn es eine gebrochen hatte, meinte es, weiter hinaus stände eine schönere, und lief danach und geriet immer tiefer in den Wald hinein. Der Wolf aber ging geradewegs nach dem Haus der Großmutter und klopfte an die Türe. \"Wer ist draußen?\" - \"Rotkäppchen, das bringt Kuchen und Wein, mach auf!\" - \"Drück nur auf die Klinke!\" rief die Großmutter, \"ich bin zu schwach und kann nicht aufstehen.\" Der Wolf drückte auf die Klinke, die Türe sprang auf und er ging, ohne ein Wort zu sprechen, gerade zum Bett der Großmutter und verschluckte sie. Dann tat er ihre Kleider an, setzte ihre Haube auf, legte sich in ihr Bett und zog die Vorhänge vor.\r\n        Rotkäppchen aber, war nach den Blumen herumgelaufen, und als es so viel zusammen hatte, dass es keine mehr tragen konnte, fiel ihm die Großmutter wieder ein, und es machte sich auf den Weg zu ihr. Es wunderte sich, dass die Tür aufstand, und wie es in die Stube trat, so kam es ihm so seltsam darin vor, dass es dachte: Ei, du mein Gott, wie ängstlich wird mir's heute zumut, und bin sonst so gerne bei der Großmutter! Es rief: \"Guten Morgen,\" bekam aber keine Antwort. Darauf ging es zum Bett und zog die Vorhänge zurück. Da lag die Großmutter und hatte die Haube tief ins Gesicht gesetzt und sah so wunderlich aus. \"Ei, Großmutter, was hast du für große Ohren!\" - \"Dass ich dich besser hören kann!\" - \"Ei, Großmutter, was hast du für große Augen!\" - \"Dass ich dich besser sehen kann!\" - \"Ei, Großmutter, was hast du für große Hände!\" - \"Dass ich dich besser packen kann!\" - \"Aber, Großmutter, was hast du für ein entsetzlich großes Maul!\" - \"Dass ich dich besser fressen kann!\" Kaum hatte der Wolf das gesagt, so tat er einen Satz aus dem Bette und verschlang das arme Rotkäppchen.\r\n        Wie der Wolf seinen Appetit gestillt hatte, legte er sich wieder ins Bett, schlief ein und fing an, überlaut zu schnarchen. Der Jäger ging eben an dem Haus vorbei und dachte: Wie die alte Frau schnarcht! Du musst doch sehen, ob ihr etwas fehlt. Da trat er in die Stube, und wie er vor das Bette kam, so sah er, dass der Wolf darin lag. \"Finde ich dich hier, du alter Sünder,\" sagte er, \"ich habe dich lange gesucht.\" Nun wollte er seine Büchse anlegen, da fiel ihm ein, der Wolf könnte die Großmutter gefressen haben und sie wäre noch zu retten, schoss nicht, sondern nahm eine Schere und fing an, dem schlafenden Wolf den Bauch aufzuschneiden. Wie er ein paar Schnitte getan hatte, da sah er das rote Käppchen leuchten, und noch ein paar Schnitte, da sprang das Mädchen heraus und rief: \"Ach, wie war ich erschrocken, wie war's so dunkel in dem Wolf seinem Leib!\" Und dann kam die alte Großmutter auch noch lebendig heraus und konnte kaum atmen. Rotkäppchen aber holte geschwind große Steine, damit füllten sie dem Wolf den Leib, und wie er aufwachte, wollte er fortspringen, aber die Steine waren so schwer, dass er gleich niedersank und sich totfiel.\r\n        Da waren alle drei vergnügt. Der Jäger zog dem Wolf den Pelz ab und ging damit heim, die Großmutter aß den Kuchen und trank den Wein, den Rotkäppchen gebracht hatte, und erholte sich wieder; Rotkäppchen aber dachte: Du willst dein Lebtag nicht wieder allein vom Wege ab in den Wald laufen, wenn dir's die Mutter verboten hat.\r\n        Es wird auch erzählt, dass einmal, als Rotkäppchen der alten Großmutter wieder Gebackenes brachte, ein anderer Wolf es angesprochen und vom Wege habe ableiten wollen. Rotkäppchen aber hütete sich und ging geradefort seines Wegs und sagte der Großmutter, dass es dem Wolf begegnet wäre, der ihm guten Tag gewünscht, aber so bös aus den Augen geguckt hätte: \"Wenn's nicht auf offener Straße gewesen wäre, er hätte mich gefressen.\" - \"Komm,\" sagte die Großmutter, \"wir wollen die Türe verschließen, dass er nicht hereinkann.\" Bald danach klopfte der Wolf an und rief: \"Mach auf, Großmutter, ich bin das Rotkäppchen, ich bring dir Gebackenes.\" Sie schwiegen aber und machten die Türe nicht auf. Da schlich der Graukopf etlichemal um das Haus, sprang endlich aufs Dach und wollte warten, bis Rotkäppchen abends nach Hause ginge, dann wollte er ihm nachschleichen und wollt's in der Dunkelheit fressen. Aber die Großmutter merkte, was er im Sinne hatte. Nun stand vor dem Haus ein großer Steintrog, Da sprach sie zu dem Kind: \"Nimm den Eimer, Rotkäppchen, gestern hab ich Würste gekocht, da trag das Wasser, worin sie gekocht sind, in den Trog!\" Rotkäppchen trug so lange, bis der große, große Trog ganz voll war. Da stieg der Geruch von den Würsten dem Wolf in die Nase. Er schnupperte und guckte hinab, endlich machte er den Hals so lang, dass er sich nicht mehr halten konnte, und anfing zu rutschen; so rutschte er vom Dach herab, gerade in den großen Trog hinein und ertrank. Rotkäppchen aber ging fröhlich nach Haus, und von nun an tat ihm niemand mehr etwas zuleide. \"\r\n    `\r\n    },\r\n    {\r\n        text: \"Text über autonome Autos\",\r\n        value: \"Autonome Autos sind Autos, die komplett selbstständig fahren. Sie brauchen keinen Fahrer mehr. Ihr Innenraum könnte beispielsweise wie in einem Zug aussehen, mit vier Sitzen und eventuell einem Tisch. Lenkrad, Pedale, Schaltknüppel – all das wäre nicht mehr vorhanden. Damit diese Autos autonom fahren können, sind sie mit einer Fülle von Technik ausgestattet. Laser, Sensoren, Kameras, ein GPS-Empfänger, Messgeräte und ein Bordcomputer erkennen andere Verkehrsteilnehmer, Straßenschilder, Ampeln usw. Sie machen es möglich, dass das Auto sich sicher durch den Verkehr bewegt und Kollisionen vermeidet. Mehrere Autohersteller arbeiten an verschiedenen Modellen autonomer Autos und die Forschung ist schon weit fortgeschritten.\"\r\n    },\r\n    {\r\n        text: \"Text übers Tempolimit\",\r\n        value: \"Viele wollen es. 57 Prozent der Deutschen sagen in einer Umfrage des Meinungsforschungsinstituts YouGov, dass sie für ein Tempolimit von 130 Stundenkilometern auf Autobahnen sind. Genauso sind es Menschen aus Wissenschaft, Politik, Kirche und dem öffentlichen Leben, die im Bündnis Tempolimit jetzt! aktiv sind. Einer davon: Sebastian Vettel, der vier Saisons der Formel-1 gewonnen hat.​Einer, der es definitiv nicht will, ist Verkehrsminister Volker Wissing. Der Politiker aus der Freien Demokratischen Partei (FDP) ist gegen staatliche Limitierungen im Straßenverkehr. Er sagt: „Autofahren bedeutet Freiheit.“ Mit dieser Meinung ist Wissing in seiner Partei und in Deutschland nicht allein.​Fast allein ist das Land aber mit der Möglichkeit, auf Autobahnen so schnell zu fahren, wie man will. In Europa hat nur ein anderer Ort kein Limit: die Isle of Man in der Irischen See. Autobahnen gibt es dort aber keine. Auch insgesamt gibt es nur wenige andere Länder ohne Maximalgeschwindigkeit, sie haben aber schlechte Straßen. ​Über ein Tempolimit diskutiert man in Deutschland schon ziemlich lang – und meistens emotional. Dabei ist 1953 ein wichtiges Jahr. Damals fand unter Kanzler Konrad Adenauer eine große Deregulierung der Geschwindigkeit statt: Menschen in Pkw und auf Motorrädern durften überall in der Bundesrepublik so schnell fahren, wie sie wollten und konnten. Westdeutschland lebte seinen Mythos der Autobahn. Anders in der Deutschen Demokratischen Republik: Dort waren 100 Stundenkilometer auf Autobahnen das Maximum, 80 außerhalb von Orten und 50 in Orten.​Weil in der Bundesrepublik die Zahl der Verkehrstoten deutlich stieg, führte die Regierung im Jahr 1957 für Orte eine Maximalgeschwindigkeit von 50 Stundenkilometern ein. Diese Norm hatte viele Gegner: den Allgemeinen Deutschen Automobil-Club (ADAC), die Autoindustrie, aber auch Menschen aus Politik und Wissenschaft.​Im Jahr 1972 kam die Einführung eines Tempolimits von 100 Stundenkilometern auf Landstraßen. Auch über diese Aktion gegen die vielen Verkehrstoten gab es intensive Diskussionen. ​Monate später kam die Ölkrise – und mit ihr ab November 1973 ein vorübergehendes Tempolimit von 100 Stundenkilometern auf Autobahnen. So wollte man den Erdölverbrauch reduzieren. Aber der Protest war groß. Ganz vorn dabei war der ADAC, der eine Kampagne mit dem Motto „Freie Fahrt für freie Bürger“ startete. Mit Erfolg: Nach 111 Tagen endete das Tempolimit auf Autobahnen. Ab dem 15. März 1974 durfte man wieder so viel Gas geben, wie man wollte. Das ist bis heute auf circa 70 Prozent der deutschen Autobahnen möglich. Dort gibt es nur die Empfehlung für eine Geschwindigkeit von 130 Stundenkilometern.  ​ Die Debatte über das Tempolimit hat trotzdem nicht aufgehört. Und auch 50 Jahre später spielen die mächtige deutsche Autolobby und das (oft auch von ihr verwendete) Freiheitsargument noch immer zentrale Rollen – obwohl die Welt heute eine andere ist.​ Da ist vor allem die Frage, ob ein Tempolimit gegen die Klimakrise hilft. Anfang dieses Jahres hat das Umweltbundesamt eine Studie publiziert. Sie zeigt, dass ein Limit von 120 Stundenkilometern einen größeren Effekt hätte als bis jetzt gedacht. Pro Jahr könnte man die Treibhausgasemissionen des deutschen Straßenverkehrs so um 4,2 Prozent reduzieren.​ Elementar ist außerdem die Frage, ob ein Tempolimit den Verkehr sicherer macht. Klar ist: Je schneller ein Auto unterwegs ist, desto länger dauert das Bremsen bis zum Stoppen. Das Nachrichtenportal Spiegel Online hat den Unfallatlas der statistischen Ämter des Bundes und der Länder analysiert. Das Resultat: Je eine Milliarde gefahrener Kilometer gibt es auf Autobahnabschnitten mit Tempolimit 0,95 tödliche Unfälle. Auf Strecken ohne Tempolimit sind es 1,67 tödliche Unfälle – rund 75 Prozent mehr.​ Warum lieben viele Deutsche das schnelle Fahren trotzdem so sehr? Fragt man Verkehrspsychologen, hört man bald wieder das große Wort dieser Debatte: Freiheit. Aber dominiert der Wunsch danach wirklich die kollektive Psyche und entscheidet über das Tempo deutscher Autofahrerinnen?​Eine Antwort liefert eine Studie des Instituts der deutschen Wirtschaft aus dem Jahr 2021. Sie zeigt: 77 Prozent der Autofahrer sind auf Autobahnabschnitten ohne Tempolimit langsamer als 130 Stundenkilometer unterwegs. Zwölf Prozent fahren dort zwischen 130 und 140 Stundenkilometer. Nur weniger als zwei Prozent fahren schneller als 160.​Inzwischen ist auch die Mehrheit der Mitglieder des ADAC für ein Tempolimit. Der Verband der Automobilindustrie ist noch dagegen. Und die Regierung? Im Koalitionsvertrag steht auf Wunsch der FDP: „Ein generelles Tempolimit wird es nicht geben.\"\r\n    }\r\n];\r\n\r\nconst Summarize = () => {\r\n    const { language } = useContext(LanguageContext);\r\n    const { LLM } = useContext(LLMContext);\r\n    const { t } = useTranslation();\r\n\r\n    const lastQuestionRef = useRef<string>(\"\");\r\n    const chatMessageStreamEnd = useRef<HTMLDivElement | null>(null);\r\n\r\n    const [isLoading, setIsLoading] = useState<boolean>(false);\r\n    const [error, setError] = useState<unknown>();\r\n\r\n    const detaillevel_pref = (localStorage.getItem(STORAGE_KEY_LEVEL_OF_DETAIL) as \"long\" | \"medium\" | \"short\") || \"short\";\r\n\r\n    const [detaillevel, setDetaillevel] = useState<\"long\" | \"medium\" | \"short\">(detaillevel_pref);\r\n\r\n    const [answers, setAnswers] = useState<SumarizeMessage[]>([]);\r\n    const [question, setQuestion] = useState<string>(\"\");\r\n\r\n    const [active_chat, setActiveChat] = useState<string | undefined>(undefined);\r\n    const storageService: StorageService<SumResponse, {}> = new StorageService<SumResponse, {}>(SUMMARIZE_STORE, active_chat);\r\n\r\n    const clearChat = handleDeleteChat(lastQuestionRef, error, setError, storageService, setAnswers, setActiveChat);\r\n    const onRollbackMessage = handleRollback(storageService, setAnswers, lastQuestionRef, setQuestion);\r\n\r\n    useEffect(() => {\r\n        setupStore(error, setError, setIsLoading, storageService, setAnswers, answers, lastQuestionRef, setActiveChat);\r\n    }, []);\r\n\r\n    const onExampleClicked = (example: string) => {\r\n        makeApiRequest(example, undefined);\r\n    };\r\n\r\n    const makeApiRequest = async (question: string, file?: File) => {\r\n        let questionText = file ? file.name : question;\r\n        lastQuestionRef.current = questionText;\r\n\r\n        error && setError(undefined);\r\n        setIsLoading(true);\r\n        try {\r\n            const request: SumRequest = {\r\n                text: questionText,\r\n                detaillevel: detaillevel,\r\n                language: language,\r\n                model: LLM.llm_name\r\n            };\r\n            const result = await sumApi(request, file);\r\n            const completeAnswer: SumarizeMessage = { user: questionText, response: result };\r\n\r\n            setAnswers([...answers, completeAnswer]);\r\n            if (storageService.getActiveChatId()) await storageService.appendMessage(completeAnswer);\r\n            else {\r\n                const id = await storageService.create([completeAnswer], undefined);\r\n                setActiveChat(id);\r\n            }\r\n        } catch (e) {\r\n            setError(e);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => chatMessageStreamEnd.current?.scrollIntoView({ behavior: \"smooth\" }), [isLoading]);\r\n\r\n    const onDetaillevelChanged = (newValue: string) => {\r\n        setDetaillevel(newValue as \"long\" | \"medium\" | \"short\");\r\n        localStorage.setItem(STORAGE_KEY_LEVEL_OF_DETAIL, newValue);\r\n    };\r\n\r\n    const examplesComponent = <ExampleList examples={EXAMPLES} onExampleClicked={onExampleClicked} />;\r\n    const sidebar_actions = <ClearChatButton onClick={clearChat} disabled={!lastQuestionRef.current || isLoading} />;\r\n    const sidebar_content = <SummarizeSidebar onDetaillevelChanged={onDetaillevelChanged} detaillevel_pref={detaillevel_pref} />;\r\n    const sidebar = <Sidebar actions={sidebar_actions} content={sidebar_content}></Sidebar>;\r\n\r\n    const answerList = (\r\n        <SumAnswerList\r\n            answers={answers}\r\n            onRollbackMessage={onRollbackMessage}\r\n            isLoading={isLoading}\r\n            error={error}\r\n            makeApiRequest={() => makeApiRequest(lastQuestionRef.current)}\r\n            chatMessageStreamEnd={chatMessageStreamEnd}\r\n            lastQuestionRef={lastQuestionRef}\r\n        />\r\n    );\r\n    const inputComponent = (\r\n        <SumInput\r\n            clearOnSend\r\n            placeholder={t(\"sum.prompt\")}\r\n            disabled={isLoading}\r\n            onSend={(question, file) => makeApiRequest(question, file)}\r\n            question={question}\r\n            setQuestion={setQuestion}\r\n        />\r\n    );\r\n    return (\r\n        <ChatLayout\r\n            sidebar={sidebar}\r\n            examples={examplesComponent}\r\n            answers={answerList}\r\n            input={inputComponent}\r\n            showExamples={!lastQuestionRef.current}\r\n            header={t(\"sum.header\")}\r\n            header_as_markdown={false}\r\n            messages_description={t(\"common.messages\")}\r\n            size=\"small\"\r\n        ></ChatLayout>\r\n    );\r\n};\r\n\r\nexport default Summarize;\r\n","import { Transformer } from \"markmap-lib\";\r\nimport { Markmap } from \"markmap-view\";\r\nimport { useContext, useLayoutEffect, useRef, useState } from \"react\";\r\nimport styles from \"./Mindmap.module.css\";\r\nimport { Stack } from \"@fluentui/react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Button, Tooltip } from \"@fluentui/react-components\";\r\nimport { ArrowDownload24Regular, ContentView24Regular, ScaleFill24Regular } from \"@fluentui/react-icons\";\r\nimport { AnswerIcon } from \"../Answer/AnswerIcon\";\r\nimport { IPureNode } from \"markmap-common\";\r\nimport { LightContext } from \"../../pages/layout/LightContext\";\r\ninterface Props {\r\n    markdown: string;\r\n}\r\n\r\nexport const Mindmap = ({ markdown }: Props) => {\r\n    const { t } = useTranslation();\r\n    const transformer = new Transformer();\r\n    const svgEl = useRef<SVGSVGElement>(null);\r\n    const [isSourceView, setIsSourceView] = useState(false);\r\n    const [freeplaneXML, setFreeplaneXML] = useState(\"\");\r\n    const isLight = useContext(LightContext);\r\n\r\n    useLayoutEffect(() => {\r\n        createMM();\r\n    }, []);\r\n\r\n    const toggleSourceView = () => {\r\n        setIsSourceView(!isSourceView);\r\n        setTimeout(() => {\r\n            if (isSourceView) {\r\n                createMM();\r\n            }\r\n        }, 50);\r\n    };\r\n\r\n    const rescale = () => {\r\n        setTimeout(() => {\r\n            if (!isSourceView) {\r\n                let mm = Markmap.create(svgEl.current as SVGSVGElement);\r\n                mm.destroy();\r\n                createMM();\r\n            }\r\n        }, 50);\r\n    };\r\n\r\n    const download = () => {\r\n        if (svgEl && svgEl.current) {\r\n            // fetch SVG-rendered image as a blob object\r\n            const svgBlob = new Blob([freeplaneXML], {\r\n                type: \"text-plain/mm;charset=utf-8\"\r\n            });\r\n\r\n            // convert the blob object to a dedicated URL\r\n            const url = URL.createObjectURL(svgBlob);\r\n\r\n            // load the SVG blob to a flesh image object\r\n            const img = new Image();\r\n            const link = document.createElement(\"a\");\r\n            link.href = url;\r\n            link.download = \"Idee.mm\";\r\n            document.body.appendChild(link);\r\n            link.click();\r\n            document.body.removeChild(link);\r\n            img.src = url;\r\n        }\r\n    };\r\n\r\n    const parseXML = (parsed: IPureNode) => {\r\n        const doc = document.implementation.createDocument(null, null, null);\r\n        const mapElem = doc.createElement(\"map\");\r\n        mapElem.setAttribute(\"version\", \"freeplane 1.11.1\");\r\n\r\n        const question = doc.createElement(\"node\");\r\n        question.setAttribute(\"TEXT\", parsed.content);\r\n        question.setAttribute(\"FOLDED\", \"false\");\r\n\r\n        for (let child of parsed.children) {\r\n            parseNodes(child, question, doc);\r\n        }\r\n        mapElem.appendChild(question);\r\n        doc.appendChild(mapElem);\r\n        setFreeplaneXML(new XMLSerializer().serializeToString(mapElem));\r\n    };\r\n\r\n    const parseNodes = (to_be_parsed: IPureNode, parent: HTMLElement, doc: XMLDocument) => {\r\n        const result = doc.createElement(\"node\");\r\n        result.setAttribute(\"TEXT\", to_be_parsed.content);\r\n\r\n        //const edge = doc.createElement(\"edge\");\r\n        //edge.setAttribute(\"COLOR\", \"\")\r\n\r\n        for (let child of to_be_parsed.children) {\r\n            parseNodes(child, result, doc);\r\n        }\r\n        parent.appendChild(result);\r\n    };\r\n\r\n    const createMM = () => {\r\n        let mm = Markmap.create(svgEl.current as SVGSVGElement, { autoFit: true });\r\n        if (mm) {\r\n            const { root } = transformer.transform(markdown || \"\");\r\n            parseXML(root);\r\n\r\n            mm.setData(root);\r\n            mm.fit(10);\r\n        }\r\n        svgEl.current?.setAttribute(\"title\", \"Generierte Mindmap\");\r\n    };\r\n\r\n    return (\r\n        <Stack verticalAlign=\"space-between\" className={`${styles.mindmapContainer}`}>\r\n            <Stack.Item>\r\n                <Stack horizontal horizontalAlign=\"space-between\">\r\n                    <AnswerIcon aria-hidden />\r\n                    <div>\r\n                        <Tooltip\r\n                            content={isSourceView ? t(\"components.mindmap.mindmap\") : t(\"components.mindmap.source\")}\r\n                            relationship=\"description\"\r\n                            positioning=\"above\"\r\n                        >\r\n                            <Button\r\n                                appearance=\"subtle\"\r\n                                aria-label={isSourceView ? t(\"components.mindmap.source\") : t(\"components.mindmap.mindmap\")}\r\n                                icon={<ContentView24Regular className={styles.iconRightMargin} />}\r\n                                onClick={() => toggleSourceView()}\r\n                                size=\"large\"\r\n                            ></Button>\r\n                        </Tooltip>\r\n                        {!isSourceView && (\r\n                            <Tooltip content={t(\"components.mindmap.reset\")} relationship=\"description\" positioning=\"above\">\r\n                                <Button\r\n                                    appearance=\"subtle\"\r\n                                    aria-label={t(\"components.mindmap.reset\")}\r\n                                    icon={<ScaleFill24Regular className={styles.iconRightMargin} />}\r\n                                    onClick={() => rescale()}\r\n                                    size=\"large\"\r\n                                ></Button>\r\n                            </Tooltip>\r\n                        )}\r\n                        {!isSourceView && (\r\n                            <Tooltip content={t(\"components.mindmap.download\")} relationship=\"description\" positioning=\"above\">\r\n                                <Button\r\n                                    appearance=\"subtle\"\r\n                                    aria-label={t(\"components.mindmap.download\")}\r\n                                    icon={<ArrowDownload24Regular className={styles.iconRightMargin} />}\r\n                                    onClick={() => download()}\r\n                                    size=\"large\"\r\n                                ></Button>\r\n                            </Tooltip>\r\n                        )}\r\n                    </div>\r\n                </Stack>\r\n            </Stack.Item>\r\n            {!isSourceView ? (\r\n                <Stack.Item grow>\r\n                    <div className={styles.mindmapContainer}>\r\n                        <svg id=\"markmap\" className={`${styles.svgMark} ${isLight ? \"\" : styles.darkmindmap}`} ref={svgEl} aria-hidden=\"true\" role=\"img\"></svg>\r\n                    </div>\r\n                </Stack.Item>\r\n            ) : (\r\n                <Stack.Item grow>\r\n                    <div className={styles.answerText}>{markdown}</div>\r\n                </Stack.Item>\r\n            )}\r\n        </Stack>\r\n    );\r\n};\r\n","import { useRef, useState, useEffect, useContext } from \"react\";\r\n\r\nimport { AskResponse, brainstormApi, BrainstormRequest } from \"../../api\";\r\nimport { QuestionInput } from \"../../components/QuestionInput\";\r\nimport { ClearChatButton } from \"../../components/ClearChatButton\";\r\nimport { LanguageContext } from \"../../components/LanguageSelector/LanguageContextProvider\";\r\nimport { Mindmap } from \"../../components/Mindmap\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { LLMContext } from \"../../components/LLMSelector/LLMContextProvider\";\r\nimport { ChatLayout } from \"../../components/ChatLayout/ChatLayout\";\r\nimport { Sidebar } from \"../../components/Sidebar/Sidebar\";\r\nimport { BRAINSTORM_STORE } from \"../../constants\";\r\nimport { DBMessage, StorageService } from \"../../service/storage\";\r\nimport { handleDeleteChat, handleRollback, setupStore } from \"../page_helpers\";\r\nimport { AnswerList } from \"../../components/AnswerList/AnswerList\";\r\nimport { ExampleList, ExampleModel } from \"../../components/Example\";\r\n\r\ntype BrainstormMessage = DBMessage<AskResponse>;\r\n\r\nconst EXAMPLES: ExampleModel[] = [\r\n    {\r\n        text: \"Maßnahmen für Städte um besser mit dem Klimawandel zurechtzukommen\",\r\n        value: \"Maßnahmen für Städte um besser mit dem Klimawandel zurechtzukommen\"\r\n    },\r\n    {\r\n        text: \"Gründe in München zu wohnen\",\r\n        value: \"Gründe in München zu wohnen\"\r\n    },\r\n    {\r\n        text: \"Wie bereite ich mich am Besten fürs Oktoberfest vor\",\r\n        value: \"Wie bereite ich mich am Besten fürs Oktoberfest vor\"\r\n    }\r\n];\r\n\r\nconst Brainstorm = () => {\r\n    const { language } = useContext(LanguageContext);\r\n    const { LLM } = useContext(LLMContext);\r\n    const { t } = useTranslation();\r\n\r\n    const lastQuestionRef = useRef<string>(\"\");\r\n    const chatMessageStreamEnd = useRef<HTMLDivElement | null>(null);\r\n\r\n    const [isLoading, setIsLoading] = useState<boolean>(false);\r\n    const [error, setError] = useState<unknown>();\r\n\r\n    const [answers, setAnswers] = useState<BrainstormMessage[]>([]);\r\n    const [question, setQuestion] = useState<string>(\"\");\r\n\r\n    const [active_chat, setActiveChat] = useState<string | undefined>(undefined);\r\n    const storageService: StorageService<AskResponse, {}> = new StorageService<AskResponse, {}>(BRAINSTORM_STORE, active_chat);\r\n\r\n    const clearChat = handleDeleteChat(lastQuestionRef, error, setError, storageService, setAnswers, setActiveChat);\r\n    const onRollbackMessage = handleRollback(storageService, setAnswers, lastQuestionRef, setQuestion);\r\n\r\n    useEffect(() => {\r\n        setupStore(error, setError, setIsLoading, storageService, setAnswers, answers, lastQuestionRef, setActiveChat);\r\n    }, []);\r\n\r\n    const onExampleClicked = (example: string) => {\r\n        makeApiRequest(example);\r\n    };\r\n\r\n    const makeApiRequest = async (question: string) => {\r\n        lastQuestionRef.current = question;\r\n\r\n        error && setError(undefined);\r\n        setIsLoading(true);\r\n        try {\r\n            const request: BrainstormRequest = {\r\n                topic: question,\r\n                language: language,\r\n                model: LLM.llm_name\r\n            };\r\n            const result = await brainstormApi(request);\r\n            const completeAnswer: BrainstormMessage = { user: question, response: result };\r\n\r\n            setAnswers([...answers, completeAnswer]);\r\n            if (storageService.getActiveChatId()) await storageService.appendMessage(completeAnswer);\r\n            else {\r\n                const id = await storageService.create([completeAnswer], undefined);\r\n                setActiveChat(id);\r\n            }\r\n        } catch (e) {\r\n            setError(e);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => chatMessageStreamEnd.current?.scrollIntoView({ behavior: \"smooth\" }), [isLoading]);\r\n\r\n    const sidebar_content = <ClearChatButton onClick={clearChat} disabled={!lastQuestionRef.current || isLoading} />;\r\n    const sidebar_actions = <></>;\r\n    const sidebar = <Sidebar actions={sidebar_content} content={sidebar_actions}></Sidebar>;\r\n    const inputComponent = (\r\n        <QuestionInput\r\n            clearOnSend\r\n            placeholder={t(\"brainstorm.prompt\")}\r\n            disabled={isLoading}\r\n            onSend={question => makeApiRequest(question)}\r\n            tokens_used={0}\r\n            question={question}\r\n            setQuestion={question => setQuestion(question)}\r\n        />\r\n    );\r\n    const examplesComponent = <ExampleList examples={EXAMPLES} onExampleClicked={onExampleClicked} />;\r\n\r\n    const answerList = (\r\n        <AnswerList\r\n            answers={answers}\r\n            regularBotMsg={(answer, index) => {\r\n                return <Mindmap markdown={answer.response.answer} />;\r\n            }}\r\n            onRollbackMessage={onRollbackMessage}\r\n            isLoading={isLoading}\r\n            error={error}\r\n            makeApiRequest={() => makeApiRequest(lastQuestionRef.current)}\r\n            chatMessageStreamEnd={chatMessageStreamEnd}\r\n            lastQuestionRef={lastQuestionRef}\r\n        />\r\n    );\r\n    return (\r\n        <ChatLayout\r\n            sidebar={sidebar}\r\n            examples={examplesComponent}\r\n            answers={answerList}\r\n            input={inputComponent}\r\n            showExamples={!lastQuestionRef.current}\r\n            header={t(\"brainstorm.header\")}\r\n            header_as_markdown={false}\r\n            messages_description={t(\"common.messages\")}\r\n            size=\"small\"\r\n        ></ChatLayout>\r\n    );\r\n};\r\n\r\nexport default Brainstorm;\r\n","import { Dismiss24Regular } from \"@fluentui/react-icons\";\r\nimport styles from \"./Faq.module.css\";\r\nimport { Accordion, AccordionHeader, AccordionItem, AccordionPanel, Button, Link, Tooltip } from \"@fluentui/react-components\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst Faq = () => {\r\n    const { t } = useTranslation();\r\n    const navigate = useNavigate();\r\n    const onClose = () => {\r\n        navigate(\"/\");\r\n    };\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={styles.commandsContainer}>\r\n                <Tooltip content={t(\"common.close\")} relationship=\"description\" positioning=\"below\">\r\n                    <Button\r\n                        aria-label={t(\"common.close\")}\r\n                        icon={<Dismiss24Regular className={styles.system_prompt_warining_icon} />}\r\n                        appearance=\"secondary\"\r\n                        onClick={onClose}\r\n                        size=\"large\"\r\n                    ></Button>\r\n                </Tooltip>\r\n            </div>\r\n\r\n            <div className={styles.faqRoot}>\r\n                <h1 className={styles.header}>FAQs</h1>\r\n                <Accordion multiple collapsible navigation=\"linear\">\r\n                    <AccordionItem value=\"1\">\r\n                        <AccordionHeader>Was ist MUCGPT?</AccordionHeader>\r\n                        <AccordionPanel>\r\n                            <div className={styles.panel}>\r\n                                MUCGPT ist ein Hilfsmittel, das unseren Alltag einfacher und effizienter gestalten kann. Es berechnet Wortwahrscheinlichkeiten\r\n                                mithilfe eines neuronalen Netzes, um Antworten zu generieren, die natürlich und plausibel klingen. Diese Antworten sind nicht\r\n                                reproduzierbar. Das bedeutet, dass die gleiche Anfrage zu einem anderen Zeitpunkt unterschiedliche Ergebnisse liefern kann.\r\n                            </div>\r\n                        </AccordionPanel>\r\n                    </AccordionItem>\r\n                    <AccordionItem value=\"2\">\r\n                        <AccordionHeader>Was ist die Basis von MUCGPT bzw. der Unterschied zu ChatGPT?</AccordionHeader>\r\n                        <AccordionPanel>\r\n                            <div className={styles.panel}>\r\n                                MUCGPT basiert auf ChatGPT, einem Dienst von OpenAI und Microsoft. Der Unterschied zu ChatGPT liegt jedoch darin, dass Ihre\r\n                                eingegebenen Daten verschlüsselt an einen europäischen Server von Microsoft Azure nach Amsterdam geschickt werden und nicht in\r\n                                die USA abfließen.\r\n                            </div>\r\n                        </AccordionPanel>\r\n                    </AccordionItem>\r\n                    <AccordionItem value=\"3\">\r\n                        <AccordionHeader>Was ist der Unterschied zu Suchmaschinen wie z.B. Ecosia oder Google?</AccordionHeader>\r\n                        <AccordionPanel>\r\n                            <div className={styles.panel}>\r\n                                Ecosia und Google sind Suchmaschinen, die ans Internet angebunden sind. MUCGPT hat keine Live-Anbindung ans Internet, um sich\r\n                                von dort Informationen zu holen. MUCGPT ist ein Sprachmodell, welches für die Antwort die wahrscheinlichsten Wörter auf Basis\r\n                                der Nutzereingabe berechnet. Dahinter stecken Trainingsdaten, die unbekannt sind (wahrscheinlich sind das zum großen Teil Texte\r\n                                aus dem Internet, aber auch Bücher etc.). Dies führt auch zu falschen Antworten, da das Sprachmodell auch Antworten erfindet,\r\n                                die gut in den Kontext passen.\r\n                                <p>\r\n                                    Google hingegen durchsucht regelmäßig alle Webseiten und indexiert diese in einer Art Datenbank. Bei einer Google-Suche\r\n                                    wird, vereinfacht gesagt, dann diese Datenbank nach dem passenden Treffer durchsucht und zurückgegeben. Wenn man auf der\r\n                                    Suche nach Fakten ist, sollte man Suchmaschinen wie Google, Ecosia etc. verwenden, da diese genauere und vertrauenswürdigere\r\n                                    Treffer liefern.\r\n                                </p>\r\n                                <p>\r\n                                    MUCGPT generiert Wort für Wort aus den Eingaben. Da dahinter ein großes Sprachmodell ist, das auf einem Server mit vielen\r\n                                    Grafikkarten läuft, ist eine Anfrage \"energetisch\" teurer als eine Google-Suche.\r\n                                </p>\r\n                            </div>\r\n                        </AccordionPanel>\r\n                    </AccordionItem>\r\n                    <AccordionItem value=\"4\">\r\n                        <AccordionHeader>Wer darf MUCGPT nutzen?</AccordionHeader>\r\n                        <AccordionPanel>\r\n                            <div className={styles.panel}>\r\n                                MUCGPT darf von allen städtischen Mitarbeiter*innen inkl. externer Dienstleister*innen (alle, die einen muenchen.de-Account\r\n                                besitzen) im dienstlichen Kontext genutzt werden.\r\n                            </div>\r\n                        </AccordionPanel>\r\n                    </AccordionItem>\r\n                    <AccordionItem value=\"5\">\r\n                        <AccordionHeader>Welche Ziele verfolgt MUCGPT?</AccordionHeader>\r\n                        <AccordionPanel>\r\n                            <div className={styles.panel}>\r\n                                MUCGPT kann als Ideengeber, Inspirationsquelle oder Diskussionspartner dienen oder Hilfe bei der Vorstrukturierung und\r\n                                Zusammenfassung von Texten geben. Folgende Ziele können verfolgt werden:\r\n                                <ul>\r\n                                    <li>Erkenntnis-/Ideengewinnung</li>\r\n                                    <li>Effizienzsteigerungen</li>\r\n                                    <li>Verfahrensbeschleunigungen</li>\r\n                                </ul>\r\n                            </div>\r\n                        </AccordionPanel>\r\n                    </AccordionItem>\r\n                    <AccordionItem value=\"6\">\r\n                        <AccordionHeader>Über welche Funktionen verfügt MUCGPT und wie kann ich diese nutzen?</AccordionHeader>\r\n                        <AccordionPanel>\r\n                            <div className={styles.panel}>\r\n                                <div>\r\n                                    <ul>\r\n                                        <li>\r\n                                            <strong>Chat:</strong> Diese Funktion bietet den Nutzer*innen die Möglichkeit, MUCGPT Fragen zu stellen, nach\r\n                                            Informationen zu suchen und verschiedene Themen zu diskutieren.\r\n                                        </li>\r\n                                        <li>\r\n                                            <strong>Zusammenfassen:</strong> Diese Funktion ermöglicht es MUCGPT, prägnante Zusammenfassungen von Themen zu\r\n                                            erstellen, entweder auf der Basis von Eingaben oder hochgeladenen PDFs.\r\n                                        </li>\r\n                                        <li>\r\n                                            <strong>Brainstorming:</strong> Diese Funktion generiert kreative Vorschläge, Ideen und Lösungen auf der Basis von\r\n                                            Eingaben im Kontext einer Mindmap.\r\n                                        </li>\r\n                                    </ul>\r\n                                    <p>\r\n                                        Ein Erklärvideo zu den einzelnen Funktionen mit jeweiligen Beispielen finden Sie{\" \"}\r\n                                        <Link href=\"https://www.youtube.com/watch?v=jLFvdJhRV_U\">hier</Link>.\r\n                                    </p>\r\n                                    <p>\r\n                                        Unter folgendem Link finden sich Hilfestellungen zu Eingaben („Prompts“) bei MUCGPT, um zu erfahren, wie Sie Ihre Fragen\r\n                                        am besten formulieren, um eine gewünschte Antwort zu erhalten:{\" \"}\r\n                                        <Link href=\"https://the-decoder.de/chatgpt-guide-prompt-strategien/\">\r\n                                            https://the-decoder.de/chatgpt-guide-prompt-strategien/\r\n                                        </Link>\r\n                                    </p>\r\n                                    <p>\r\n                                        Um die in der Brainstorming-Funktion generierten Mindmaps nach dem Abspeichern öffnen zu können, nutzen Sie am besten\r\n                                        „Freeplane“, welches Sie in Service Now unter diesem{\" \"}\r\n                                        <Link href=\"https://it-services.muenchen.de/sp?id=sc_cat_item&table=sc_cat_item&sys_id=c1b4dc4f1ba12154a70c433c8b4bcba0\">\r\n                                            Link\r\n                                        </Link>{\" \"}\r\n                                        beantragen können (falls noch nicht auf Ihrem Rechner vorhanden).\r\n                                    </p>\r\n                                </div>\r\n                            </div>\r\n                        </AccordionPanel>\r\n                    </AccordionItem>\r\n                    <AccordionItem value=\"7\">\r\n                        <AccordionHeader>Wie aktuell sind die Quellen, die MUCGPT zur Antwortfindung nutzt?</AccordionHeader>\r\n                        <AccordionPanel>\r\n                            <div className={styles.panel}>\r\n                                Als Datengrundlage wird das jeweils ausgewählte Sprachmodell verwendet. Die Datengrundlage und den Stand können Sie bei Auswahl\r\n                                des Modells entnehmen. Dies ist bei den generierten Antworten unbedingt zu beachten. Um an aktuelle Informationen zu gelangen,\r\n                                können Suchmaschinen wie Ecosia oder Google verwendet werden.\r\n                            </div>\r\n                        </AccordionPanel>\r\n                    </AccordionItem>\r\n                    <AccordionItem value=\"8\">\r\n                        <AccordionHeader>Was muss bei der Überprüfung der Ergebnisse beachtet werden?</AccordionHeader>\r\n                        <AccordionPanel>\r\n                            <div className={styles.panel}>\r\n                                Für seine Antworten durchsucht MUCGPT keine Informationsquellen aus dem Internet oder anderen Datenbanken.\r\n                                <p>\r\n                                    MUCGPT sagt für seine Antworten auf Basis der Nutzereingaben Wörter voraus, die häufig in diesem Kontext vorkommen, weiß\r\n                                    aber nicht, ob die darin enthaltene Information richtig ist. Bei allgemeinen Informationen, die häufig im Internet zu finden\r\n                                    sind, ist es sehr wahrscheinlich, dass die Antwort richtig ist. Bei Randthemen ist das nicht der Fall. Trotzdem wird das\r\n                                    Sprachmodell immer eine grammatikalisch/sprachlich korrekte Antwort geben. Inhaltlich muss sie aber nicht korrekt sein.\r\n                                </p>\r\n                                <p>\r\n                                    Einen großen Einfluss auf die Qualität der Antworten des Sprachmodells haben die Texte, die für das Training des\r\n                                    Sprachmodells genutzt wurden.\r\n                                </p>\r\n                                <p>\r\n                                    Viele Informationen sind in den Trainingsdaten nicht vorhanden, z.B.:\r\n                                    <ul>\r\n                                        <li>Wissen, das zum Zeitpunkt des Trainings noch nicht verfügbar war</li>\r\n                                        <li>Internes Wissen, das z.B. nur im Intranet der Stadt verfügbar ist</li>\r\n                                        <li>Inhalte, die nicht Teil des Trainings waren (nicht jede Website im Internet war Teil des Trainings)</li>\r\n                                    </ul>\r\n                                </p>\r\n                                <p>\r\n                                    Insbesondere ist Vorsicht geboten, wenn MUCGPT nach Zahlen gefragt wird oder Zahlen in dessen Antwort vorhanden sind, da\r\n                                    MUCGPT, bzw. Sprachmodelle im Allgemeinen, Probleme mit Mathematik oder Zahlen haben. Sie wurden darauf trainiert, Wörter\r\n                                    vorherzusagen. Für ein Sprachmodell ist jede Zahl auch eine Art „Wort“. Wörter haben oft einen ganz bestimmten Kontext, in\r\n                                    dem sie eine Bedeutung haben. Zum Beispiel ist es sehr wahrscheinlich, dass das Wort „Krönung“ im Kontext des Wortes „König“\r\n                                    oder „Königin“ vorkommt. Bei der Zahl „2“ ist das nicht so klar. Sie kann in sehr vielen Kontexten vorkommen. Ähnlich\r\n                                    verhält es sich mit konkreten Anfragen an die Statistik.\r\n                                </p>\r\n                                <p>\r\n                                    Sprachmodelle sind daher sehr gut geeignet, um allgemeine (nicht aktuelle) Informationen zu erhalten. Je spezifischer das\r\n                                    abgefragte Wissen ist, desto geringer ist die Wahrscheinlichkeit einer korrekten Antwort.\r\n                                </p>\r\n                                <p>\r\n                                    Wenn man spezifische und aktuelle Informationen sucht, sollte man daher Internet-Suchmaschinen verwenden. Siehe dazu auch\r\n                                    den Punkt oben <i>„Was ist der Unterschied zu Suchmaschinen wie z.B. Ecosia oder Google?“</i>\r\n                                </p>\r\n                            </div>\r\n                        </AccordionPanel>\r\n                    </AccordionItem>\r\n                    <AccordionItem value=\"9\">\r\n                        <AccordionHeader>Was muss ich bezüglich der Weiterverwendung der Ergebnisse beachten?</AccordionHeader>\r\n                        <AccordionPanel>\r\n                            <div className={styles.panel}>\r\n                                Es ist möglich, dass Texte (Antworten) von MUCGPT sich nur minimal von der ursprünglichen Version unterscheiden oder sogar\r\n                                wesentliche Elemente des Ursprungstextes identisch übernommen werden. Wer dann einen solchen Text vervielfältigt oder\r\n                                veröffentlicht, begeht damit – ohne es beabsichtigt zu haben – eine Urheberrechtsverletzung. Der Urheber des Originals kann in\r\n                                einem solchen Fall Unterlassungs-, Schadensersatz- und Beseitigungsansprüche geltend machen. Bei jeglicher Nutzung der\r\n                                Ergebnisse (egal ob intern oder extern), muss daher eine Kennzeichnung erfolgen („Quelle: MUCGPT“). Die Verantwortung für die\r\n                                Weiterverwendung der Ergebnisse trägt der/die MUCGPT-Nutzer*in.\r\n                                <p>\r\n                                    Weiterhin muss beachtet werden, dass die Ergebnisse entsprechend dem jeweiligen Rechtsgebiet angemessen weiterverwendet\r\n                                    werden. Das bedeutet, dass es (je nach betroffenem Rechtsgebiet) wichtig ist, nahe am üblichen Standard der Formulierungen\r\n                                    zu bleiben, damit hier keine Ungleichheit oder Unverständlichkeit z.B. aufgrund von (durch die KI) anders gewählten\r\n                                    Fachbegriffen o.ä. entsteht. Bei der Nutzung von solch künstlich erzeugten Ergebnissen sollte immer auch der gesunde\r\n                                    Menschenverstand angewendet werden, damit die Adressaten dieser Texte diese sowohl verstehen als auch sich darauf verlassen\r\n                                    können.\r\n                                </p>\r\n                            </div>\r\n                        </AccordionPanel>\r\n                    </AccordionItem>\r\n                    <AccordionItem value=\"10\">\r\n                        <AccordionHeader>Formulierungshilfen Zitierstile</AccordionHeader>\r\n                        <AccordionPanel>\r\n                            <div className={styles.panel}>\r\n                                <ul>\r\n                                    <li>Dieser Text wurde mit Hilfe von MUCGPT erstellt und redaktionell auf Richtigkeit geprüft.</li>\r\n                                    <li>\r\n                                        Der vorliegende Text wurde mit Hilfe von MUCGPT erstellt und im Anschluss sorgfältig auf seine Korrektheit hin\r\n                                        überprüft.\r\n                                    </li>\r\n                                    <li>Quelle: MUCGPT</li>\r\n                                </ul>\r\n                            </div>\r\n                        </AccordionPanel>\r\n                    </AccordionItem>\r\n                    <AccordionItem value=\"11\">\r\n                        <AccordionHeader>Was muss ich bezüglich der Informationssicherheit und des Datenschutzes beachten?</AccordionHeader>\r\n                        <AccordionPanel>\r\n                            <div className={styles.panel}>\r\n                                Es ist nicht erlaubt, Daten mit LHM-Schutzbedarf \"hoch\" oder \"sehr hoch\" oder mit der Klassifizierung \"vertraulich\" oder \"streng\r\n                                vertraulich\" als Eingabe zu verwenden. Es dürfen keine personenbezogenen Daten (z.B. Name, Adresse, Telefonnummer,\r\n                                E-Mail-Adressen etc.) eingegeben werden. Weiterhin dürfen keine Zahlungsdaten (IBAN, BIC, Zahlungsempfänger, Vertragspartner\r\n                                etc.) eingegeben werden.\r\n                                <p>\r\n                                    Bitte beachten Sie, dass auch bei Nutzung von MUCGPT die Vorschriften der LHM (z.B.{\" \"}\r\n                                    <Link href=\"https://wilma.muenchen.de/pages/it-nutzung-support/apps/wiki/dienstanweisung/list/view/293986cc-4ded-4aad-ac2a-dd831540eb5c?currentLanguage=NONE\">\r\n                                        DA-IT\r\n                                    </Link>\r\n                                    ) zu beachten sind.\r\n                                </p>\r\n                            </div>\r\n                        </AccordionPanel>\r\n                    </AccordionItem>\r\n                    <AccordionItem value=\"12\">\r\n                        <AccordionHeader>Werden meine Eingaben irgendwo gespeichert? Wer hat Zugriff auf die Daten?</AccordionHeader>\r\n                        <AccordionPanel>\r\n                            <div className={styles.panel}>\r\n                                Ihre Eingaben werden nicht gespeichert. Keiner hat Zugriff auf Ihre eingegebenen Daten sowie die generierten Antworten.\r\n                            </div>\r\n                        </AccordionPanel>\r\n                    </AccordionItem>\r\n                    <AccordionItem value=\"13\">\r\n                        <AccordionHeader>Wo werden die Chats der Chat-Historie gespeichert?</AccordionHeader>\r\n                        <AccordionPanel>\r\n                            <div className={styles.panel}>\r\n                                Die gespeicherten Chats in Ihrer Historie werden lokal in Ihrem Browser gespeichert (IndexedDB). Dadurch sind die Chats nur für\r\n                                Sie zugänglich und werden nicht in der Cloud oder auf einem Server gespeichert. Allerdings sind somit die Chats auch nur auf\r\n                                diesem Gerät und diesem Browser zugänglich. Bei einem Wechsel auf ein anderes Gerät, einen anderen Browser oder in einen\r\n                                Inkognito-Tab sind die gespeicherten Chats nicht mehr verfügbar.\r\n                            </div>\r\n                        </AccordionPanel>\r\n                    </AccordionItem>\r\n                    <AccordionItem value=\"14\">\r\n                        <AccordionHeader>Werden meine Eingaben für Trainingszwecke der Software verwendet?</AccordionHeader>\r\n                        <AccordionPanel>\r\n                            <div className={styles.panel}>Nein.</div>\r\n                        </AccordionPanel>\r\n                    </AccordionItem>\r\n                    <AccordionItem value=\"15\">\r\n                        <AccordionHeader>Werden meine Eingaben anderweitig verwendet?</AccordionHeader>\r\n                        <AccordionPanel>\r\n                            <div className={styles.panel}>Nein.</div>\r\n                        </AccordionPanel>\r\n                    </AccordionItem>\r\n                </Accordion>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Faq;\r\n","export default \"__VITE_ASSET__DJx87Vte__\"","export default \"__VITE_ASSET__DbHZKafU__\"","export default \"__VITE_ASSET__DRNAFGmf__\"","export default \"__VITE_ASSET__BXE7UGQm__\"","import styles from \"./Version.module.css\";\r\nimport { Accordion, AccordionHeader, AccordionItem, AccordionPanel, Button, Tooltip } from \"@fluentui/react-components\";\r\nimport vorgeschlageneAntworten from \"../../assets/vorgeschlagene_antworten.png\";\r\nimport zurückziehen from \"../../assets/zurückziehen.png\";\r\nimport history from \"../../assets/History.png\";\r\nimport simply from \"../../assets/simply.png\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Dismiss24Regular } from \"@fluentui/react-icons\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst Version = () => {\r\n    const { t } = useTranslation();\r\n    const navigate = useNavigate();\r\n    const onClose = () => {\r\n        navigate(\"/\");\r\n    };\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={styles.commandsContainer}>\r\n                <Tooltip content={t(\"common.close\")} relationship=\"description\" positioning=\"below\">\r\n                    <Button\r\n                        aria-label={t(\"common.close\")}\r\n                        icon={<Dismiss24Regular className={styles.system_prompt_warining_icon} />}\r\n                        appearance=\"secondary\"\r\n                        onClick={onClose}\r\n                        size=\"large\"\r\n                    ></Button>\r\n                </Tooltip>\r\n            </div>\r\n\r\n            <div className={styles.versionRoot}>\r\n                <h1 className={styles.header}>{t(\"version.header\")}</h1>\r\n                <Accordion multiple collapsible defaultOpenItems=\"12\">\r\n                    <AccordionItem value=\"12\">\r\n                        <AccordionHeader>[1.2.3] 30.01.2025</AccordionHeader>\r\n                        <AccordionPanel>\r\n                            <div className={styles.panel}>\r\n                                <h3>{t(\"version.added\")}</h3>\r\n                                <ul>\r\n                                    <li>\r\n                                        Neuer Community-Assistent Sherlock 🕵️‍♂️. Unterstützt beim Review und der Erstellung von Testfällen. Entwickelt von\r\n                                        itm.km73.\r\n                                    </li>\r\n                                </ul>\r\n                                <h3>{t(\"version.fixed\")}</h3>\r\n                                <ul>\r\n                                    <li>\r\n                                        Brainstorming:\r\n                                        <ul>\r\n                                            <li>Mindmaps werden nun im dunklen Design richtig dargestellt.</li>\r\n                                        </ul>\r\n                                    </li>\r\n                                    <li>\r\n                                        Einfache Sprache:\r\n                                        <ul>\r\n                                            <li>\r\n                                                Links werden nun beim Übersetzen in einfache Sprache ignoriert. Dies hatte zuvor zu Halluzinationen geführt.\r\n                                            </li>\r\n                                        </ul>\r\n                                    </li>\r\n                                    <li>\r\n                                        Es ist nun möglich, partielle Codeblöcke in Chrome zu kopieren. Dies hatte zuvor zu Zeilenumbrüchen nach jedem Wort\r\n                                        geführt.\r\n                                    </li>\r\n                                    <li>Ein Fehler bei der Kommunikation mit Mistral-Modellen über die API wurde behoben.</li>\r\n                                </ul>\r\n                                <h3>{t(\"version.changed\")}</h3>\r\n                                <ul>\r\n                                    <li>\r\n                                        Brainstorming:\r\n                                        <ul>\r\n                                            <li>\r\n                                                Mindmap-Erstellung wurde verbessert. Mehr Kindknoten werden generiert, was zu größeren, detaillierteren Mindmaps\r\n                                                führt.\r\n                                            </li>\r\n                                        </ul>\r\n                                    </li>\r\n                                    <li>\r\n                                        Assistenten:\r\n                                        <ul>\r\n                                            <li>\r\n                                                Assistenten können nun mehrere Chatverläufe haben. Ähnlich wie bei der Chatfunktion kann ein Chatverlauf\r\n                                                umbenannt und favorisiert werden. Die Daten werden ausschließlich lokal im Browser gespeichert.\r\n                                            </li>\r\n                                        </ul>\r\n                                    </li>\r\n                                    <li>\r\n                                        Einfache Sprache:\r\n                                        <ul>\r\n                                            <li>\r\n                                                Der Titel des <i>leichte Sprache</i> Beispiels wurde umbenannt. Es handelt sich hierbei richtigerweise um einen\r\n                                                Artikel zum Arbeitsschutzgesetz.\r\n                                            </li>\r\n                                        </ul>\r\n                                    </li>\r\n                                    <li>\r\n                                        Generelle Oberflächenverbesserungen:\r\n                                        <ul>\r\n                                            <li>\r\n                                                Jede Funktion (z.B. Chat, Zusammenfassen) hat nun die Aktionselemente in einer immer geöffneten Sidebar auf der\r\n                                                linken Seite.\r\n                                            </li>\r\n                                            <li>\r\n                                                Das lokale Speichermanagement in der Browserdatenbank wurde verbessert und vereinheitlicht. Bestehende Daten\r\n                                                (alte Chats und Assistenten) werden migriert. ⚠ Konversationen in <i>Zusammenfassen</i>, <i>Brainstorming</i>{\" \"}\r\n                                                und <i>Einfache Sprache</i> bleiben nicht erhalten.\r\n                                            </li>\r\n                                        </ul>\r\n                                    </li>\r\n                                </ul>\r\n                            </div>\r\n                        </AccordionPanel>\r\n                    </AccordionItem>\r\n                    <AccordionItem value=\"11\">\r\n                        <AccordionHeader>[1.2.2] 07.11.2024</AccordionHeader>\r\n                        <AccordionPanel>\r\n                            <div className={styles.panel}>\r\n                                <h3>{t(\"version.added\")}</h3>\r\n                                <ul>\r\n                                    <li>\r\n                                        Es besteht nun die Möglichkeit, eigene Assistenten zu erstellen. Diese Funktion ermöglicht es den Benutzern, für\r\n                                        wiederkehrende Aufgaben spezialisierte Assistenten zu entwickeln, die mit einem Systemprompt ausgestattet sind.\r\n                                        <ul>\r\n                                            Beispiele für Assistenten sind:\r\n                                            <li>Englisch-Übersetzer: Übersetzt alle Eingaben ins Englische.</li>\r\n                                            <li>Testgenerator: Erstellt hilfreiche Testfälle basierend auf dem eingegebenen Programmcode.</li>\r\n                                            <li>Lektor: Korrigiert eingegebene Texte und schlägt alternative Formulierungen vor.</li>\r\n                                        </ul>\r\n                                    </li>\r\n                                    <li>\r\n                                        Um einen Assistenten zu erstellen, beschreibt der Benutzer die gewünschte Funktion in einem Textfeld. MUCGPT generiert\r\n                                        daraufhin einen passenden Titel, eine Beschreibung und einen Systemprompt, die anschließend weiter angepasst werden\r\n                                        können.\r\n                                    </li>\r\n                                </ul>\r\n                                <h3>{t(\"version.fixed\")}</h3>\r\n                                <ul>\r\n                                    <li>Verschiedene Fehler im Frontend wurden behoben.</li>\r\n                                </ul>\r\n                                <h3>{t(\"version.changed\")}</h3>\r\n                                <ul>\r\n                                    <li>Das Design der Benutzeroberfläche von MUCGPT wurde aktualisiert.</li>\r\n                                    <li>🧜‍♀️ Arielle, die Diagramm-Assistentin, ist jetzt unter \"Community Assistenten\" zu finden und nicht mehr im Chat.</li>\r\n                                </ul>\r\n                            </div>\r\n                        </AccordionPanel>\r\n                    </AccordionItem>\r\n                    <AccordionItem value=\"10\">\r\n                        <AccordionHeader>[1.2.1] 27.09.2024</AccordionHeader>\r\n                        <AccordionPanel>\r\n                            <div className={styles.panel}>\r\n                                <h3>{t(\"version.added\")}</h3>\r\n                                <ul>\r\n                                    <li>\r\n                                        Neben den Funktionen Chat, Zusammenfassen und Brainstorming bieten wir nun als viertes Feature \"Leichte Sprache\" an.\r\n                                        <p>\r\n                                            <img width=\"70%\" src={simply} alt=\"Bild zur Leichten Sprache\"></img>\r\n                                        </p>\r\n                                        <ul>\r\n                                            <li>\r\n                                                Über einen Chat können Texte an das Sprachmodell gesendet werden, die in leichte oder einfache Sprache übersetzt\r\n                                                werden.\r\n                                            </li>\r\n                                            <li>Oben rechts können Sie auswählen, ob der Text in leichte oder einfache Sprache übersetzt werden soll.</li>\r\n                                            <li>\r\n                                                Einfache Sprache ist eine vereinfachte Form der Standardsprache, die auf Komplexität verzichtet, um eine\r\n                                                breitere Zielgruppe zu erreichen.\r\n                                            </li>\r\n                                            <li>\r\n                                                Leichte Sprache verwendet einfache Wörter und kurze Sätze, um Informationen klar und verständlich zu vermitteln.\r\n                                            </li>\r\n                                            <li>\r\n                                                Das Feature \"Leichte Sprache\" nutzt dasselbe Sprachmodell wie die anderen Features, das über die Einstellungen\r\n                                                ausgewählt wird. Wir empfehlen jedoch für die Nutzung von \"Leichte Sprache\" die Modelle{\" \"}\r\n                                                <strong>mistral-large-2407</strong> oder <strong>gpt-4o</strong> zu verwenden.\r\n                                            </li>\r\n                                        </ul>\r\n                                    </li>\r\n                                </ul>\r\n                                <h3>{t(\"version.fixed\")}</h3>\r\n                                <ul>\r\n                                    <li>\r\n                                        Benutzer, die sich noch nicht in ServiceNow für MUCGPT registriert haben, werden beim Aufrufen des Dienstes automatisch\r\n                                        zu ServiceNow weitergeleitet.\r\n                                    </li>\r\n                                    <li>Die Performance bei längeren Chats mit einer hohen Anzahl an generierten Tokens wurde optimiert.</li>\r\n                                </ul>\r\n                                <h3>{t(\"version.changed\")}</h3>\r\n                            </div>\r\n                        </AccordionPanel>\r\n                    </AccordionItem>\r\n                    <AccordionItem value=\"9\">\r\n                        <AccordionHeader>[1.2.0] 18.09.2024</AccordionHeader>\r\n                        <AccordionPanel>\r\n                            <div className={styles.panel}>\r\n                                <h3>{t(\"version.added\")}</h3>\r\n                                <h3>{t(\"version.fixed\")}</h3>\r\n                                <ul>\r\n                                    <li>Generierter Code wurde manchmal nicht korrekt dargestellt (Klammern entfernt).</li>\r\n                                </ul>\r\n                                <h3>{t(\"version.changed\")}</h3>\r\n                            </div>\r\n                        </AccordionPanel>\r\n                    </AccordionItem>\r\n                    <AccordionItem value=\"8\">\r\n                        <AccordionHeader>[1.1.4] 11.09.2024</AccordionHeader>\r\n                        <AccordionPanel>\r\n                            <div className={styles.panel}>\r\n                                <h3>{t(\"version.added\")}</h3>\r\n                                <h3>{t(\"version.fixed\")}</h3>\r\n                                <ul>\r\n                                    <li>Versionsnummer wird wieder richtig gespeichert und in den Einstellungen angezeigt.</li>\r\n                                    <li>\r\n                                        Maximale Tokens aus der Config aufgeteilt in Input- und Output-Tokens. Dadurch laufen Modelle mit kleineren\r\n                                        Kontextfenstern (wie z.B. Mistral) nicht mehr in einen Fehler.\r\n                                    </li>\r\n                                </ul>\r\n                                <h3>{t(\"version.changed\")}</h3>\r\n                            </div>\r\n                        </AccordionPanel>\r\n                    </AccordionItem>\r\n                    <AccordionItem value=\"7\">\r\n                        <AccordionHeader>[1.1.3] 28.08.2024</AccordionHeader>\r\n                        <AccordionPanel>\r\n                            <div className={styles.panel}>\r\n                                <h3>{t(\"version.added\")}</h3>\r\n                                <ul>\r\n                                    <li>\r\n                                        Benutzer haben nun die Möglichkeit, zwischen 3 verschiedenen Sprachmodellen zu wählen, welches für ihren Anwendungsfall\r\n                                        am besten passt.\r\n                                        <ul>\r\n                                            <li>GPT-4o-mini</li>\r\n                                            <li>GPT-4o</li>\r\n                                            <li>Mistral-Large-2407</li>\r\n                                        </ul>\r\n                                    </li>\r\n                                </ul>\r\n                                <h3>{t(\"version.fixed\")}</h3>\r\n                                <h3>{t(\"version.changed\")}</h3>\r\n                                <ul>\r\n                                    <li>Das standardmäßig benutzte Sprachmodell wurde von GPT-3.5 auf die neuere Version GPT-4o-mini geändert.</li>\r\n                                    <li>\r\n                                        Verbesserung der \"Zusammenfassen\"-Funktion:\r\n                                        <ul>\r\n                                            <li>Weniger Fehler</li>\r\n                                            <li>Zuverlässigere Zusammenfassungen in der gewünschten Struktur</li>\r\n                                        </ul>\r\n                                    </li>\r\n                                </ul>\r\n                            </div>\r\n                        </AccordionPanel>\r\n                    </AccordionItem>\r\n                    <AccordionItem value=\"6\">\r\n                        <AccordionHeader>[1.1.2] 31.07.2024</AccordionHeader>\r\n                        <AccordionPanel>\r\n                            <div className={styles.panel}>\r\n                                <h3>{t(\"version.added\")}</h3>\r\n                                <ul>\r\n                                    <li>\r\n                                        Für die Chat-Funktion gibt es nun eine Historie aller durchgeführten Konversationen.\r\n                                        <p>\r\n                                            <img width=\"70%\" src={history}></img>\r\n                                        </p>\r\n                                        <ul>\r\n                                            <li>Alle Chat-Verläufe im Tab \"Chat\" werden automatisch gespeichert.</li>\r\n                                            <li>Chats können im \"Historie\"-Fenster gelöscht, umbenannt oder favorisiert werden.</li>\r\n                                            <li>Favorisierte Chats werden immer ganz oben angezeigt.</li>\r\n                                            <li>\r\n                                                Die Chats werden nach dem letzten Bearbeitungszeitpunkt sortiert und gruppiert in \"Heute\", \"Gestern\", \"Letzte 7\r\n                                                Tage\" und \"Älter\".\r\n                                            </li>\r\n                                        </ul>\r\n                                    </li>\r\n                                </ul>\r\n                                <h3>{t(\"version.fixed\")}</h3>\r\n                                <h3>{t(\"version.changed\")}</h3>\r\n                            </div>\r\n                        </AccordionPanel>\r\n                    </AccordionItem>\r\n                    <AccordionItem value=\"5\">\r\n                        <AccordionHeader>[1.1.1] 04.06.2024</AccordionHeader>\r\n                        <AccordionPanel>\r\n                            <div className={styles.panel}>\r\n                                <h3>{t(\"version.added\")}</h3>\r\n                                <ul>\r\n                                    <li>Neuer Hinweis im Antwortfeld vom Chat: MUCGPT macht Fehler.</li>\r\n                                </ul>\r\n                                <h3>{t(\"version.fixed\")}</h3>\r\n                                <ul>\r\n                                    <li>Der Hilfstext für den Systemprompt ist nicht mehr transparent.</li>\r\n                                </ul>\r\n                                <h3>{t(\"version.changed\")}</h3>\r\n                                <ul>\r\n                                    <li>Die Beschreibung des Arielle-Chat-Beispiels wurde verbessert.</li>\r\n                                </ul>\r\n                            </div>\r\n                        </AccordionPanel>\r\n                    </AccordionItem>\r\n                    <AccordionItem value=\"1\">\r\n                        <AccordionHeader>[1.1.0] 22.05.2024</AccordionHeader>\r\n                        <AccordionPanel>\r\n                            <div className={styles.panel}>\r\n                                <h3>{t(\"version.added\")}</h3>\r\n                                <ul>\r\n                                    <li>\r\n                                        Chat/Zusammenfassen/Brainstorming:\r\n                                        <ul>\r\n                                            <li>\r\n                                                Eigene Nachrichten können zurückgenommen werden. Beim Klicken des entsprechenden Buttons werden alle darunter\r\n                                                liegenden Nachrichten und die ausgewählte Nachricht gelöscht. In das Eingabefeld wird die ausgewählte Nachricht\r\n                                                eingefügt und kann abgeändert werden:\r\n                                                <p>\r\n                                                    <img width=\"70%\" src={zurückziehen}></img>\r\n                                                </p>\r\n                                            </li>\r\n                                            <li>\r\n                                                Der aktuelle Chatverlauf wird im Browser zwischengespeichert und bleibt somit beim Verlassen der Seite bestehen.\r\n                                            </li>\r\n                                        </ul>\r\n                                    </li>\r\n                                    <li>Was gibt's Neues?: Updatehistorie kann angezeigt werden.</li>\r\n                                    <li>\r\n                                        Chat:\r\n                                        <ul>\r\n                                            <li>\r\n                                                <div>\r\n                                                    Auf eine Antwort von MUCGPT werden nun <b>Antwortmöglichkeiten</b> vorgeschlagen. Beim Auswählen einer\r\n                                                    Antwortmöglichkeit wird ein entsprechender Prompt in das Eingabefeld geladen:\r\n                                                </div>\r\n                                                <p>\r\n                                                    <img width=\"80%\" src={vorgeschlageneAntworten}></img>\r\n                                                </p>\r\n                                            </li>\r\n                                            <li>\r\n                                                <b>Mermaid-Diagramme</b> können im Chat angezeigt und heruntergeladen werden.\r\n                                            </li>\r\n                                            <li>\r\n                                                Es gibt Arielle, die Diagramm-Assistentin. Diese begleitet den Nutzer beim Erstellen von Mermaid-Diagrammen.\r\n                                            </li>\r\n                                            <li>Mehr Platz für die Eingabe des Systemprompts.</li>\r\n                                            <li>Warnmeldung wird angezeigt, falls ein Systemprompt gesetzt ist.</li>\r\n                                            <li>Bessere Beschreibungen für die Temperatureinstellung.</li>\r\n                                        </ul>\r\n                                    </li>\r\n                                </ul>\r\n                                <h3>{t(\"version.fixed\")}</h3>\r\n                                <ul>\r\n                                    <li>Der Systemprompt wird nun ins Tokenlimit miteinbezogen.</li>\r\n                                </ul>\r\n                                <h3>{t(\"version.changed\")}</h3>\r\n                            </div>\r\n                        </AccordionPanel>\r\n                    </AccordionItem>\r\n                    <AccordionItem value=\"2\">\r\n                        <AccordionHeader>[1.0.0] 26.02.2024</AccordionHeader>\r\n                        <AccordionPanel>\r\n                            <div className={styles.panel}>\r\n                                <h3>{t(\"version.added\")}</h3>\r\n                                <ul>\r\n                                    <li>Produktivumgebung aufgebaut.</li>\r\n                                    <li>FAQ wurde ergänzt.</li>\r\n                                </ul>\r\n                                <h3>{t(\"version.fixed\")}</h3>\r\n                                <ul>\r\n                                    <li>Fehlermeldungen anzeigen, falls das Sprachmodell während des Streamings überlastet ist.</li>\r\n                                    <li>Rechtschreibfehler in Hilfetexten verbessert.</li>\r\n                                </ul>\r\n                                <h3>{t(\"version.changed\")}</h3>\r\n                                <ul>\r\n                                    <li>Nutzungsbedingungen müssen nun einmal am Tag bestätigt werden.</li>\r\n                                    <li>Nutzungsbedingungen wurden ergänzt.</li>\r\n                                    <li>Hinweis auf Servicedesk.</li>\r\n                                    <li>Link zum Wilma-Arbeitsraum.</li>\r\n                                </ul>\r\n                                <li>Chat-Beispiele von der Community wurden eingepflegt.</li>\r\n                            </div>\r\n                        </AccordionPanel>\r\n                    </AccordionItem>\r\n                    <AccordionItem value=\"3\">\r\n                        <AccordionHeader>[0.3.0] 06.02.2024</AccordionHeader>\r\n                        <AccordionPanel>\r\n                            <div className={styles.panel}>\r\n                                <h3>{t(\"version.added\")}</h3>\r\n                                <ul>\r\n                                    <li>Bereits getätigte Einstellungen werden gespeichert (z.B. Sprache, Systemprompt, Nutzungsbedingungen gelesen).</li>\r\n                                    <li>\r\n                                        Barrierefreiheit:\r\n                                        <ul>\r\n                                            <li>Optimierte Darstellung für Screenreader.</li>\r\n                                            <li>Bessere Unterscheidbarkeit für Farbenblinde.</li>\r\n                                            <li>Unterstützung von Windows High Contrast Mode.</li>\r\n                                            <li>Und noch viele weitere Optimierungen ...</li>\r\n                                        </ul>\r\n                                    </li>\r\n                                </ul>\r\n                                <h3>{t(\"version.fixed\")}</h3>\r\n                                <ul>\r\n                                    <li>\r\n                                        Als Code (mit Single-Backticks, ` ) formatierte Wörter in Antworten werden nun nicht mehr als Codeblock dargestellt, da\r\n                                        dies zu sehr den Lesefluss gestört hat.\r\n                                    </li>\r\n                                </ul>\r\n                                <h3>{t(\"version.changed\")}</h3>\r\n                                <ul>\r\n                                    <li>\r\n                                        Brainstorm:\r\n                                        <ul>\r\n                                            <li>\r\n                                                Mindmaps sind nun im .mm-Format herunterladbar und können mit dem Mindmap-Tool Freeplane weiterverarbeitet\r\n                                                werden.\r\n                                            </li>\r\n                                        </ul>\r\n                                    </li>\r\n                                    <li>\r\n                                        Zusammenfassen:\r\n                                        <ul>\r\n                                            <li>\r\n                                                Die Länge der Zusammenfassung hängt nun von der Gesamtlänge des Eingabetexts ab - längere Eingabetexte führen zu\r\n                                                längeren Zusammenfassungen.\r\n                                            </li>\r\n                                            <li>Der Detaillierungsgrad (kurz, mittel, lang) lässt sich über eine eigene Einstellung setzen.</li>\r\n                                        </ul>\r\n                                    </li>\r\n                                    <li>Design vereinheitlicht.</li>\r\n                                    <li>Dark Mode hinzugefügt.</li>\r\n                                    <li>Nutzungsbedingungen aktualisiert.</li>\r\n                                </ul>\r\n                            </div>\r\n                        </AccordionPanel>\r\n                    </AccordionItem>\r\n                    <AccordionItem value=\"4\">\r\n                        <AccordionHeader>[0.3.0] 06.02.2024</AccordionHeader>\r\n                        <AccordionPanel>\r\n                            <div className={styles.panel}>\r\n                                ❄Neujahrsupdate❄\r\n                                <h3>{t(\"version.added\")}</h3>\r\n                                <ul>\r\n                                    <li>\r\n                                        Bessere Darstellung von Antworten, die Markdown enthalten:\r\n                                        <ul>\r\n                                            <li>Bei Codeblöcken wird die Programmiersprache mit angezeigt.</li>\r\n                                            <li>Bei Codeblöcken werden die Zeilennummern mit angegeben.</li>\r\n                                        </ul>\r\n                                    </li>\r\n                                    <li>\r\n                                        Zusammenfassen:\r\n                                        <ul>\r\n                                            <li>Zusammenfassungen können kopiert werden.</li>\r\n                                            <li>Tokenlimit (Wörterlimit) wurde entfernt.</li>\r\n                                            <li>Es können PDFs hochgeladen werden, die anschließend zusammengefasst werden.</li>\r\n                                        </ul>\r\n                                    </li>\r\n                                    <li>\r\n                                        Chat:\r\n                                        <ul>\r\n                                            <li>\r\n                                                Antworten können nun optional unformatiert angezeigt werden (Alternative zur automatischen Darstellung als\r\n                                                HTML/Markdown).\r\n                                            </li>\r\n                                            <li>\r\n                                                Mehr Einstellungen für den Chat:\r\n                                                <ul>\r\n                                                    <li>Temperatur: Kreativität der Antworten festlegen.</li>\r\n                                                    <li>Maximale Antwortlänge.</li>\r\n                                                    <li>Systemprompt: Verhalten des Sprachmodells festlegen, indem man z.B. eine bestimmte Rolle vergibt.</li>\r\n                                                </ul>\r\n                                            </li>\r\n                                        </ul>\r\n                                    </li>\r\n                                </ul>\r\n                                <h3>{t(\"version.fixed\")}</h3>\r\n                                <ul>\r\n                                    <li>Bei längeren Eingaben ist das Eingabetextfeld nicht mitgewachsen.</li>\r\n                                    <li>\r\n                                        Falls Antworten HTML enthalten wie &lt;, wird dies nicht mehr in &amp;lt; übersetzt. R-Skripte oder Bash Skripte sollten\r\n                                        nun wieder korrekt generiert werden.\r\n                                    </li>\r\n                                    <li>\r\n                                        Generierte Antworten mit Codeblöcken in Markdown: Falls keine Sprache im zurückgegebenen Codeblock definiert war und\r\n                                        dieser sehr lange Zeilen enthalten hat, gab es keinen Zeilenumbruch.\r\n                                    </li>\r\n                                    <li>\r\n                                        Falls die Authentifizierungsinformationen ausgelaufen sind (Fenster zu lange offen ohne Interaktion), wird die Seite neu\r\n                                        geladen.\r\n                                    </li>\r\n                                </ul>\r\n                                <h3>{t(\"version.changed\")}</h3>\r\n                            </div>\r\n                        </AccordionPanel>\r\n                    </AccordionItem>\r\n                </Accordion>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Version;\r\n","import { BotAdd24Regular } from \"@fluentui/react-icons\";\r\nimport { Button, Tooltip } from \"@fluentui/react-components\";\r\n\r\nimport styles from \"./AddBotButton.module.css\";\r\nimport { useTranslation } from \"react-i18next\";\r\ninterface Props {\r\n    onClick: () => void;\r\n}\r\n\r\nexport const AddBotButton = ({ onClick }: Props) => {\r\n    const { t } = useTranslation();\r\n    return (\r\n        <div className={styles.container}>\r\n            <Tooltip content={t(\"components.add_bot_button.add_bot\")} relationship=\"description\" positioning=\"below\">\r\n                <Button\r\n                    appearance=\"secondary\"\r\n                    aria-label={t(\"components.add_bot_button.add_bot\")}\r\n                    icon={<BotAdd24Regular className={styles.iconLeftMargin} />}\r\n                    onClick={onClick}\r\n                    size=\"large\"\r\n                >\r\n                    {t(\"components.add_bot_button.add_bot\")}\r\n                </Button>\r\n            </Tooltip>\r\n        </div>\r\n    );\r\n};\r\n","import { ArrowRight24Regular, Checkmark24Filled, Dismiss24Regular, EditArrowBack24Regular } from \"@fluentui/react-icons\";\r\nimport {\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogBody,\r\n    DialogContent,\r\n    DialogSurface,\r\n    DialogTitle,\r\n    DialogTrigger,\r\n    Field,\r\n    Textarea,\r\n    TextareaOnChangeData\r\n} from \"@fluentui/react-components\";\r\n\r\nimport styles from \"./CreateBotDialog.module.css\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useContext, useState } from \"react\";\r\nimport { LLMContext } from \"../LLMSelector/LLMContextProvider\";\r\nimport { Bot, createBotApi } from \"../../api\";\r\nimport { BOT_STORE, CREATE_BOT_EXAMPLE_1, CREATE_BOT_EXAMPLE_2, CREATE_BOT_EXAMPLE_3 } from \"../../constants\";\r\nimport { BotStorageService } from \"../../service/botstorage\";\r\n\r\ninterface Props {\r\n    showDialogInput: boolean;\r\n    setShowDialogInput: (showDialogInput: boolean) => void;\r\n}\r\n\r\nexport const CreateBotDialog = ({ showDialogInput, setShowDialogInput }: Props) => {\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n    const [input, setInput] = useState<string>(\"\");\r\n    const [description, setDescription] = useState<string>(\"\");\r\n    const [systemPrompt, setSystemPrompt] = useState<string>(\"\");\r\n    const { LLM } = useContext(LLMContext);\r\n    const [title, setTitle] = useState<string>(\"\");\r\n    const [showDialogOutput, setShowDialogOutput] = useState<boolean>(false);\r\n\r\n    const { t } = useTranslation();\r\n    const storageService: BotStorageService = new BotStorageService(BOT_STORE);\r\n\r\n    const onInputChanged = (_ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: TextareaOnChangeData) => {\r\n        if (newValue?.value) {\r\n            setInput(newValue.value);\r\n        } else {\r\n            setInput(\"\");\r\n        }\r\n    };\r\n\r\n    const onDescriptionChanged = (_ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: TextareaOnChangeData) => {\r\n        if (newValue?.value) {\r\n            setDescription(newValue.value);\r\n        } else {\r\n            setDescription(\"\");\r\n        }\r\n    };\r\n\r\n    const onTitleChanged = (_ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: TextareaOnChangeData) => {\r\n        if (newValue?.value) {\r\n            setTitle(newValue.value);\r\n        } else {\r\n            setTitle(\"Assistent\");\r\n        }\r\n    };\r\n\r\n    const onRefinedPromptChanged = (_ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: TextareaOnChangeData) => {\r\n        if (newValue?.value) {\r\n            setSystemPrompt(newValue.value);\r\n        } else {\r\n            setSystemPrompt(\"\");\r\n        }\r\n    };\r\n\r\n    const onPromptButtonClicked = async () => {\r\n        const bot: Bot = {\r\n            title: title == \"\" ? \"Assistent\" : title,\r\n            description: description == \"\" ? \"Ein Assistent\" : description,\r\n            system_message: systemPrompt,\r\n            publish: false,\r\n            temperature: 0.6,\r\n            max_output_tokens: LLM.max_output_tokens,\r\n            quick_prompts: [],\r\n            examples: []\r\n        };\r\n        const created_id = await storageService.createBotConfig(bot);\r\n        if (created_id) window.location.href = \"/#/bot/\" + created_id;\r\n        else console.error(\"Bot could not be created\");\r\n    };\r\n\r\n    const onBackButtonClicked = () => {\r\n        setShowDialogOutput(false);\r\n        setShowDialogInput(true);\r\n        setSystemPrompt(\"\");\r\n        setDescription(\"\");\r\n        setTitle(\"\");\r\n    };\r\n\r\n    const onCancelButtonClicked = () => {\r\n        setShowDialogInput(false);\r\n        setInput(\"\");\r\n    };\r\n\r\n    const createBot = async () => {\r\n        if (input != \"\") {\r\n            setLoading(true);\r\n            const result = await (await createBotApi({ input: input, model: \"gpt-4o\", max_output_tokens: LLM.max_output_tokens })).json();\r\n            setSystemPrompt(result.system_prompt);\r\n            setDescription(result.description);\r\n            setTitle(result.title);\r\n            setLoading(false);\r\n            setShowDialogOutput(true);\r\n            setShowDialogInput(false);\r\n        }\r\n    };\r\n\r\n    const manuelBotCreation = () => {\r\n        setShowDialogInput(false);\r\n        setShowDialogOutput(true);\r\n        setInput(\"\");\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Dialog modalType=\"alert\" defaultOpen={false} open={showDialogInput}>\r\n                <DialogSurface className={styles.dialog}>\r\n                    <DialogBody className={styles.dialogContent}>\r\n                        <DialogTitle>{t(\"components.create_bot_dialog.what_function\")}</DialogTitle>\r\n                        <DialogContent>\r\n                            <div className={styles.exampleList}>\r\n                                <Button disabled={loading} className={styles.exampleBox} onClick={() => setInput(CREATE_BOT_EXAMPLE_1)}>\r\n                                    Beispiel 1: Übersetzer\r\n                                </Button>\r\n                                <Button disabled={loading} className={styles.exampleBox} onClick={() => setInput(CREATE_BOT_EXAMPLE_2)}>\r\n                                    Beispiel 2: Email\r\n                                </Button>\r\n                                <Button disabled={loading} className={styles.exampleBox} onClick={() => setInput(CREATE_BOT_EXAMPLE_3)}>\r\n                                    Beispiel 3: Synonyme\r\n                                </Button>\r\n                            </div>\r\n                            <Field size=\"large\">\r\n                                <Textarea\r\n                                    placeholder={t(\"components.create_bot_dialog.describe\")}\r\n                                    size=\"large\"\r\n                                    rows={10}\r\n                                    required\r\n                                    value={input}\r\n                                    onChange={onInputChanged}\r\n                                    disabled={loading}\r\n                                />\r\n                                <br />\r\n                                <p hidden={!loading}>{t(\"components.create_bot_dialog.generating_prompt\")}</p>\r\n                            </Field>\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <DialogTrigger disableButtonEnhancement>\r\n                                <Button disabled={loading} appearance=\"secondary\" size=\"small\" onClick={onCancelButtonClicked}>\r\n                                    <Dismiss24Regular /> {t(\"components.create_bot_dialog.dismiss\")}\r\n                                </Button>\r\n                            </DialogTrigger>\r\n                            <DialogTrigger disableButtonEnhancement>\r\n                                <Button disabled={loading || input == \"\"} appearance=\"secondary\" size=\"small\" onClick={createBot}>\r\n                                    <Checkmark24Filled /> {t(\"components.create_bot_dialog.create\")}\r\n                                </Button>\r\n                            </DialogTrigger>\r\n                            <DialogTrigger disableButtonEnhancement>\r\n                                <Button disabled={loading} appearance=\"secondary\" size=\"small\" onClick={manuelBotCreation}>\r\n                                    <ArrowRight24Regular /> {t(\"components.create_bot_dialog.skip\")}\r\n                                </Button>\r\n                            </DialogTrigger>\r\n                        </DialogActions>\r\n                    </DialogBody>\r\n                </DialogSurface>\r\n            </Dialog>\r\n            <Dialog modalType=\"alert\" defaultOpen={false} open={showDialogOutput}>\r\n                <DialogSurface className={styles.dialog}>\r\n                    <DialogBody className={styles.dialogContent}>\r\n                        <DialogTitle>{t(\"components.create_bot_dialog.prompt_title_desc\")}</DialogTitle>\r\n                        <DialogContent>\r\n                            <Field size=\"large\">\r\n                                {t(\"create_bot.title\")}:\r\n                                <Textarea placeholder={t(\"create_bot.title\")} value={title} size=\"large\" onChange={onTitleChanged} maxLength={100} />\r\n                            </Field>\r\n                            <Field size=\"large\">\r\n                                {t(\"create_bot.description\")}:\r\n                                <Textarea placeholder={t(\"create_bot.description\")} value={description} size=\"large\" onChange={onDescriptionChanged} />\r\n                            </Field>\r\n                            <Field size=\"large\">\r\n                                {t(\"create_bot.prompt\")}:\r\n                                <Textarea placeholder={t(\"create_bot.prompt\")} rows={10} value={systemPrompt} size=\"large\" onChange={onRefinedPromptChanged} />\r\n                            </Field>\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <DialogTrigger disableButtonEnhancement>\r\n                                <Button appearance=\"secondary\" size=\"small\" onClick={onBackButtonClicked}>\r\n                                    <EditArrowBack24Regular /> {t(\"components.create_bot_dialog.back\")}\r\n                                </Button>\r\n                            </DialogTrigger>\r\n                            <DialogTrigger disableButtonEnhancement>\r\n                                <Button appearance=\"secondary\" size=\"small\" onClick={onPromptButtonClicked}>\r\n                                    <Checkmark24Filled /> {t(\"components.create_bot_dialog.save\")}\r\n                                </Button>\r\n                            </DialogTrigger>\r\n                        </DialogActions>\r\n                    </DialogBody>\r\n                </DialogSurface>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n};\r\n","import styles from \"./Menu.module.css\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Tooltip } from \"@fluentui/react-components\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nimport { AddBotButton } from \"../../components/AddBotButton\";\r\nimport { CreateBotDialog } from \"../../components/CreateBotDialog/CreateBotDialog\";\r\nimport { BotStorageService } from \"../../service/botstorage\";\r\nimport { Bot } from \"../../api/models\";\r\nimport { BOT_STORE } from \"../../constants\";\r\nimport { migrate_old_bots } from \"../../service/migration\";\r\n\r\nconst Menu = () => {\r\n    const { t } = useTranslation();\r\n    const [bots, setBots] = useState<Bot[]>([]);\r\n    const [communityBots, setCommunityBots] = useState<Bot[]>([]);\r\n\r\n    const [showDialogInput, setShowDialogInput] = useState<boolean>(false);\r\n\r\n    const botStorageService: BotStorageService = new BotStorageService(BOT_STORE);\r\n\r\n    useEffect(() => {\r\n        migrate_old_bots().then(async () => {\r\n            let bots = await botStorageService.getAllBotConfigs();\r\n            let community_assistants = communityBots;\r\n            for (let bot of bots) {\r\n                if (bot.publish) {\r\n                    community_assistants.push(bot);\r\n                    bots = bots.filter(b => b.id !== bot.id);\r\n                }\r\n            }\r\n            setBots(bots);\r\n            setCommunityBots(community_assistants);\r\n        });\r\n    }, []);\r\n\r\n    const onAddBot = () => {\r\n        setShowDialogInput(true);\r\n    };\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <CreateBotDialog showDialogInput={showDialogInput} setShowDialogInput={setShowDialogInput} />\r\n            <div className={styles.row}>\r\n                <Tooltip content={t(\"header.chat\")} relationship=\"description\" positioning=\"below\">\r\n                    <Link to=\"/chat\" className={styles.box}>\r\n                        {t(\"header.chat\")}\r\n                    </Link>\r\n                </Tooltip>\r\n                <Tooltip content={t(\"header.sum\")} relationship=\"description\" positioning=\"below\">\r\n                    <Link to=\"/sum\" className={styles.box}>\r\n                        {t(\"header.sum\")}\r\n                    </Link>\r\n                </Tooltip>\r\n                <Tooltip content={t(\"header.brainstorm\")} relationship=\"description\" positioning=\"below\">\r\n                    <Link to=\"/brainstorm\" className={styles.box}>\r\n                        {t(\"header.brainstorm\")}\r\n                    </Link>\r\n                </Tooltip>\r\n                <Tooltip content={t(\"header.simply\")} relationship=\"description\" positioning=\"below\">\r\n                    <Link to=\"/simply\" className={styles.box}>\r\n                        <p className={styles.btnText}>{t(\"header.simply\")}</p>\r\n                    </Link>\r\n                </Tooltip>\r\n            </div>\r\n            <div className={styles.rowheader}>\r\n                {t(\"menu.own_bots\")} <AddBotButton onClick={onAddBot}></AddBotButton>\r\n            </div>\r\n            <div className={styles.row}>\r\n                {bots.map(\r\n                    (bot: Bot, _) =>\r\n                    (\r\n                        <Tooltip content={bot.title} relationship=\"description\" positioning=\"below\">\r\n                            <Link to={`/bot/${bot.id}`} className={styles.box}>\r\n                                <span>{bot.title}</span>\r\n                            </Link>\r\n                        </Tooltip>\r\n                    )\r\n                )}\r\n                {bots.length === 0 && <div>{t(\"menu.no_bots\")}</div>}\r\n            </div>\r\n            <div className={styles.rowheader}>{t(\"menu.community_bots\")}</div>\r\n            <div className={styles.row}>\r\n                {communityBots.map((bot: Bot, _) => (\r\n                    <Tooltip content={bot.title} relationship=\"description\" positioning=\"below\">\r\n                        <Link to={`/bot/${bot.id}`} className={styles.box}>\r\n                            {bot.title}\r\n                        </Link>\r\n                    </Tooltip>\r\n                ))}\r\n                {communityBots.length === 0 && <div>{t(\"menu.no_bots\")}</div>}\r\n            </div>\r\n            <div className={styles.rowheader}> </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Menu;\r\n","import { useRef, useState, useEffect, useContext } from \"react\";\r\n\r\nimport { AskResponse, simplyApi, SimplyRequest, SimplyResponse } from \"../../api\";\r\nimport { Answer } from \"../../components/Answer\";\r\nimport { QuestionInput } from \"../../components/QuestionInput\";\r\nimport { ClearChatButton } from \"../../components/ClearChatButton\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { LLMContext } from \"../../components/LLMSelector/LLMContextProvider\";\r\nimport { ChatLayout } from \"../../components/ChatLayout/ChatLayout\";\r\nimport { Sidebar } from \"../../components/Sidebar/Sidebar\";\r\nimport { SIMPLY_STORE } from \"../../constants\";\r\nimport { DBMessage, StorageService } from \"../../service/storage\";\r\nimport { handleDeleteChat, handleRollback, setupStore } from \"../page_helpers\";\r\nimport { AnswerList } from \"../../components/AnswerList/AnswerList\";\r\nimport { ChatMessage } from \"../chat/Chat\";\r\nimport styles from \"./Simply.module.css\";\r\nimport { ExampleList, ExampleModel } from \"../../components/Example\";\r\n\r\ntype SimplyMessage = DBMessage<AskResponse>;\r\n\r\nconst EXAMPLES: ExampleModel[] = [\r\n    {\r\n        text: \"Arbeitszeitgesetz\",\r\n        value: `Erster Abschnitt\r\n    Allgemeine Vorschriften\r\n    Nichtamtliches Inhaltsverzeichnis\r\n    1 Zweck des Gesetzes\r\n    Zweck des Gesetzes ist es,\r\n    1.\r\n    die Sicherheit und den Gesundheitsschutz der Arbeitnehmer in der Bundesrepublik Deutschland und in der ausschließlichen Wirtschaftszone bei der Arbeitszeitgestaltung zu gewährleisten und die Rahmenbedingungen für flexible Arbeitszeiten zu verbessern sowie\r\n    2.\r\n    den Sonntag und die staatlich anerkannten Feiertage als Tage der Arbeitsruhe und der seelischen Erhebung der Arbeitnehmer zu schützen.\r\n    Nichtamtliches Inhaltsverzeichnis\r\n    2 Begriffsbestimmungen\r\n    (1) Arbeitszeit im Sinne dieses Gesetzes ist die Zeit vom Beginn bis zum Ende der Arbeit ohne die Ruhepausen; Arbeitszeiten bei mehreren Arbeitgebern sind zusammenzurechnen. Im Bergbau unter Tage zählen die Ruhepausen zur Arbeitszeit.\r\n    (2) Arbeitnehmer im Sinne dieses Gesetzes sind Arbeiter und Angestellte sowie die zu ihrer Berufsbildung Beschäftigten.\r\n    (3) Nachtzeit im Sinne dieses Gesetzes ist die Zeit von 23 bis 6 Uhr, in Bäckereien und Konditoreien die Zeit von 22 bis 5 Uhr.\r\n    (4) Nachtarbeit im Sinne dieses Gesetzes ist jede Arbeit, die mehr als zwei Stunden der Nachtzeit umfaßt.\r\n    (5) Nachtarbeitnehmer im Sinne dieses Gesetzes sind Arbeitnehmer, die\r\n    1.\r\n    auf Grund ihrer Arbeitszeitgestaltung normalerweise Nachtarbeit in Wechselschicht zu leisten haben oder\r\n    2.\r\n    Nachtarbeit an mindestens 48 Tagen im Kalenderjahr leisten.\r\n    Zweiter Abschnitt\r\n    Werktägliche Arbeitszeit und arbeitsfreie Zeiten\r\n    Nichtamtliches Inhaltsverzeichnis\r\n    3 Arbeitszeit der Arbeitnehmer\r\n    Die werktägliche Arbeitszeit der Arbeitnehmer darf acht Stunden nicht überschreiten. Sie kann auf bis zu zehn Stunden nur verlängert werden, wenn innerhalb von sechs Kalendermonaten oder innerhalb von 24 Wochen im Durchschnitt acht Stunden werktäglich nicht überschritten werden.\r\n    Nichtamtliches Inhaltsverzeichnis\r\n    4 Ruhepausen\r\n    Die Arbeit ist durch im voraus feststehende Ruhepausen von mindestens 30 Minuten bei einer Arbeitszeit von mehr als sechs bis zu neun Stunden und 45 Minuten bei einer Arbeitszeit von mehr als neun Stunden insgesamt zu unterbrechen. Die Ruhepausen nach Satz 1 können in Zeitabschnitte von jeweils mindestens 15 Minuten aufgeteilt werden. Länger als sechs Stunden hintereinander dürfen Arbeitnehmer nicht ohne Ruhepause beschäftigt werden.\r\n    Nichtamtliches Inhaltsverzeichnis\r\n    5 Ruhezeit\r\n    (1) Die Arbeitnehmer müssen nach Beendigung der täglichen Arbeitszeit eine ununterbrochene Ruhezeit von mindestens elf Stunden haben.\r\n    (2) Die Dauer der Ruhezeit des Absatzes 1 kann in Krankenhäusern und anderen Einrichtungen zur Behandlung, Pflege und Betreuung von Personen, in Gaststätten und anderen Einrichtungen zur Bewirtung und Beherbergung, in Verkehrsbetrieben, beim Rundfunk sowie in der Landwirtschaft und in der Tierhaltung um bis zu eine Stunde verkürzt werden, wenn jede Verkürzung der Ruhezeit innerhalb eines Kalendermonats oder innerhalb von vier Wochen durch Verlängerung einer anderen Ruhezeit auf mindestens zwölf Stunden ausgeglichen wird.\r\n    (3) Abweichend von Absatz 1 können in Krankenhäusern und anderen Einrichtungen zur Behandlung, Pflege und Betreuung von Personen Kürzungen der Ruhezeit durch Inanspruchnahmen während der Rufbereitschaft, die nicht mehr als die Hälfte der Ruhezeit betragen, zu anderen Zeiten ausgeglichen werden.\r\n    (4) (weggefallen)\r\n    Nichtamtliches Inhaltsverzeichnis\r\n    § 6 Nacht- und Schichtarbeit\r\n    (1) Die Arbeitszeit der Nacht- und Schichtarbeitnehmer ist nach den gesicherten arbeitswissenschaftlichen Erkenntnissen über die menschengerechte Gestaltung der Arbeit festzulegen.\r\n    (2) Die werktägliche Arbeitszeit der Nachtarbeitnehmer darf acht Stunden nicht überschreiten. Sie kann auf bis zu zehn Stunden nur verlängert werden, wenn abweichend von § 3 innerhalb von einem Kalendermonat oder innerhalb von vier Wochen im Durchschnitt acht Stunden werktäglich nicht überschritten werden. Für Zeiträume, in denen Nachtarbeitnehmer im Sinne des § 2 Abs. 5 Nr. 2 nicht zur Nachtarbeit herangezogen werden, findet § 3 Satz 2 Anwendung.\r\n    (3) Nachtarbeitnehmer sind berechtigt, sich vor Beginn der Beschäftigung und danach in regelmäßigen Zeitabständen von nicht weniger als drei Jahren arbeitsmedizinisch untersuchen zu lassen. Nach Vollendung des 50. Lebensjahres steht Nachtarbeitnehmern dieses Recht in Zeitabständen von einem Jahr zu. Die Kosten der Untersuchungen hat der Arbeitgeber zu tragen, sofern er die Untersuchungen den Nachtarbeitnehmern nicht kostenlos durch einen Betriebsarzt oder einen überbetrieblichen Dienst von Betriebsärzten anbietet.\r\n    (4) Der Arbeitgeber hat den Nachtarbeitnehmer auf dessen Verlangen auf einen für ihn geeigneten Tagesarbeitsplatz umzusetzen, wenn\r\n    a)\r\n    nach arbeitsmedizinischer Feststellung die weitere Verrichtung von Nachtarbeit den Arbeitnehmer in seiner Gesundheit gefährdet oder\r\n    b)\r\n    im Haushalt des Arbeitnehmers ein Kind unter zwölf Jahren lebt, das nicht von einer anderen im Haushalt lebenden Person betreut werden kann, oder\r\n    c)\r\n    der Arbeitnehmer einen schwerpflegebedürftigen Angehörigen zu versorgen hat, der nicht von einem anderen im Haushalt lebenden Angehörigen versorgt werden kann,\r\n    sofern dem nicht dringende betriebliche Erfordernisse entgegenstehen. Stehen der Umsetzung des Nachtarbeitnehmers auf einen für ihn geeigneten Tagesarbeitsplatz nach Auffassung des Arbeitgebers dringende betriebliche Erfordernisse entgegen, so ist der Betriebs- oder Personalrat zu hören. Der Betriebs- oder Personalrat kann dem Arbeitgeber Vorschläge für eine Umsetzung unterbreiten.\r\n    (5) Soweit keine tarifvertraglichen Ausgleichsregelungen bestehen, hat der Arbeitgeber dem Nachtarbeitnehmer für die während der Nachtzeit geleisteten Arbeitsstunden eine angemessene Zahl bezahlter freier Tage oder einen angemessenen Zuschlag auf das ihm hierfür zustehende Bruttoarbeitsentgelt zu gewähren.\r\n    (6) Es ist sicherzustellen, daß Nachtarbeitnehmer den gleichen Zugang zur betrieblichen Weiterbildung und zu aufstiegsfördernden Maßnahmen haben wie die übrigen Arbeitnehmer.\r\n    Nichtamtliches Inhaltsverzeichnis\r\n    7 Abweichende Regelungen\r\n    (1) In einem Tarifvertrag oder auf Grund eines Tarifvertrags in einer Betriebs- oder Dienstvereinbarung kann zugelassen werden,\r\n    1.\r\n    abweichend von § 3\r\n    a)\r\n    die Arbeitszeit über zehn Stunden werktäglich zu verlängern, wenn in die Arbeitszeit regelmäßig und in erheblichem Umfang Arbeitsbereitschaft oder Bereitschaftsdienst fällt,\r\n    b)\r\n    einen anderen Ausgleichszeitraum festzulegen,\r\n    c)\r\n    (weggefallen)\r\n    2.\r\n    abweichend von § 4 Satz 2 die Gesamtdauer der Ruhepausen in Schichtbetrieben und Verkehrsbetrieben auf Kurzpausen von angemessener Dauer aufzuteilen,\r\n    3.\r\n    abweichend von § 5 Abs. 1 die Ruhezeit um bis zu zwei Stunden zu kürzen, wenn die Art der Arbeit dies erfordert und die Kürzung der Ruhezeit innerhalb eines festzulegenden Ausgleichszeitraums ausgeglichen wird,\r\n    4.\r\n    abweichend von § 6 Abs. 2\r\n    a)\r\n    die Arbeitszeit über zehn Stunden werktäglich hinaus zu verlängern, wenn in die Arbeitszeit regelmäßig und in erheblichem Umfang Arbeitsbereitschaft oder Bereitschaftsdienst fällt,\r\n    b)\r\n    einen anderen Ausgleichszeitraum festzulegen,\r\n    5.\r\n    den Beginn des siebenstündigen Nachtzeitraums des § 2 Abs. 3 auf die Zeit zwischen 22 und 24 Uhr festzulegen.\r\n    (2) Sofern der Gesundheitsschutz der Arbeitnehmer durch einen entsprechenden Zeitausgleich gewährleistet wird, kann in einem Tarifvertrag oder auf Grund eines Tarifvertrags in einer Betriebs- oder Dienstvereinbarung ferner zugelassen werden,\r\n    1.\r\n    abweichend von § 5 Abs. 1 die Ruhezeiten bei Rufbereitschaft den Besonderheiten dieses Dienstes anzupassen, insbesondere Kürzungen der Ruhezeit infolge von Inanspruchnahmen während dieses Dienstes zu anderen Zeiten auszugleichen,\r\n    2.\r\n    die Regelungen der §§ 3, 5 Abs. 1 und § 6 Abs. 2 in der Landwirtschaft der Bestellungs- und Erntezeit sowie den Witterungseinflüssen anzupassen,\r\n    3.\r\n    die Regelungen der §§ 3, 4, 5 Abs. 1 und § 6 Abs. 2 bei der Behandlung, Pflege und Betreuung von Personen der Eigenart dieser Tätigkeit und dem Wohl dieser Personen entsprechend anzupassen,\r\n    4.\r\n    die Regelungen der §§ 3, 4, 5 Abs. 1 und § 6 Abs. 2 bei Verwaltungen und Betrieben des Bundes, der Länder, der Gemeinden und sonstigen Körperschaften, Anstalten und Stiftungen des öffentlichen Rechts sowie bei anderen Arbeitgebern, die der Tarifbindung eines für den öffentlichen Dienst geltenden oder eines im wesentlichen inhaltsgleichen Tarifvertrags unterliegen, der Eigenart der Tätigkeit bei diesen Stellen anzupassen.\r\n    (2a) In einem Tarifvertrag oder auf Grund eines Tarifvertrags in einer Betriebs- oder Dienstvereinbarung kann abweichend von den §§ 3, 5 Abs. 1 und § 6 Abs. 2 zugelassen werden, die werktägliche Arbeitszeit auch ohne Ausgleich über acht Stunden zu verlängern, wenn in die Arbeitszeit regelmäßig und in erheblichem Umfang Arbeitsbereitschaft oder Bereitschaftsdienst fällt und durch besondere Regelungen sichergestellt wird, dass die Gesundheit der Arbeitnehmer nicht gefährdet wird.\r\n    (3) Im Geltungsbereich eines Tarifvertrags nach Absatz 1, 2 oder 2a können abweichende tarifvertragliche Regelungen im Betrieb eines nicht tarifgebundenen Arbeitgebers durch Betriebs- oder Dienstvereinbarung oder, wenn ein Betriebs- oder Personalrat nicht besteht, durch schriftliche Vereinbarung zwischen dem Arbeitgeber und dem Arbeitnehmer übernommen werden. Können auf Grund eines solchen Tarifvertrags abweichende Regelungen in einer Betriebs- oder Dienstvereinbarung getroffen werden, kann auch in Betrieben eines nicht tarifgebundenen Arbeitgebers davon Gebrauch gemacht werden. Eine nach Absatz 2 Nr. 4 getroffene abweichende tarifvertragliche Regelung hat zwischen nicht tarifgebundenen Arbeitgebern und Arbeitnehmern Geltung, wenn zwischen ihnen die Anwendung der für den öffentlichen Dienst geltenden tarifvertraglichen Bestimmungen vereinbart ist und die Arbeitgeber die Kosten des Betriebs überwiegend mit Zuwendungen im Sinne des Haushaltsrechts decken.\r\n    (4) Die Kirchen und die öffentlich-rechtlichen Religionsgesellschaften können die in Absatz 1, 2 oder 2a genannten Abweichungen in ihren Regelungen vorsehen.\r\n    (5) In einem Bereich, in dem Regelungen durch Tarifvertrag üblicherweise nicht getroffen werden, können Ausnahmen im Rahmen des Absatzes 1, 2 oder 2a durch die Aufsichtsbehörde bewilligt werden, wenn dies aus betrieblichen Gründen erforderlich ist und die Gesundheit der Arbeitnehmer nicht gefährdet wird.\r\n    (6) Die Bundesregierung kann durch Rechtsverordnung mit Zustimmung des Bundesrates Ausnahmen im Rahmen des Absatzes 1 oder 2 zulassen, sofern dies aus betrieblichen Gründen erforderlich ist und die Gesundheit der Arbeitnehmer nicht gefährdet wird.\r\n    (7) Auf Grund einer Regelung nach Absatz 2a oder den Absätzen 3 bis 5 jeweils in Verbindung mit Absatz 2a darf die Arbeitszeit nur verlängert werden, wenn der Arbeitnehmer schriftlich eingewilligt hat. Der Arbeitnehmer kann die Einwilligung mit einer Frist von sechs Monaten schriftlich widerrufen. Der Arbeitgeber darf einen Arbeitnehmer nicht benachteiligen, weil dieser die Einwilligung zur Verlängerung der Arbeitszeit nicht erklärt oder die Einwilligung widerrufen hat.\r\n    (8) Werden Regelungen nach Absatz 1 Nr. 1 und 4, Absatz 2 Nr. 2 bis 4 oder solche Regelungen auf Grund der Absätze 3 und 4 zugelassen, darf die Arbeitszeit 48 Stunden wöchentlich im Durchschnitt von zwölf Kalendermonaten nicht überschreiten. Erfolgt die Zulassung auf Grund des Absatzes 5, darf die Arbeitszeit 48 Stunden wöchentlich im Durchschnitt von sechs Kalendermonaten oder 24 Wochen nicht überschreiten.\r\n    (9) Wird die werktägliche Arbeitszeit über zwölf Stunden hinaus verlängert, muss im unmittelbaren Anschluss an die Beendigung der Arbeitszeit eine Ruhezeit von mindestens elf Stunden gewährt werden.\r\n    Nichtamtliches Inhaltsverzeichnis\r\n    8 Gefährliche Arbeiten\r\n    Die Bundesregierung kann durch Rechtsverordnung mit Zustimmung des Bundesrates für einzelne Beschäftigungsbereiche, für bestimmte Arbeiten oder für bestimmte Arbeitnehmergruppen, bei denen besondere Gefahren für die Gesundheit der Arbeitnehmer zu erwarten sind, die Arbeitszeit über § 3 hinaus beschränken, die Ruhepausen und Ruhezeiten über die §§ 4 und 5 hinaus ausdehnen, die Regelungen zum Schutz der Nacht- und Schichtarbeitnehmer in § 6 erweitern und die Abweichungsmöglichkeiten nach § 7 beschränken, soweit dies zum Schutz der Gesundheit der Arbeitnehmer erforderlich ist. Satz 1 gilt nicht für Beschäftigungsbereiche und Arbeiten in Betrieben, die der Bergaufsicht unterliegen.\r\n    Dritter Abschnitt\r\n    Sonn- und Feiertagsruhe\r\n    Nichtamtliches Inhaltsverzeichnis\r\n    9 Sonn- und Feiertagsruhe\r\n    (1) Arbeitnehmer dürfen an Sonn- und gesetzlichen Feiertagen von 0 bis 24 Uhr nicht beschäftigt werden.\r\n    (2) In mehrschichtigen Betrieben mit regelmäßiger Tag- und Nachtschicht kann Beginn oder Ende der Sonn- und Feiertagsruhe um bis zu sechs Stunden vor- oder zurückverlegt werden, wenn für die auf den Beginn der Ruhezeit folgenden 24 Stunden der Betrieb ruht.\r\n    (3) Für Kraftfahrer und Beifahrer kann der Beginn der 24stündigen Sonn- und Feiertagsruhe um bis zu zwei Stunden vorverlegt werden.\r\n    Nichtamtliches Inhaltsverzeichnis\r\n    10 Sonn- und Feiertagsbeschäftigung\r\n    (1) Sofern die Arbeiten nicht an Werktagen vorgenommen werden können, dürfen Arbeitnehmer an Sonn- und Feiertagen abweichend von § 9 beschäftigt werden\r\n    1.\r\n    in Not- und Rettungsdiensten sowie bei der Feuerwehr,\r\n    2.\r\n    zur Aufrechterhaltung der öffentlichen Sicherheit und Ordnung sowie der Funktionsfähigkeit von Gerichten und Behörden und für Zwecke der Verteidigung,\r\n    3.\r\n    in Krankenhäusern und anderen Einrichtungen zur Behandlung, Pflege und Betreuung von Personen,\r\n    4.\r\n    in Gaststätten und anderen Einrichtungen zur Bewirtung und Beherbergung sowie im Haushalt,\r\n    5.\r\n    bei Musikaufführungen, Theatervorstellungen, Filmvorführungen, Schaustellungen, Darbietungen und anderen ähnlichen Veranstaltungen,\r\n    6.\r\n    bei nichtgewerblichen Aktionen und Veranstaltungen der Kirchen, Religionsgesellschaften, Verbände, Vereine, Parteien und anderer ähnlicher Vereinigungen,\r\n    7.\r\n    beim Sport und in Freizeit-, Erholungs- und Vergnügungseinrichtungen, beim Fremdenverkehr sowie in Museen und wissenschaftlichen Präsenzbibliotheken,\r\n    8.\r\n    beim Rundfunk, bei der Tages- und Sportpresse, bei Nachrichtenagenturen sowie bei den der Tagesaktualität dienenden Tätigkeiten für andere Presseerzeugnisse einschließlich des Austragens, bei der Herstellung von Satz, Filmen und Druckformen für tagesaktuelle Nachrichten und Bilder, bei tagesaktuellen Aufnahmen auf Ton- und Bildträger sowie beim Transport und Kommissionieren von Presseerzeugnissen, deren Ersterscheinungstag am Montag oder am Tag nach einem Feiertag liegt,\r\n    9.\r\n    bei Messen, Ausstellungen und Märkten im Sinne des Titels IV der Gewerbeordnung sowie bei Volksfesten,\r\n    10.\r\n    in Verkehrsbetrieben sowie beim Transport und Kommissionieren von leichtverderblichen Waren im Sinne des § 30 Abs. 3 Nr. 2 der Straßenverkehrsordnung,\r\n    11.\r\n    in den Energie- und Wasserversorgungsbetrieben sowie in Abfall- und Abwasserentsorgungsbetrieben,\r\n    12.\r\n    in der Landwirtschaft und in der Tierhaltung sowie in Einrichtungen zur Behandlung und Pflege von Tieren,\r\n    13.\r\n    im Bewachungsgewerbe und bei der Bewachung von Betriebsanlagen,\r\n    14.\r\n    bei der Reinigung und Instandhaltung von Betriebseinrichtungen, soweit hierdurch der regelmäßige Fortgang des eigenen oder eines fremden Betriebs bedingt ist, bei der Vorbereitung der Wiederaufnahme des vollen werktägigen Betriebs sowie bei der Aufrechterhaltung der Funktionsfähigkeit von Datennetzen und Rechnersystemen,\r\n    15.\r\n    zur Verhütung des Verderbens von Naturerzeugnissen oder Rohstoffen oder des Mißlingens von Arbeitsergebnissen sowie bei kontinuierlich durchzuführenden Forschungsarbeiten,\r\n    16.\r\n    zur Vermeidung einer Zerstörung oder erheblichen Beschädigung der Produktionseinrichtungen.\r\n    (2) Abweichend von § 9 dürfen Arbeitnehmer an Sonn- und Feiertagen mit den Produktionsarbeiten beschäftigt werden, wenn die infolge der Unterbrechung der Produktion nach Absatz 1 Nr. 14 zulässigen Arbeiten den Einsatz von mehr Arbeitnehmern als bei durchgehender Produktion erfordern.\r\n    (3) Abweichend von § 9 dürfen Arbeitnehmer an Sonn- und Feiertagen in Bäckereien und Konditoreien für bis zu drei Stunden mit der Herstellung und dem Austragen oder Ausfahren von Konditorwaren und an diesem Tag zum Verkauf kommenden Bäckerwaren beschäftigt werden.\r\n    (4) Sofern die Arbeiten nicht an Werktagen vorgenommen werden können, dürfen Arbeitnehmer zur Durchführung des Eil- und Großbetragszahlungsverkehrs und des Geld-, Devisen-, Wertpapier- und Derivatehandels abweichend von § 9 Abs. 1 an den auf einen Werktag fallenden Feiertagen beschäftigt werden, die nicht in allen Mitgliedstaaten der Europäischen Union Feiertage sind.`\r\n    },\r\n    {\r\n        text: \"Leistungen nach dem UVG\",\r\n        value: `Anspruch hat\r\n\r\n    jedes Kind, das mit einem seiner Elternteile, welches ledig, verwitwet oder geschieden ist, lebt und\r\n    monatlich weniger Unterhalt oder Waisenbezüge erhält, als Leistungen nach dem Unterhaltsvorschussgesetz (UVG) möglich wären und\r\n    wer die deutsche Staatsangehörigkeit oder die Berechtigung zur Freizügigkeit (EU / EWR-Staatsangehörigkeit); eine Niederlassungserlaubnis oder Aufenthaltserlaubnis (Berechtigung zur Erwerbstätigkeit; Daueraufenthalt) besitzt.\r\n    ab dem 12. Lebensjahr:\r\n        betreuendes Elternteil bezieht keine Leistungen nach dem SGB II oder\r\n        bei laufendem Bezug von Leistungen nach dem SGB II erzielt der betreuende Elternteil Einkommen in Höhe von monatlich mind. 600 Euro brutto oder die Hilfebedürftigkeit des Kindes bzw. der Bedarfsgemeinschaft wird durch die Gewährung von Unterhaltsvorschuss-Leistungen vermieden`\r\n    }\r\n];\r\n\r\nconst Simply = () => {\r\n    const { LLM } = useContext(LLMContext);\r\n    const { t } = useTranslation();\r\n\r\n    const lastQuestionRef = useRef<string>(\"\");\r\n    const chatMessageStreamEnd = useRef<HTMLDivElement | null>(null);\r\n\r\n    const [isLoading, setIsLoading] = useState<boolean>(false);\r\n    const [error, setError] = useState<unknown>();\r\n\r\n    const [answers, setAnswers] = useState<SimplyMessage[]>([]);\r\n    const [question, setQuestion] = useState<string>(\"\");\r\n\r\n    const [active_chat, setActiveChat] = useState<string | undefined>(undefined);\r\n    const storageService: StorageService<AskResponse, {}> = new StorageService<AskResponse, {}>(SIMPLY_STORE, active_chat);\r\n\r\n    const clearChat = handleDeleteChat(lastQuestionRef, error, setError, storageService, setAnswers, setActiveChat);\r\n    const onRollbackMessage = handleRollback(storageService, setAnswers, lastQuestionRef, setQuestion);\r\n\r\n    useEffect(() => {\r\n        setupStore(error, setError, setIsLoading, storageService, setAnswers, answers, lastQuestionRef, setActiveChat);\r\n    }, []);\r\n\r\n    const onExampleClicked = (example: string) => {\r\n        makeApiRequest(example);\r\n    };\r\n\r\n    const makeApiRequest = async (question: string) => {\r\n        error && setError(undefined);\r\n        lastQuestionRef.current = question;\r\n        setIsLoading(true);\r\n        try {\r\n            const request: SimplyRequest = {\r\n                topic: question,\r\n                model: LLM.llm_name,\r\n                temperature: 0\r\n            };\r\n            const parsedResponse: SimplyResponse = await simplyApi(request);\r\n            const askResponse: AskResponse = { answer: parsedResponse.content, error: parsedResponse.error };\r\n            const completeAnswer: SimplyMessage = { user: question, response: askResponse };\r\n\r\n            setAnswers([...answers, completeAnswer]);\r\n            if (storageService.getActiveChatId()) await storageService.appendMessage(completeAnswer);\r\n            else {\r\n                const id = await storageService.create([completeAnswer], undefined);\r\n                setActiveChat(id);\r\n            }\r\n        } catch (e) {\r\n            setError(e);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => chatMessageStreamEnd.current?.scrollIntoView({ behavior: \"smooth\" }), [isLoading]);\r\n\r\n    const sidebar_actions = <ClearChatButton onClick={clearChat} disabled={!lastQuestionRef.current || isLoading} />;\r\n    const sidebar = <Sidebar actions={sidebar_actions} content={<div className={styles.description}>{t(\"simply.plain_description\")}</div>}></Sidebar>;\r\n\r\n    const examplesComponent = <ExampleList examples={EXAMPLES} onExampleClicked={onExampleClicked} />;\r\n    const inputComponent = (\r\n        <QuestionInput\r\n            clearOnSend\r\n            placeholder={t(\"simply.prompt\")}\r\n            disabled={isLoading}\r\n            onSend={question => makeApiRequest(question)}\r\n            tokens_used={0}\r\n            question={question}\r\n            setQuestion={question => setQuestion(question)}\r\n        />\r\n    );\r\n    const answerList = (\r\n        <AnswerList\r\n            answers={answers}\r\n            regularBotMsg={(answer: ChatMessage, index: number) => {\r\n                return <Answer key={index} answer={answer.response} setQuestion={question => setQuestion(question)} />;\r\n            }}\r\n            onRollbackMessage={onRollbackMessage}\r\n            isLoading={isLoading}\r\n            error={error}\r\n            makeApiRequest={() => makeApiRequest(lastQuestionRef.current)}\r\n            chatMessageStreamEnd={chatMessageStreamEnd}\r\n            lastQuestionRef={lastQuestionRef}\r\n        />\r\n    );\r\n    return (\r\n        <ChatLayout\r\n            sidebar={sidebar}\r\n            examples={examplesComponent}\r\n            answers={answerList}\r\n            input={inputComponent}\r\n            showExamples={!lastQuestionRef.current}\r\n            header={t(\"chat.header\")}\r\n            header_as_markdown={false}\r\n            messages_description={t(\"common.messages\")}\r\n            size=\"small\"\r\n        ></ChatLayout>\r\n    );\r\n};\r\n\r\nexport default Simply;\r\n","import { Delete24Regular, Dismiss24Regular, Edit24Regular, Save24Regular, ChatSettings24Regular } from \"@fluentui/react-icons\";\r\nimport {\r\n    Button,\r\n    Slider,\r\n    Label,\r\n    useId,\r\n    SliderProps,\r\n    Field,\r\n    InfoLabel,\r\n    Tooltip,\r\n    Textarea,\r\n    TextareaOnChangeData,\r\n} from \"@fluentui/react-components\";\r\n\r\nimport styles from \"./BotsettingsDrawer.module.css\";\r\nimport { ReactNode, useContext, useEffect, useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { LLMContext } from \"../LLMSelector/LLMContextProvider\";\r\nimport Markdown from \"react-markdown\";\r\nimport rehypeRaw from \"rehype-raw\";\r\nimport remarkGfm from \"remark-gfm\";\r\nimport { Sidebar } from \"../Sidebar/Sidebar\";\r\nimport CodeBlockRenderer from \"../CodeBlockRenderer/CodeBlockRenderer\";\r\nimport { Bot } from \"../../api\";\r\n\r\ninterface Props {\r\n    bot: Bot;\r\n    onBotChange: (bot: Bot) => void;\r\n    onDeleteBot: () => void;\r\n    actions: ReactNode;\r\n    before_content: ReactNode;\r\n    onEditChange: (isEditable: boolean) => void;\r\n}\r\n\r\nexport const BotsettingsDrawer = ({ bot, onBotChange, onDeleteBot, actions, before_content, onEditChange }: Props) => {\r\n    const [isEditable, setEditable] = useState(false);\r\n    const { t } = useTranslation();\r\n    const { LLM } = useContext(LLMContext);\r\n\r\n    const temperature_headerID = useId(\"header-temperature\");\r\n    const temperatureID = useId(\"input-temperature\");\r\n    const max_tokens_headerID = useId(\"header-max_tokens\");\r\n    const max_tokensID = useId(\"input-max_tokens\");\r\n\r\n    const min_max_tokens = 10;\r\n    const max_max_tokens = LLM.max_output_tokens;\r\n    const min_temp = 0;\r\n    const max_temp = 1;\r\n\r\n    const [temperature, setTemperature] = useState(bot.temperature);\r\n    const [max_output_tokens, setMaxOutputTokens] = useState(bot.max_output_tokens);\r\n    const [systemPrompt, setSystemPrompt] = useState<string>(bot.system_message);\r\n    const [title, setTitle] = useState<string>(bot.title);\r\n    const [description, setDescription] = useState<string>(bot.description);\r\n    const [publish, setPublish] = useState<boolean>(bot.publish);\r\n    const [isOwner, setIsOwner] = useState<boolean>(!bot.publish);\r\n\r\n\r\n    useEffect(() => {\r\n        setMaxOutputTokens(bot.max_output_tokens);\r\n        setSystemPrompt(bot.system_message);\r\n        setTitle(bot.title);\r\n        setDescription(bot.description);\r\n        setPublish(bot.publish);\r\n        setTemperature(bot.temperature);\r\n        setIsOwner(!bot.publish);\r\n    }, [bot]);\r\n\r\n    const onTemperatureChange: SliderProps[\"onChange\"] = (_, data) => {\r\n        setTemperature(data.value);\r\n    };\r\n    const onMaxtokensChange: SliderProps[\"onChange\"] = (_, data) => {\r\n        const maxTokens = data.value > LLM.max_output_tokens && LLM.max_output_tokens != 0 ? LLM.max_output_tokens : data.value;\r\n        setMaxOutputTokens(maxTokens);\r\n    };\r\n    const onSytemPromptChange = (_ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: TextareaOnChangeData) => {\r\n        if (newValue?.value) setSystemPrompt(newValue.value);\r\n        else setSystemPrompt(\"\");\r\n    };\r\n    const onTitleChange = (_ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: TextareaOnChangeData) => {\r\n        if (newValue?.value) setTitle(newValue.value);\r\n        else setTitle(\"\");\r\n    };\r\n    const onDescriptionChange = (_ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: TextareaOnChangeData) => {\r\n        if (newValue?.value) setDescription(newValue.value);\r\n        else setDescription(\"\");\r\n    };\r\n\r\n    const toggleReadOnly = () => {\r\n        setEditable(!isEditable);\r\n        onEditChange(!isEditable);\r\n        if (isEditable && isOwner) {\r\n            const updatedTitle = title.trim() !== \"\" ? title : `Assistent ${bot.id}`;\r\n            setTitle(updatedTitle);\r\n            const updatedBot = {\r\n                ...bot,\r\n                temperature,\r\n                max_output_tokens,\r\n                system_message: systemPrompt,\r\n                title: updatedTitle,\r\n                description,\r\n                publish\r\n            };\r\n            onBotChange(updatedBot);\r\n            window.location.reload();\r\n        }\r\n    };\r\n\r\n    const onClearSystemPrompt = () => {\r\n        setSystemPrompt(\"\");\r\n    };\r\n\r\n    const actions_component = (\r\n        <>\r\n            {actions}\r\n            <Button\r\n                appearance=\"secondary\"\r\n                icon={isOwner ? (isEditable ? <Save24Regular className={styles.iconRightMargin} /> : <Edit24Regular className={styles.iconRightMargin} />) : (isEditable ? <Dismiss24Regular className={styles.iconRightMargin} /> : <ChatSettings24Regular className={styles.iconRightMargin} />)}\r\n                onClick={toggleReadOnly}\r\n            >\r\n                {isOwner ? (isEditable ? t(\"components.botsettingsdrawer.finish_edit\") : t(\"components.botsettingsdrawer.edit\")) : (isEditable ? t(\"components.botsettingsdrawer.close_configutations\") : t(\"components.botsettingsdrawer.show_configutations\"))}\r\n            </Button>\r\n            <Tooltip content={t(\"components.botsettingsdrawer.delete\")} relationship=\"description\" positioning=\"below\">\r\n                <Button appearance=\"secondary\" onClick={onDeleteBot} icon={<Delete24Regular className={styles.iconRightMargin} />} disabled={!isOwner}>\r\n                    {t(\"components.botsettingsdrawer.delete\")}\r\n                </Button>\r\n            </Tooltip>\r\n        </>\r\n    );\r\n    const content = (\r\n        <>\r\n            <>{before_content}</>{\" \"}\r\n            {isEditable && (\r\n                <div className={styles.header} role=\"heading\" aria-level={3}>\r\n                    <div className={styles.systemPromptHeadingContainer}>{t(\"create_bot.title\")}</div>\r\n                </div>\r\n            )}\r\n            {isEditable && (\r\n                <div className={styles.bodyContainer}>\r\n                    <div>\r\n                        <Field size=\"small\">\r\n                            {\r\n                                <Textarea\r\n                                    textarea={styles.systempromptTextArea}\r\n                                    placeholder={t(\"create_bot.title\")}\r\n                                    value={title}\r\n                                    size=\"large\"\r\n                                    rows={1}\r\n                                    maxLength={50}\r\n                                    onChange={onTitleChange}\r\n                                    disabled={!isOwner}\r\n                                />\r\n                            }\r\n                        </Field>\r\n                    </div>\r\n                </div>\r\n            )}\r\n            {isEditable && (\r\n                <div className={styles.header} role=\"heading\" aria-level={3}>\r\n                    <div className={styles.systemPromptHeadingContainer}>{t(\"create_bot.description\")}</div>\r\n                </div>\r\n            )}\r\n            <div className={styles.bodyContainer}>\r\n                <div>\r\n                    <Field size=\"large\">\r\n                        {isEditable ? (\r\n                            <Textarea\r\n                                textarea={styles.systempromptTextArea}\r\n                                placeholder={t(\"create_bot.description\")}\r\n                                value={description}\r\n                                size=\"large\"\r\n                                rows={15}\r\n                                onChange={onDescriptionChange}\r\n                                disabled={!isOwner}\r\n                            />\r\n                        ) : (\r\n                            <Markdown\r\n                                className={styles.markdownDescription}\r\n                                remarkPlugins={[remarkGfm]}\r\n                                rehypePlugins={[rehypeRaw]}\r\n                                components={{\r\n                                    code: CodeBlockRenderer\r\n                                }}\r\n                            >\r\n                                {description}\r\n                            </Markdown>\r\n                        )}\r\n                    </Field>\r\n                </div>\r\n            </div>\r\n            {isEditable && (\r\n                <>\r\n                    <div className={styles.header} role=\"heading\" aria-level={3}>\r\n                        <div className={styles.systemPromptHeadingContainer}>\r\n                            <InfoLabel\r\n                                info={\r\n                                    <div>\r\n                                        <i>{t(\"components.chattsettingsdrawer.system_prompt\")}s </i>\r\n                                        {t(\"components.chattsettingsdrawer.system_prompt_info\")}\r\n                                    </div>\r\n                                }\r\n                            >\r\n                                {t(\"components.chattsettingsdrawer.system_prompt\")}\r\n                            </InfoLabel>\r\n                            {isEditable && (\r\n                                <Tooltip content={t(\"components.chattsettingsdrawer.system_prompt_clear\")} relationship=\"description\" positioning=\"below\">\r\n                                    <Button\r\n                                        aria-label={t(\"components.chattsettingsdrawer.system_prompt_clear\")}\r\n                                        icon={<Dismiss24Regular />}\r\n                                        appearance=\"subtle\"\r\n                                        onClick={onClearSystemPrompt}\r\n                                        size=\"small\"\r\n                                        disabled={!isOwner}\r\n                                    ></Button>\r\n                                </Tooltip>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                    <div className={styles.bodyContainer}>\r\n                        <div>\r\n                            <Field size=\"large\">\r\n                                <Textarea\r\n                                    textarea={styles.systempromptTextArea}\r\n                                    placeholder={t(\"components.chattsettingsdrawer.system_prompt\")}\r\n                                    resize=\"vertical\"\r\n                                    value={systemPrompt}\r\n                                    size=\"large\"\r\n                                    rows={15}\r\n                                    onChange={onSytemPromptChange}\r\n                                    disabled={!isOwner}\r\n                                />\r\n                            </Field>\r\n                            {!isEditable && (\r\n                                <Markdown\r\n                                    className={styles.markdownDescription}\r\n                                    remarkPlugins={[remarkGfm]}\r\n                                    rehypePlugins={[rehypeRaw]}\r\n                                    components={{\r\n                                        code: CodeBlockRenderer\r\n                                    }}\r\n                                >\r\n                                    {systemPrompt}\r\n                                </Markdown>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                    <div className={styles.header} role=\"heading\" aria-level={3} id={max_tokens_headerID}>\r\n                        <InfoLabel info={<div>{t(\"components.chattsettingsdrawer.max_lenght_info\")}</div>}>\r\n                            {t(\"components.chattsettingsdrawer.max_lenght\")}\r\n                        </InfoLabel>\r\n                    </div>\r\n                    <div className={styles.bodyContainer}>\r\n                        <div className={styles.verticalContainer}>\r\n                            <Slider\r\n                                min={min_max_tokens}\r\n                                max={max_max_tokens}\r\n                                onChange={onMaxtokensChange}\r\n                                aria-valuetext={t(\"components.chattsettingsdrawer.max_lenght\") + ` ist ${max_tokensID}`}\r\n                                value={max_output_tokens}\r\n                                aria-labelledby={max_tokens_headerID}\r\n                                id={max_tokensID}\r\n                                disabled={!isEditable || !isOwner}\r\n                            />\r\n                            <br></br>\r\n                            <Label htmlFor={max_tokensID} aria-hidden>\r\n                                {max_output_tokens} Tokens\r\n                            </Label>\r\n                        </div>\r\n                    </div>\r\n                    <div className={styles.header} role=\"heading\" aria-level={3} id={temperature_headerID}>\r\n                        <InfoLabel\r\n                            info={\r\n                                <div>\r\n                                    {t(\"components.chattsettingsdrawer.temperature_article\")} <i>{t(\"components.chattsettingsdrawer.temperature\")}</i>{\" \"}\r\n                                    {t(\"components.chattsettingsdrawer.temperature_info\")}\r\n                                </div>\r\n                            }\r\n                        >\r\n                            {t(\"components.chattsettingsdrawer.temperature\")}\r\n                        </InfoLabel>\r\n                    </div>\r\n                    <div className={styles.bodyContainer}>\r\n                        <div className={styles.verticalContainer}>\r\n                            <Label htmlFor={temperatureID} aria-hidden size=\"medium\" className={styles.temperatureLabel}>\r\n                                {\" \"}\r\n                                {t(\"components.chattsettingsdrawer.min_temperature\")}\r\n                            </Label>\r\n                            <Slider\r\n                                min={min_temp}\r\n                                max={max_temp}\r\n                                onChange={onTemperatureChange}\r\n                                aria-valuetext={t(\"components.chattsettingsdrawer.temperature\") + ` ist ${temperature}`}\r\n                                value={temperature}\r\n                                step={0.05}\r\n                                aria-labelledby={temperature_headerID}\r\n                                id={temperatureID}\r\n                                disabled={!isEditable || !isOwner}\r\n                            />\r\n                            <Label htmlFor={temperatureID} className={styles.temperatureLabel} aria-hidden size=\"medium\">\r\n                                {\" \"}\r\n                                {t(\"components.chattsettingsdrawer.max_temperatur\")}\r\n                            </Label>\r\n                            <Label htmlFor={temperatureID} aria-hidden>\r\n                                {temperature}\r\n                            </Label>\r\n                        </div>\r\n                    </div>\r\n                </>\r\n            )}\r\n        </>\r\n    );\r\n    return <Sidebar actions={actions_component} content={content}></Sidebar>;\r\n};\r\n","import { useRef, useState, useEffect, useContext } from \"react\";\r\nimport readNDJSONStream from \"ndjson-readablestream\";\r\n\r\nimport { chatApi, AskResponse, ChatRequest, ChatTurn, handleRedirect, Chunk, ChunkInfo, countTokensAPI, Bot, ChatResponse, createChatName } from \"../../api\";\r\nimport { Answer } from \"../../components/Answer\";\r\nimport { QuestionInput } from \"../../components/QuestionInput\";\r\nimport { LanguageContext } from \"../../components/LanguageSelector/LanguageContextProvider\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { History } from \"../../components/History/History\";\r\n\r\nimport { LLMContext } from \"../../components/LLMSelector/LLMContextProvider\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { BotsettingsDrawer } from \"../../components/BotsettingsDrawer/BotsettingsDrawer\";\r\nimport { ChatLayout, SidebarSizes } from \"../../components/ChatLayout/ChatLayout\";\r\nimport { ClearChatButton } from \"../../components/ClearChatButton\";\r\nimport { ChatMessage } from \"../chat/Chat\";\r\nimport { BOT_STORE } from \"../../constants\";\r\nimport { BotStorageService } from \"../../service/botstorage\";\r\nimport { DBObject, StorageService } from \"../../service/storage\";\r\nimport { AnswerList } from \"../../components/AnswerList/AnswerList\";\r\nimport { ExampleList } from \"../../components/Example/ExampleList\";\r\nimport { QuickPromptContext } from \"../../components/QuickPrompt/QuickPromptProvider\";\r\n\r\nconst BotChat = () => {\r\n    const { id } = useParams();\r\n    const bot_id = id || \"0\";\r\n    const { language } = useContext(LanguageContext);\r\n    const { LLM } = useContext(LLMContext);\r\n    const { t } = useTranslation();\r\n    const { quickPrompts, setQuickPrompts } = useContext(QuickPromptContext);\r\n\r\n    const lastQuestionRef = useRef<string>(\"\");\r\n    const chatMessageStreamEnd = useRef<HTMLDivElement | null>(null);\r\n\r\n    const [isLoading, setIsLoading] = useState<boolean>(false);\r\n    const [error, setError] = useState<unknown>();\r\n    const [sidebarSize, setSidebarWidth] = useState<SidebarSizes>(\"large\");\r\n\r\n    const [answers, setAnswers] = useState<ChatMessage[]>([]);\r\n    const [question, setQuestion] = useState<string>(\"\");\r\n\r\n    const [systemPromptTokens, setSystemPromptTokens] = useState<number>(0);\r\n\r\n    const [active_chat, setActiveChat] = useState<string | undefined>(undefined);\r\n    const botStorageService: BotStorageService = new BotStorageService(BOT_STORE);\r\n    const botChatStorage: StorageService<ChatResponse, Bot> = botStorageService.getChatStorageService(active_chat);\r\n    //history\r\n    const [allChats, setAllChats] = useState<DBObject<ChatResponse, {}>[]>([]);\r\n    //config\r\n    const [botConfig, setBotConfig] = useState<Bot>({\r\n        title: \"Titel\",\r\n        description: \"Beschreibung\",\r\n        publish: false,\r\n        max_output_tokens: LLM.max_output_tokens,\r\n        system_message: \"\",\r\n        temperature: 0.7,\r\n        quick_prompts: [],\r\n        examples: []\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (bot_id) {\r\n            error && setError(undefined);\r\n            setIsLoading(true);\r\n            botStorageService\r\n                .getBotConfig(bot_id)\r\n                .then(bot => {\r\n                    if (bot) {\r\n                        setBotConfig(bot);\r\n                        setQuickPrompts(bot.quick_prompts || []);\r\n                    }\r\n                    return botStorageService\r\n                        .getNewestChatForBot(bot_id)\r\n                        .then(existingChat => {\r\n                            if (existingChat) {\r\n                                const messages = existingChat.messages;\r\n                                setAnswers([...answers.concat(messages)]);\r\n                                lastQuestionRef.current = messages.length > 0 ? messages[messages.length - 1].user : \"\";\r\n                                setActiveChat(existingChat.id);\r\n                            }\r\n                        })\r\n                        .then(() => {\r\n                            return fetchHistory();\r\n                        });\r\n                })\r\n                .finally(() => {\r\n                    setIsLoading(false);\r\n                });\r\n        }\r\n    }, []);\r\n\r\n    const fetchHistory = () => {\r\n        return botStorageService.getAllChatForBot(bot_id).then(chats => {\r\n            if (chats) setAllChats(chats);\r\n        });\r\n    };\r\n\r\n    const onDeleteBot = async () => {\r\n        await botStorageService.deleteConfigAndChatsForBot(bot_id);\r\n        window.location.href = \"/\";\r\n    };\r\n\r\n    const makeApiRequest = async (question: string) => {\r\n        lastQuestionRef.current = question;\r\n        error && setError(undefined);\r\n        setIsLoading(true);\r\n        let askResponse: AskResponse = {} as AskResponse;\r\n\r\n        try {\r\n            const history: ChatTurn[] = answers.map(a => ({ user: a.user, bot: a.response.answer }));\r\n            const request: ChatRequest = {\r\n                history: [...history, { user: question, bot: undefined }],\r\n                shouldStream: true,\r\n                language: language,\r\n                temperature: botConfig.temperature,\r\n                system_message: botConfig.system_message ? botConfig.system_message : \"\",\r\n                max_output_tokens: botConfig.max_output_tokens,\r\n                model: LLM.llm_name\r\n            };\r\n\r\n            const response = await chatApi(request);\r\n            handleRedirect(response);\r\n\r\n            if (!response.body) {\r\n                throw Error(\"No response body\");\r\n            }\r\n            let user_tokens = 0;\r\n            let answer: string = \"\";\r\n            let streamed_tokens = 0;\r\n            let latestResponse: ChatResponse = { ...askResponse, answer: answer, tokens: streamed_tokens, user_tokens: user_tokens };\r\n\r\n            for await (const chunk of readNDJSONStream(response.body)) {\r\n                if (chunk as Chunk) {\r\n                    switch (chunk.type) {\r\n                        case \"C\":\r\n                            answer += chunk.message as string;\r\n                            break;\r\n                        case \"I\":\r\n                            const info = chunk.message as ChunkInfo;\r\n                            streamed_tokens = info.streamedtokens;\r\n                            user_tokens = info.requesttokens;\r\n                            break;\r\n                        case \"E\":\r\n                            throw Error((chunk.message as string) || \"Unknown error\");\r\n                    }\r\n\r\n                    latestResponse = { ...askResponse, answer: answer, tokens: streamed_tokens, user_tokens: user_tokens };\r\n                    setIsLoading(false);\r\n                    setAnswers([...answers, { user: question, response: latestResponse }]);\r\n                }\r\n            }\r\n            //chat present, if not create.\r\n            if (active_chat) {\r\n                await botChatStorage.appendMessage({ user: question, response: latestResponse }, undefined);\r\n            } else {\r\n                // generate chat name for first chat\r\n                const chatname = await createChatName(\r\n                    question,\r\n                    latestResponse.answer,\r\n                    language,\r\n                    botConfig.temperature,\r\n                    botConfig.system_message ? botConfig.system_message : \"\",\r\n                    botConfig.max_output_tokens,\r\n                    LLM.llm_name\r\n                );\r\n\r\n                // create and save current id\r\n                const id = await botStorageService.createChat(bot_id, [{ user: question, response: latestResponse }], chatname);\r\n                setActiveChat(id);\r\n\r\n                // fetch all chats\r\n                await fetchHistory();\r\n            }\r\n        } catch (e) {\r\n            setError(e);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => chatMessageStreamEnd.current?.scrollIntoView({ behavior: \"smooth\" }), [isLoading]);\r\n\r\n    const totalTokens =\r\n        systemPromptTokens + answers.map(answ => (answ.response.user_tokens || 0) + (answ.response.tokens || 0)).reduceRight((prev, curr) => prev + curr, 0);\r\n\r\n    const onBotChanged = async (newBot: Bot) => {\r\n        await botStorageService.setBotConfig(bot_id, newBot);\r\n        setBotConfig(newBot);\r\n        // count tokens in case of new system message\r\n        if (newBot.system_message !== botConfig.system_message) {\r\n            const response = await countTokensAPI({ text: newBot.system_message, model: LLM });\r\n            setSystemPromptTokens(response.count);\r\n        }\r\n    };\r\n\r\n    const onRegeneratResponseClicked = async () => {\r\n        if (answers.length > 0 && botChatStorage.getActiveChatId()) {\r\n            await botChatStorage.popMessage();\r\n            let last = answers.pop();\r\n            setAnswers(answers);\r\n            if (last) {\r\n                makeApiRequest(last.user);\r\n            }\r\n        }\r\n    };\r\n    const clearChat = () => {\r\n        lastQuestionRef.current = \"\";\r\n        error && setError(undefined);\r\n        //unset active chat\r\n        if (active_chat) {\r\n            setActiveChat(undefined);\r\n        }\r\n        setAnswers([]);\r\n    };\r\n\r\n    const onRollbackMessage = (message: string) => {\r\n        return async () => {\r\n            if (active_chat) {\r\n                let result = await botChatStorage.rollbackMessage(message);\r\n                if (result) {\r\n                    setAnswers(result.messages);\r\n                    lastQuestionRef.current = result.messages.length > 0 ? result.messages[result.messages.length - 1].user : \"\";\r\n                }\r\n                setQuestion(message);\r\n            }\r\n        };\r\n    };\r\n    const onExampleClicked = (example: string) => {\r\n        makeApiRequest(example);\r\n    };\r\n\r\n    const onEditChange = (isEditable: boolean) => {\r\n        setSidebarWidth(isEditable ?\r\n            \"full_width\" :\r\n            \"large\");\r\n    }\r\n\r\n\r\n    const actions = (\r\n        <>\r\n            <ClearChatButton onClick={clearChat} disabled={!lastQuestionRef.current || isLoading} />\r\n        </>\r\n    );\r\n    const history = (\r\n        <History\r\n            allChats={allChats}\r\n            currentActiveChatId={active_chat}\r\n            onDeleteChat={async id => {\r\n                await botChatStorage.delete(id);\r\n                await fetchHistory();\r\n            }}\r\n            onChatNameChange={async (id, name: string) => {\r\n                const newName = prompt(t(\"components.history.newchat\"), name);\r\n                await botChatStorage.renameChat(id, newName ? newName.trim() : name);\r\n                await fetchHistory();\r\n            }}\r\n            onFavChange={async (id: string, fav: boolean) => {\r\n                await botChatStorage.changeFavouritesInDb(id, fav);\r\n                await fetchHistory();\r\n            }}\r\n            onSelect={async (id: string) => {\r\n                const chat = await botChatStorage.get(id);\r\n                if (chat) {\r\n                    setAnswers(chat.messages);\r\n                    lastQuestionRef.current = chat.messages.length > 0 ? chat.messages[chat.messages.length - 1].user : \"\";\r\n                    setActiveChat(id);\r\n                }\r\n            }}\r\n        ></History>\r\n    );\r\n    const sidebar = (\r\n        <>\r\n            <BotsettingsDrawer\r\n                bot={botConfig}\r\n                onBotChange={onBotChanged}\r\n                onDeleteBot={onDeleteBot}\r\n                actions={actions}\r\n                before_content={history}\r\n                onEditChange={onEditChange}\r\n            ></BotsettingsDrawer>\r\n        </>\r\n    );\r\n    const examplesComponent =\r\n        botConfig.examples && botConfig.examples.length > 0 ? <ExampleList examples={botConfig.examples} onExampleClicked={onExampleClicked} /> : <></>;\r\n    const inputComponent = (\r\n        <QuestionInput\r\n            clearOnSend\r\n            placeholder={t(\"chat.prompt\")}\r\n            disabled={isLoading}\r\n            onSend={question => makeApiRequest(question)}\r\n            tokens_used={totalTokens}\r\n            question={question}\r\n            setQuestion={question => setQuestion(question)}\r\n        />\r\n    );\r\n    const answerList = (\r\n        <AnswerList\r\n            answers={answers}\r\n            regularBotMsg={(answer, index) => {\r\n                return (\r\n                    <>\r\n                        {\" \"}\r\n                        {index === answers.length - 1 && (\r\n                            <Answer\r\n                                key={index}\r\n                                answer={answer.response}\r\n                                onRegenerateResponseClicked={onRegeneratResponseClicked}\r\n                                setQuestion={question => setQuestion(question)}\r\n                            />\r\n                        )}\r\n                        {index !== answers.length - 1 && <Answer key={index} answer={answer.response} setQuestion={question => setQuestion(question)} />}\r\n                    </>\r\n                );\r\n            }}\r\n            onRollbackMessage={onRollbackMessage}\r\n            isLoading={isLoading}\r\n            error={error}\r\n            makeApiRequest={() => makeApiRequest(lastQuestionRef.current)}\r\n            chatMessageStreamEnd={chatMessageStreamEnd}\r\n            lastQuestionRef={lastQuestionRef}\r\n        />\r\n    );\r\n    return (\r\n        <ChatLayout\r\n            sidebar={sidebar}\r\n            examples={examplesComponent}\r\n            answers={answerList}\r\n            input={inputComponent}\r\n            showExamples={!lastQuestionRef.current}\r\n            header=\"\"\r\n            header_as_markdown={false}\r\n            messages_description={t(\"common.messages\")}\r\n            size={sidebarSize}\r\n        ></ChatLayout>\r\n    );\r\n};\r\n\r\nexport default BotChat;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport { createHashRouter, RouterProvider } from \"react-router-dom\";\r\nimport { initializeIcons } from \"@fluentui/react\";\r\nimport \"./i18n\";\r\n\r\nimport \"./index.css\";\r\n\r\nimport Layout from \"./pages/layout/Layout\";\r\nimport Chat from \"./pages/chat/Chat\";\r\nimport Summarize from \"./pages/summarize/Summarize\";\r\nimport { LanguageContextProvider } from \"./components/LanguageSelector/LanguageContextProvider\";\r\nimport Brainstorm from \"./pages/brainstorm/Brainstorm\";\r\nimport Faq from \"./pages/faq/Faq\";\r\nimport Version from \"./pages/version/Version\";\r\nimport Menu from \"./pages/menu/Menu\";\r\nimport { LLMContextProvider } from \"./components/LLMSelector/LLMContextProvider\";\r\nimport Simply from \"./pages/simplyfied-language/Simply\";\r\nimport Bot from \"./pages/bot/Bot\";\r\nimport { QuickPromptProvider } from \"./components/QuickPrompt/QuickPromptProvider\";\r\ninitializeIcons();\r\n\r\nconst router = createHashRouter([\r\n    {\r\n        path: \"/\",\r\n        element: <Layout />,\r\n        errorElement: <div>Error</div>,\r\n        children: [\r\n            {\r\n                index: true,\r\n                element: <Menu />,\r\n                errorElement: <div>Fehler</div>\r\n            },\r\n            {\r\n                path: \"chat\",\r\n                element: <Chat />,\r\n                errorElement: <div>Fehler</div>\r\n            },\r\n            {\r\n                path: \"sum\",\r\n                element: <Summarize />,\r\n                errorElement: <div>Fehler</div>\r\n            },\r\n            {\r\n                path: \"brainstorm\",\r\n                element: <Brainstorm />,\r\n                errorElement: <div>Fehler</div>\r\n            },\r\n            {\r\n                path: \"faq\",\r\n                element: <Faq />,\r\n                errorElement: <div>Fehler</div>\r\n            },\r\n            {\r\n                path: \"version\",\r\n                element: <Version />,\r\n                errorElement: <div>Fehler</div>\r\n            },\r\n            {\r\n                path: \"simply\",\r\n                element: <Simply />,\r\n                errorElement: <div>Fehler</div>\r\n            },\r\n            {\r\n                path: \"bot/:id\",\r\n                element: <Bot />,\r\n                errorElement: <div>Fehler</div>\r\n            },\r\n            /** {\r\n                 path: \"qa\",\r\n                 lazy: () => import(\"./pages/oneshot/OneShot\")\r\n             }, */\r\n            {\r\n                path: \"*\",\r\n                lazy: () => import(\"./pages/NoPage\")\r\n            }\r\n        ]\r\n    }\r\n]);\r\n\r\nasync function enableMocking() {\r\n    // Check if we're not in development mode\r\n    if (import.meta.env?.MODE !== 'development') {\r\n        return\r\n    }\r\n    const { worker } = await import('./mocks/browser.js')\r\n\r\n    // `worker.start()` returns a Promise that resolves\r\n    // once the Service Worker is up and ready to intercept requests.\r\n    return worker.start()\r\n}\r\n\r\nenableMocking().then(() => {\r\n    ReactDOM.createRoot(document.getElementById(\"root\") as HTMLElement).render(\r\n        <React.StrictMode>\r\n            <LanguageContextProvider>\r\n                <LLMContextProvider>\r\n                    <QuickPromptProvider>\r\n                        <RouterProvider router={router} />\r\n                    </QuickPromptProvider>\r\n                </LLMContextProvider>\r\n            </LanguageContextProvider>\r\n        </React.StrictMode>\r\n    );\r\n});\r\n"],"file":"assets/index-DplxtKHF.js"}